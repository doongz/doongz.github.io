"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[21826],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),s=c(t),f=i,d=s["".concat(l,".").concat(f)]||s[f]||m[f]||a;return t?r.createElement(d,p(p({ref:n},u),{},{components:t})):r.createElement(d,p({ref:n},u))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,p=new Array(a);p[0]=f;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[s]="string"==typeof e?e:i,p[1]=o;for(var c=2;c<a;c++)p[c]=t[c];return r.createElement.apply(null,p)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},49132:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>p,default:()=>s,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=t(87462),i=(t(67294),t(3905));const a={},p=void 0,o={unversionedId:"Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u5dee\u5206/<\u6392\u5e8f+\u524d\u7f00\u548c-\u5dee\u5206>-\u62fc\u8f66",id:"Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u5dee\u5206/<\u6392\u5e8f+\u524d\u7f00\u548c-\u5dee\u5206>-\u62fc\u8f66",title:"<\u6392\u5e8f+\u524d\u7f00\u548c-\u5dee\u5206>-\u62fc\u8f66",description:"1094. \u62fc\u8f66",source:"@site/docs/Algorithm/2-\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u5dee\u5206/1094-<\u6392\u5e8f+\u524d\u7f00\u548c-\u5dee\u5206>-\u62fc\u8f66.md",sourceDirName:"Algorithm/2-\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u5dee\u5206",slug:"/Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u5dee\u5206/<\u6392\u5e8f+\u524d\u7f00\u548c-\u5dee\u5206>-\u62fc\u8f66",permalink:"/docs/Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u5dee\u5206/<\u6392\u5e8f+\u524d\u7f00\u548c-\u5dee\u5206>-\u62fc\u8f66",draft:!1,tags:[],version:"current",sidebarPosition:1094,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<\u5dee\u5206\u6570\u7ec4>-K \u8fde\u7eed\u4f4d\u7684\u6700\u5c0f\u7ffb\u8f6c\u6b21\u6570",permalink:"/docs/Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u5dee\u5206/<\u5dee\u5206\u6570\u7ec4>-K \u8fde\u7eed\u4f4d\u7684\u6700\u5c0f\u7ffb\u8f6c\u6b21\u6570"},next:{title:"<\u5dee\u5206>-\u822a\u73ed\u9884\u8ba2\u7edf\u8ba1",permalink:"/docs/Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u5dee\u5206/<\u5dee\u5206>-\u822a\u73ed\u9884\u8ba2\u7edf\u8ba1"}},l={},c=[{value:"1094. \u62fc\u8f66",id:"1094-\u62fc\u8f66",level:4}],u={toc:c};function s(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"1094-\u62fc\u8f66"},(0,i.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/car-pooling/"},"1094. \u62fc\u8f66")),(0,i.kt)("p",null,"\u8f66\u4e0a\u6700\u521d\u6709 ",(0,i.kt)("inlineCode",{parentName:"p"},"capacity")," \u4e2a\u7a7a\u5ea7\u4f4d\u3002\u8f66 ",(0,i.kt)("strong",{parentName:"p"},"\u53ea\u80fd")," \u5411\u4e00\u4e2a\u65b9\u5411\u884c\u9a76\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c",(0,i.kt)("strong",{parentName:"p"},"\u4e0d\u5141\u8bb8\u6389\u5934\u6216\u6539\u53d8\u65b9\u5411"),"\uff09"),(0,i.kt)("p",null,"\u7ed9\u5b9a\u6574\u6570 ",(0,i.kt)("inlineCode",{parentName:"p"},"capacity")," \u548c\u4e00\u4e2a\u6570\u7ec4 ",(0,i.kt)("inlineCode",{parentName:"p"},"trips")," ,  ",(0,i.kt)("inlineCode",{parentName:"p"},"trip[i] = [numPassengersi, fromi, toi]")," \u8868\u793a\u7b2c ",(0,i.kt)("inlineCode",{parentName:"p"},"i"),"\u6b21\u65c5\u884c\u6709 ",(0,i.kt)("inlineCode",{parentName:"p"},"numPassengersi")," \u4e58\u5ba2\uff0c\u63a5\u4ed6\u4eec\u548c\u653e\u4ed6\u4eec\u7684\u4f4d\u7f6e\u5206\u522b\u662f ",(0,i.kt)("inlineCode",{parentName:"p"},"fromi")," \u548c ",(0,i.kt)("inlineCode",{parentName:"p"},"toi")," \u3002\u8fd9\u4e9b\u4f4d\u7f6e\u662f\u4ece\u6c7d\u8f66\u7684\u521d\u59cb\u4f4d\u7f6e\u5411\u4e1c\u7684\u516c\u91cc\u6570\u3002"),(0,i.kt)("p",null,"\u5f53\u4e14\u4ec5\u5f53\u4f60\u53ef\u4ee5\u5728\u6240\u6709\u7ed9\u5b9a\u7684\u884c\u7a0b\u4e2d\u63a5\u9001\u6240\u6709\u4e58\u5ba2\u65f6\uff0c\u8fd4\u56de ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"\uff0c\u5426\u5219\u8bf7\u8fd4\u56de ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u793a\u4f8b 1\uff1a\n\n\u8f93\u5165\uff1atrips = [[2,1,5],[3,3,7]], capacity = 4\n\u8f93\u51fa\uff1afalse\n\n\u793a\u4f8b 2\uff1a\n\n\u8f93\u5165\uff1atrips = [[2,1,5],[3,3,7]], capacity = 5\n\u8f93\u51fa\uff1atrue\n")),(0,i.kt)("p",null,"\u63d0\u793a\uff1a"),(0,i.kt)("p",null,"1 <= trips.length <= 1000\ntrips","[i]",".length == 3\n1 <= numPassengersi <= 100\n0 <= fromi < toi <= 1000\n1 <= capacity <= 105"),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u65b9\u6cd5\u4e00\uff1a\u6392\u5e8f+\u524d\u7f00\u548c")),(0,i.kt)("p",null,"\u7528\u4e0a\u4e0b\u8f66\u4f4d\u7f6e\u548c\u4e0a\u4e0b\u8f66\u4eba\u6570\u6784\u6210\u4e00\u4e2a\u70b9\uff0c\u6392\u5e8f\u65f6\uff0c\u4f4d\u7f6e\u4e3a\u7b2c\u4e00\u4f18\u5148\u7ea7\uff0c\u5176\u6b21\u540c\u4e00\u4f4d\u7f6e\u65f6\u5148\u4e0b\u8f66\u518d\u4e0a\u8f66"),(0,i.kt)("p",null,"\u5982\uff1a[","[4,5,6]",",","[6,4,7]",",","[4,3,5]",",","[2,3,5]","]"),(0,i.kt)("p",null,"\u5904\u7406\u540e\u7684\u539f\u6570\u7ec4\u4e3a\uff1a","[(3, 4), (3, 2), (4, 6), (5, 4), (5, -4), (5, -2), (6, -4), (7, -6)]"),(0,i.kt)("p",null,"\u524d\u7f00\u548c\u6570\u7ec4\u4e3a\u7b2c i \u4e2a\u70b9\u8f66\u4e0a\u7684\u4eba\u6570\uff0c\u8f66\u4e0a\u7684\u4eba\u6570\u8d85\u8fc7\u5bb9\u91cf\u5c31\u8fd4\u56defalse"),(0,i.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},"O(n)")),(0,i.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},"O(n)")),(0,i.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a36 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8678.59%\u7684\u7528\u6237"),(0,i.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a15.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8618.90%\u7684\u7528\u6237"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def carPooling(self, trips: List[List[int]], capacity: int) -> bool:\n        arr = []\n        for i, trip in enumerate(trips):\n            arr.append((trip[1], trip[0]))\n            arr.append((trip[2], -trip[0]))\n        # \u6392\u5e8f\u65f6\uff0c\u4f4d\u7f6e\u4e3a\u7b2c\u4e00\u4f18\u5148\u7ea7\uff0c\u5176\u6b21\u540c\u4e00\u4f4d\u7f6e\u65f6\u5148\u4e0b\u8f66\u518d\u4e0a\u8f66\n        arr.sort(key = lambda x: (x[0], x[1]))\n        # print(arr)\n        preSum = 0\n        for a in arr:\n            preSum += a[1]\n            if preSum > capacity:\n                return False\n        return True\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u65b9\u6cd5\u4e8c\uff1a\u5dee\u5206")),(0,i.kt)("p",null,"\u95ee\u9898\u7684\u5b9e\u8d28\u5373\u7ebf\u6bb5\u91cd\u53e0\u548c\u95ee\u9898,\uff0c\u4e0d\u9700\u6392\u5e8f\uff0c\u4e00\u8d9f\u626b\u63cf\u5dee\u5206\u6c42\u89e3"),(0,i.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},"O(n)")),(0,i.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},"O(n)")),(0,i.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a32 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8692.46%\u7684\u7528\u6237"),(0,i.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a15.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8612.32%\u7684\u7528\u6237"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def carPooling(self, trips: List[List[int]], capacity: int) -> bool:\n        # \u5efa\u7acb\u5dee\u5206\u6570\u7ec4\n        diff = [0] * 1001\n        for cnt, start, end in trips:\n            diff[start] += cnt\n            diff[end] -= cnt\n        \n        # \u8ba1\u7b97\u524d\u7f00\u548c\n        preSum = 0\n        for i in range(1001):\n            preSum += diff[i]\n            if preSum > capacity:\n                return False\n        return True\n")),(0,i.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a4 ms, \u5728\u6240\u6709 Go \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8698.35%\u7684\u7528\u6237"),(0,i.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a4.3 MB, \u5728\u6240\u6709 Go \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8617.36%\u7684\u7528\u6237"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"func carPooling(trips [][]int, capacity int) bool {\n    // \u5efa\u7acb\u5dee\u5206\u6570\u7ec4\n    diff := []int{}\n    for i := 0; i < 1001; i++ {\n        diff = append(diff, 0)\n    }\n    for _, trip := range trips {\n        diff[trip[1]] += trip[0]\n        diff[trip[2]] -= trip[0]\n    }\n\n    // \u8ba1\u7b97\u524d\u7f00\u548c\n    var preSum int = 0\n    for i := 0; i < 1001; i++ {\n        preSum += diff[i]\n        if preSum > capacity {\n            return false\n        }\n    }\n    return true\n}\n")))}s.isMDXComponent=!0}}]);