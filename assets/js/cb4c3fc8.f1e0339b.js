"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[24628],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),p=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return o.createElement(l.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},k=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),c=p(t),k=r,m=c["".concat(l,".").concat(k)]||c[k]||u[k]||a;return t?o.createElement(m,i(i({ref:n},s),{},{components:t})):o.createElement(m,i({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=k;var d={};for(var l in n)hasOwnProperty.call(n,l)&&(d[l]=n[l]);d.originalType=e,d[c]="string"==typeof e?e:r,i[1]=d;for(var p=2;p<a;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}k.displayName="MDXCreateElement"},4404:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>d,toc:()=>p});var o=t(87462),r=(t(67294),t(3905));const a={},i="\u8be6\u89e3 Kubernetes Pod \u7684\u5b9e\u73b0\u539f\u7406",d={unversionedId:"Knowledge/\u5bb9\u5668\u6280\u672f/kubernetes\u5bf9\u8c61\u8be6\u89e3/pod",id:"Knowledge/\u5bb9\u5668\u6280\u672f/kubernetes\u5bf9\u8c61\u8be6\u89e3/pod",title:"\u8be6\u89e3 Kubernetes Pod \u7684\u5b9e\u73b0\u539f\u7406",description:"\u6765\u6e90\uff1a\u8be6\u89e3 Kubernetes Pod \u7684\u5b9e\u73b0\u539f\u7406",source:"@site/docs/Knowledge/05-\u5bb9\u5668\u6280\u672f/kubernetes\u5bf9\u8c61\u8be6\u89e3/1-pod.md",sourceDirName:"Knowledge/05-\u5bb9\u5668\u6280\u672f/kubernetes\u5bf9\u8c61\u8be6\u89e3",slug:"/Knowledge/\u5bb9\u5668\u6280\u672f/kubernetes\u5bf9\u8c61\u8be6\u89e3/pod",permalink:"/docs/Knowledge/\u5bb9\u5668\u6280\u672f/kubernetes\u5bf9\u8c61\u8be6\u89e3/pod",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"docsSidebar",previous:{title:"kubernetes \u8d21\u732e\u6307\u5357",permalink:"/docs/Knowledge/\u5bb9\u5668\u6280\u672f/kubernetes\u8d21\u732e\u6307\u5357"},next:{title:"\u8be6\u89e3 Kubernetes Service \u7684\u5b9e\u73b0\u539f\u7406",permalink:"/docs/Knowledge/\u5bb9\u5668\u6280\u672f/kubernetes\u5bf9\u8c61\u8be6\u89e3/service"}},l={},p=[{value:"\u4e00\u3001\u6982\u8ff0",id:"\u4e00\u6982\u8ff0",level:2},{value:"1\u3001\u5bb9\u5668",id:"1\u5bb9\u5668",level:3},{value:"2\u3001\u5377",id:"2\u5377",level:3},{value:"3\u3001\u7f51\u7edc",id:"3\u7f51\u7edc",level:3},{value:"\u4e8c\u3001\u751f\u547d\u5468\u671f",id:"\u4e8c\u751f\u547d\u5468\u671f",level:2},{value:"1\u3001\u521b\u5efa",id:"1\u521b\u5efa",level:3},{value:"2\u3001\u5065\u5eb7\u68c0\u67e5",id:"2\u5065\u5eb7\u68c0\u67e5",level:3},{value:"3\u3001\u5220\u9664",id:"3\u5220\u9664",level:3},{value:"References",id:"references",level:2}],s={toc:p};function c(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,o.Z)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\u8be6\u89e3-kubernetes-pod-\u7684\u5b9e\u73b0\u539f\u7406"},"\u8be6\u89e3 Kubernetes Pod \u7684\u5b9e\u73b0\u539f\u7406"),(0,r.kt)("p",null,"\u6765\u6e90\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://draveness.me/kubernetes-pod/"},"\u8be6\u89e3 Kubernetes Pod \u7684\u5b9e\u73b0\u539f\u7406")),(0,r.kt)("p",null,"Pod\u3001Service\u3001Volume \u548c Namespace \u662f Kubernetes \u96c6\u7fa4\u4e2d\u56db\u5927\u57fa\u672c\u5bf9\u8c61\uff0c\u5b83\u4eec\u80fd\u591f\u8868\u793a\u7cfb\u7edf\u4e2d\u90e8\u7f72\u7684\u5e94\u7528\u3001\u5de5\u4f5c\u8d1f\u8f7d\u3001\u7f51\u7edc\u548c\u78c1\u76d8\u8d44\u6e90\uff0c\u5171\u540c\u5b9a\u4e49\u4e86\u96c6\u7fa4\u7684\u72b6\u6001\u3002Kubernetes \u4e2d\u5f88\u591a\u5176\u4ed6\u7684\u8d44\u6e90\u5176\u5b9e\u53ea\u5bf9\u8fd9\u4e9b\u57fa\u672c\u7684\u5bf9\u8c61\u8fdb\u884c\u4e86\u7ec4\u5408\u3002"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"k8s-10",src:t(7093).Z,width:"1200",height:"280"})),(0,r.kt)("p",null,"Pod \u662f Kubernetes \u96c6\u7fa4\u4e2d\u80fd\u591f\u88ab\u521b\u5efa\u548c\u7ba1\u7406\u7684\u6700\u5c0f\u90e8\u7f72\u5355\u5143\uff0c\u60f3\u8981\u5f7b\u5e95\u548c\u5b8c\u6574\u7684\u4e86\u89e3 Kubernetes \u7684\u5b9e\u73b0\u539f\u7406\uff0c\u6211\u4eec\u5fc5\u987b\u8981\u6e05\u695a Pod \u7684\u5b9e\u73b0\u539f\u7406\u4ee5\u53ca\u6700\u4f73\u5b9e\u8df5\u3002"),(0,r.kt)("p",null,"\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u5206\u4e24\u4e2a\u90e8\u5206\u5bf9 Pod \u8fdb\u884c\u89e3\u6790\uff0c\u7b2c\u4e00\u90e8\u5206\u4e3b\u8981\u4f1a\u4ece\u6982\u5ff5\u5165\u624b\u4ecb\u7ecd Pod \u4e2d\u5fc5\u987b\u4e86\u89e3\u7684\u7279\u6027\uff0c\u800c\u7b2c\u4e8c\u90e8\u5206\u4f1a\u4ecb\u7ecd Pod \u4ece\u521b\u5efa\u5230\u5220\u9664\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u5185\u7684\u91cd\u8981\u4e8b\u4ef6\u5728\u6e90\u7801\u5c42\u9762\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002"),(0,r.kt)("h2",{id:"\u4e00\u6982\u8ff0"},"\u4e00\u3001\u6982\u8ff0"),(0,r.kt)("p",null,"\u4f5c\u4e3a Kubernetes \u96c6\u7fa4\u4e2d\u7684\u57fa\u672c\u5355\u5143\uff0cPod \u5c31\u662f\u6700\u5c0f\u5e76\u4e14\u6700\u7b80\u5355\u7684 Kubernetes \u5bf9\u8c61\uff0c\u8fd9\u4e2a\u7b80\u5355\u7684\u5bf9\u8c61\u5176\u5b9e\u5c31\u80fd\u591f\u72ec\u7acb\u542f\u52a8\u4e00\u4e2a\u540e\u7aef\u8fdb\u7a0b\u5e76\u5728\u96c6\u7fa4\u7684\u5185\u90e8\u4e3a\u8c03\u7528\u65b9\u63d0\u4f9b\u670d\u52a1\u3002\u5728\u4e0a\u4e00\u7bc7\u6587\u7ae0 ",(0,r.kt)("a",{parentName:"p",href:"https://draveness.me/kubernetes-object-intro"},"\u4ece Kubernetes \u4e2d\u7684\u5bf9\u8c61\u8c08\u8d77")," \u4e2d\uff0c\u6211\u4eec\u66fe\u7ecf\u4ecb\u7ecd\u8fc7\u7b80\u5355\u7684 Kubernetes Pod \u662f\u5982\u4f55\u4f7f\u7528 YAML \u8fdb\u884c\u63cf\u8ff0\u7684\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Pod\nmetadata:\n  name: busybox\n  labels:\n    app: busybox\nspec:\n  containers:\n  - image: busybox\n    command:\n      - sleep\n      - "3600"\n    imagePullPolicy: IfNotPresent\n    name: busybox\n  restartPolicy: Always\n')),(0,r.kt)("p",null,"\u8fd9\u4e2a YAML \u6587\u4ef6\u63cf\u8ff0\u4e86\u4e00\u4e2a Pod \u542f\u52a8\u65f6\u8fd0\u884c\u7684\u5bb9\u5668\u548c\u547d\u4ee4\u4ee5\u53ca\u5b83\u7684\u91cd\u542f\u7b56\u7565\uff0c\u5728\u5f53\u524d Pod \u51fa\u73b0\u9519\u8bef\u6216\u8005\u6267\u884c\u7ed3\u675f\u540e\u662f\u5426\u5e94\u8be5\u88ab Kubernetes \u7684\u63a7\u5236\u5668\u62c9\u8d77\u6765\uff0c\u9664\u4e86\u8fd9\u4e9b\u6bd4\u8f83\u663e\u773c\u7684\u914d\u7f6e\u4e4b\u5916\uff0c\u5143\u6570\u636e ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata")," \u7684\u914d\u7f6e\u4e5f\u975e\u5e38\u91cd\u8981\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"name")," \u662f\u5f53\u524d\u5bf9\u8c61\u5728 Kubernetes \u96c6\u7fa4\u4e2d\u7684\u552f\u4e00\u6807\u8bc6\u7b26\uff0c\u800c\u6807\u7b7e ",(0,r.kt)("inlineCode",{parentName:"p"},"labels")," \u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5feb\u901f\u9009\u62e9\u5bf9\u8c61\u3002"),(0,r.kt)("p",null,"\u5728\u540c\u4e00\u4e2a Pod \u4e2d\uff0c\u6709\u51e0\u4e2a\u6982\u5ff5\u7279\u522b\u503c\u5f97\u5173\u6ce8\uff0c\u9996\u5148\u5c31\u662f\u5bb9\u5668\uff0c\u5728 Pod \u4e2d\u5176\u5b9e\u53ef\u4ee5\u540c\u65f6\u8fd0\u884c\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5bb9\u5668\uff0c\u8fd9\u4e9b\u5bb9\u5668\u80fd\u591f\u5171\u4eab\u7f51\u7edc\u3001\u5b58\u50a8\u4ee5\u53ca CPU\u3001\u5185\u5b58\u7b49\u8d44\u6e90\u3002\u5728\u8fd9\u4e00\u5c0f\u8282\u4e2d\u6211\u4eec\u5c06\u5173\u6ce8 Pod \u4e2d\u7684\u5bb9\u5668\u3001\u5377\u548c\u7f51\u7edc\u4e09\u5927\u6982\u5ff5"),(0,r.kt)("h3",{id:"1\u5bb9\u5668"},"1\u3001\u5bb9\u5668"),(0,r.kt)("p",null,"\u6bcf\u4e00\u4e2a Kubernetes \u7684 Pod \u5176\u5b9e\u90fd\u5177\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u5bb9\u5668\uff0c\u4e24\u79cd\u4e0d\u540c\u5bb9\u5668\u7684\u804c\u8d23\u5176\u5b9e\u5341\u5206\u6e05\u6670\uff0c\u4e00\u79cd\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"InitContainer"),"\uff0c\u8fd9\u79cd\u5bb9\u5668\u4f1a\u5728 Pod \u542f\u52a8\u65f6\u8fd0\u884c\uff0c\u4e3b\u8981\u7528\u4e8e\u521d\u59cb\u5316\u4e00\u4e9b\u914d\u7f6e\uff0c\u53e6\u4e00\u79cd\u662f Pod \u5728 Running \u72b6\u6001\u65f6\u5185\u90e8\u5b58\u6d3b\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"Container"),"\uff0c\u5b83\u4eec\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\u6216\u8005\u4f5c\u4e3a\u5de5\u4f5c\u8282\u70b9\u5904\u7406\u5f02\u6b65\u4efb\u52a1\u7b49\u7b49\u3002"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"k8s-11",src:t(10251).Z,width:"1200",height:"300"})),(0,r.kt)("p",null,"\u901a\u8fc7\u5bf9\u4e0d\u540c\u5bb9\u5668\u7c7b\u578b\u7684\u547d\u540d\u6211\u4eec\u4e5f\u53ef\u4ee5\u770b\u51fa\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"InitContainer")," \u4f1a\u6bd4 ",(0,r.kt)("inlineCode",{parentName:"p"},"Container"),"\u4f18\u5148\u542f\u52a8\uff0c\u5728 ",(0,r.kt)("inlineCode",{parentName:"p"},"kubeGenericRuntimeManager.SyncPod")," \u65b9\u6cd5\u4e2d\u4f1a\u5148\u540e\u542f\u52a8\u4e24\u79cd\u5bb9\u5668\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func (m *kubeGenericRuntimeManager) SyncPod(pod *v1.Pod, _ v1.PodStatus, podStatus *kubecontainer.PodStatus, pullSecrets []v1.Secret, backOff *flowcontrol.Backoff) (result kubecontainer.PodSyncResult) {\n    // Step 1: Compute sandbox and container changes.\n    // Step 2: Kill the pod if the sandbox has changed.\n    // Step 3: kill any running containers in this pod which are not to keep.\n    // Step 4: Create a sandbox for the pod if necessary.\n    // ...\n\n    // Step 5: start the init container.\n    if container := podContainerChanges.NextInitContainerToStart; container != nil {\n        msg, _ := m.startContainer(podSandboxID, podSandboxConfig, container, pod, podStatus, pullSecrets, podIP, kubecontainer.ContainerTypeInit)\n    }\n\n    // Step 6: start containers in podContainerChanges.ContainersToStart.\n    for _, idx := range podContainerChanges.ContainersToStart {\n        container := &pod.Spec.Containers[idx]\n        \n        msg, _ := m.startContainer(podSandboxID, podSandboxConfig, container, pod, podStatus, pullSecrets, podIP, kubecontainer.ContainerTypeRegular)\n    }\n\n    return\n}\n")),(0,r.kt)("p",null,"\u901a\u8fc7\u5206\u6790\u79c1\u6709\u65b9\u6cd5 ",(0,r.kt)("inlineCode",{parentName:"p"},"startContainer")," \u7684\u5b9e\u73b0\u6211\u4eec\u5f97\u51fa\uff1a\u5bb9\u5668\u7684\u7c7b\u578b\u6700\u7ec8\u53ea\u4f1a\u5f71\u54cd\u5728 Debug \u65f6\u521b\u5efa\u7684\u6807\u7b7e\uff0c\u6240\u4ee5\u5bf9\u4e8e Kubernetes \u6765\u8bf4\u4e24\u79cd\u5bb9\u5668\u7684\u542f\u52a8\u548c\u6267\u884c\u4e5f\u5c31\u53ea\u6709\u987a\u5e8f\u5148\u540e\u7684\u4e0d\u540c\u3002"),(0,r.kt)("h3",{id:"2\u5377"},"2\u3001\u5377"),(0,r.kt)("p",null,"\u6bcf\u4e00\u4e2a Pod \u4e2d\u7684\u5bb9\u5668\u662f\u53ef\u4ee5\u901a\u8fc7 ",(0,r.kt)("a",{parentName:"p",href:"https://draveness.me/kubernetes-volume"},"\u5377\uff08Volume\uff09")," \u7684\u65b9\u5f0f\u5171\u4eab\u6587\u4ef6\u76ee\u5f55\u7684\uff0c\u8fd9\u4e9b Volume \u80fd\u591f\u5b58\u50a8\u6301\u4e45\u5316\u7684\u6570\u636e\uff1b\u5728\u5f53\u524d Pod \u51fa\u73b0\u6545\u969c\u6216\u8005\u6eda\u52a8\u66f4\u65b0\u65f6\uff0c\u5bf9\u5e94 Volume \u4e2d\u7684\u6570\u636e\u5e76\u4e0d\u4f1a\u88ab\u6e05\u9664\uff0c\u800c\u662f\u4f1a\u5728 Pod \u91cd\u542f\u540e\u91cd\u65b0\u6302\u8f7d\u5230\u671f\u671b\u7684\u6587\u4ef6\u76ee\u5f55\u4e2d\uff1a"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"k8s-12",src:t(23942).Z,width:"1200",height:"240"})),(0,r.kt)("p",null,"kubelet.go \u6587\u4ef6\u4e2d\u7684\u79c1\u6709\u65b9\u6cd5 ",(0,r.kt)("inlineCode",{parentName:"p"},"syncPod")," \u4f1a\u8c03\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"WaitForAttachAndMount")," \u65b9\u6cd5\u4e3a\u7b49\u5f85\u5f53\u524d Pod \u542f\u52a8\u9700\u8981\u7684\u6302\u8f7d\u6587\u4ef6\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func (vm *volumeManager) WaitForAttachAndMount(pod *v1.Pod) error {\n    expectedVolumes := getExpectedVolumes(pod)\n    uniquePodName := util.GetUniquePodName(pod)\n\n    vm.desiredStateOfWorldPopulator.ReprocessPod(uniquePodName)\n\n    wait.PollImmediate(\n        podAttachAndMountRetryInterval,\n        podAttachAndMountTimeout,\n        vm.verifyVolumesMountedFunc(uniquePodName, expectedVolumes))\n\n    return nil\n}\n")),(0,r.kt)("p",null,"\u6211\u4eec\u4f1a\u5728 ",(0,r.kt)("a",{parentName:"p",href:"https://draveness.me/kubernetes-volume"},"\u540e\u9762\u7684\u7ae0\u8282")," \u8be6\u7ec6\u5730\u4ecb\u7ecd Kubernetes \u4e2d\u5377\u7684\u521b\u5efa\u3001\u6302\u8f7d\u662f\u5982\u4f55\u8fdb\u884c\u7684\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u77e5\u9053\u7684\u662f\u5377\u7684\u6302\u8f7d\u662f Pod \u542f\u52a8\u4e4b\u524d\u5fc5\u987b\u8981\u5b8c\u6210\u7684\u5de5\u4f5c\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func (kl *Kubelet) syncPod(o syncPodOptions) error {\n    // ...\n\n    if !kl.podIsTerminated(pod) {\n        kl.volumeManager.WaitForAttachAndMount(pod)\n    }\n\n    pullSecrets := kl.getPullSecretsForPod(pod)\n\n    result := kl.containerRuntime.SyncPod(pod, apiPodStatus, podStatus, pullSecrets, kl.backOff)\n    kl.reasonCache.Update(pod.UID, result)\n\n    return nil\n}\n")),(0,r.kt)("p",null,"\u5728\u5f53\u524d Pod \u7684\u5377\u521b\u5efa\u5b8c\u6210\u4e4b\u540e\uff0c\u5c31\u4f1a\u8c03\u7528\u4e0a\u4e00\u8282\u4e2d\u63d0\u5230\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"SyncPod")," \u516c\u6709\u65b9\u6cd5\u7ee7\u7eed\u8fdb\u884c\u540c\u6b65 Pod \u4fe1\u606f\u548c\u521b\u5efa\u3001\u542f\u52a8\u5bb9\u5668\u7684\u5de5\u4f5c\u3002"),(0,r.kt)("h3",{id:"3\u7f51\u7edc"},"3\u3001\u7f51\u7edc"),(0,r.kt)("p",null,"\u540c\u4e00\u4e2a Pod \u4e2d\u7684\u591a\u4e2a\u5bb9\u5668\u4f1a\u88ab\u5171\u540c\u5206\u914d\u5230\u540c\u4e00\u4e2a Host \u4e0a\u5e76\u4e14\u5171\u4eab\u7f51\u7edc\u6808\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e9b Pod \u80fd\u591f\u901a\u8fc7 localhost \u4e92\u76f8\u8bbf\u95ee\u5230\u5f7c\u6b64\u7684\u7aef\u53e3\u548c\u670d\u52a1\uff0c\u5982\u679c\u4f7f\u7528\u4e86\u76f8\u540c\u7684\u7aef\u53e3\u4e5f\u4f1a\u53d1\u751f\u51b2\u7a81\uff0c\u540c\u4e00\u4e2a Pod \u4e0a\u7684\u6240\u6709\u5bb9\u5668\u4f1a\u8fde\u63a5\u5230\u540c\u4e00\u4e2a\u7f51\u7edc\u8bbe\u5907\u4e0a\uff0c\u8fd9\u4e2a\u7f51\u7edc\u8bbe\u5907\u5c31\u662f\u7531 Pod Sandbox \u4e2d\u7684\u6c99\u7bb1\u5bb9\u5668\u5728 ",(0,r.kt)("inlineCode",{parentName:"p"},"RunPodSandbox")," \u65b9\u6cd5\u4e2d\u542f\u52a8\u65f6\u521b\u5efa\u7684\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func (ds *dockerService) RunPodSandbox(ctx context.Context, r *runtimeapi.RunPodSandboxRequest) (*runtimeapi.RunPodSandboxResponse, error) {\n    config := r.GetConfig()\n\n    // Step 1: Pull the image for the sandbox.\n    image := defaultSandboxImage\n\n    // Step 2: Create the sandbox container.\n    createConfig, _ := ds.makeSandboxDockerConfig(config, image)\n    createResp, _ := ds.client.CreateContainer(*createConfig)\n\n    resp := &runtimeapi.RunPodSandboxResponse{PodSandboxId: createResp.ID}\n\n    ds.setNetworkReady(createResp.ID, false)\n\n    // Step 3: Create Sandbox Checkpoint.\n    ds.checkpointManager.CreateCheckpoint(createResp.ID, constructPodSandboxCheckpoint(config))\n\n    // Step 4: Start the sandbox container.\n    ds.client.StartContainer(createResp.ID)\n\n    // Step 5: Setup networking for the sandbox.\n    cID := kubecontainer.BuildContainerID(runtimeName, createResp.ID)\n    networkOptions := make(map[string]string)\n    ds.network.SetUpPod(config.GetMetadata().Namespace, config.GetMetadata().Name, cID, config.Annotations, networkOptions)\n\n    return resp, nil\n}\n")),(0,r.kt)("p",null,"\u6c99\u7bb1\u5bb9\u5668\u5176\u5b9e\u5c31\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"pause")," \u5bb9\u5668\uff0c\u4e0a\u8ff0\u65b9\u6cd5\u5f15\u7528\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultSandboxImage")," \u5176\u5b9e\u5c31\u662f\u5b98\u65b9\u63d0\u4f9b\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"k8s.gcr.io/pause:3.1")," \u955c\u50cf\uff0c\u8fd9\u91cc\u4f1a\u521b\u5efa\u6c99\u7bb1\u955c\u50cf\u548c\u68c0\u67e5\u70b9\u5e76\u542f\u52a8\u5bb9\u5668\u3002"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"k8s-13",src:t(72322).Z,width:"1200",height:"420"})),(0,r.kt)("p",null,"\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e0a\u90fd\u4f1a\u7531 Kubernetes \u7684\u7f51\u7edc\u63d2\u4ef6 Kubenet \u521b\u5efa\u4e00\u4e2a\u57fa\u672c\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"cbr0")," \u7f51\u6865\u5e76\u4e3a\u6bcf\u4e00\u4e2a Pod \u521b\u5efa ",(0,r.kt)("inlineCode",{parentName:"p"},"veth")," \u865a\u62df\u7f51\u7edc\u8bbe\u5907\uff0c\u540c\u4e00\u4e2a Pod \u4e2d\u7684\u6240\u6709\u5bb9\u5668\u5c31\u4f1a\u901a\u8fc7\u8fd9\u4e2a\u7f51\u7edc\u8bbe\u5907\u5171\u4eab\u7f51\u7edc\uff0c\u4e5f\u5c31\u662f\u80fd\u591f\u901a\u8fc7 localhost \u4e92\u76f8\u8bbf\u95ee\u5f7c\u6b64\u66b4\u9732\u7684\u7aef\u53e3\u548c\u670d\u52a1\u3002"),(0,r.kt)("h2",{id:"\u4e8c\u751f\u547d\u5468\u671f"},"\u4e8c\u3001\u751f\u547d\u5468\u671f"),(0,r.kt)("p",null,"\u60f3\u8981\u6df1\u5165\u7406\u89e3 Pod \u7684\u5b9e\u73b0\u539f\u7406\uff0c\u6700\u597d\u6700\u5feb\u7684\u529e\u6cd5\u5c31\u662f\u4ece Pod \u7684\u751f\u547d\u5468\u671f\u5165\u624b\uff0c\u901a\u8fc7\u7406\u89e3 Pod \u521b\u5efa\u3001\u91cd\u542f\u548c\u5220\u9664\u7684\u539f\u7406\u6211\u4eec\u6700\u7ec8\u5c31\u80fd\u591f\u7cfb\u7edf\u5730\u638c\u63e1 Pod \u7684\u751f\u547d\u5468\u671f\u4e0e\u6838\u5fc3\u539f\u7406\u3002"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"k8s-14",src:t(98061).Z,width:"1200",height:"550"})),(0,r.kt)("p",null,"\u5f53 Pod \u88ab\u521b\u5efa\u4e4b\u540e\uff0c\u5c31\u4f1a\u8fdb\u5165\u5065\u5eb7\u68c0\u67e5\u72b6\u6001\uff0c\u5f53 Kubernetes \u786e\u5b9a\u5f53\u524d Pod \u5df2\u7ecf\u80fd\u591f\u63a5\u53d7\u5916\u90e8\u7684\u8bf7\u6c42\u65f6\uff0c\u624d\u4f1a\u5c06\u6d41\u91cf\u6253\u5230\u65b0\u7684 Pod \u4e0a\u5e76\u7ee7\u7eed\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\uff0c\u5728\u8fd9\u671f\u95f4\u5982\u679c\u53d1\u751f\u4e86\u9519\u8bef\u5c31\u53ef\u80fd\u4f1a\u89e6\u53d1\u91cd\u542f\u673a\u5236\uff0c\u5728 Pod \u88ab\u5220\u9664\u4e4b\u524d\u90fd\u4f1a\u89e6\u53d1\u4e00\u4e2a ",(0,r.kt)("inlineCode",{parentName:"p"},"PreStop")," \u7684\u94a9\u5b50\uff0c\u5176\u4e2d\u7684\u65b9\u6cd5\u5b8c\u6210\u4e4b\u540e Pod \u624d\u4f1a\u88ab\u5220\u9664\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u4f1a\u6309\u7167\u8fd9\u91cc\u7684\u987a\u5e8f\u4f9d\u6b21\u4ecb\u7ecd Pod \u300e\u4ece\u751f\u5230\u6b7b\u300f\u7684\u8fc7\u7a0b\u3002"),(0,r.kt)("h3",{id:"1\u521b\u5efa"},"1\u3001\u521b\u5efa"),(0,r.kt)("p",null,"Pod \u7684\u521b\u5efa\u90fd\u662f\u901a\u8fc7 ",(0,r.kt)("inlineCode",{parentName:"p"},"SyncPod")," \u6765\u5b9e\u73b0\u7684\uff0c\u521b\u5efa\u7684\u8fc7\u7a0b\u5927\u4f53\u4e0a\u53ef\u4ee5\u5206\u4e3a\u516d\u4e2a\u6b65\u9aa4\uff1a"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u8ba1\u7b97 Pod \u4e2d\u6c99\u76d2\u548c\u5bb9\u5668\u7684\u53d8\u66f4\uff1b"),(0,r.kt)("li",{parentName:"ol"},"\u5f3a\u5236\u505c\u6b62 Pod \u5bf9\u5e94\u7684\u6c99\u76d2\uff1b"),(0,r.kt)("li",{parentName:"ol"},"\u5f3a\u5236\u505c\u6b62\u6240\u6709\u4e0d\u5e94\u8be5\u8fd0\u884c\u7684\u5bb9\u5668\uff1b"),(0,r.kt)("li",{parentName:"ol"},"\u4e3a Pod \u521b\u5efa\u65b0\u7684\u6c99\u76d2\uff1b"),(0,r.kt)("li",{parentName:"ol"},"\u521b\u5efa Pod \u89c4\u683c\u4e2d\u6307\u5b9a\u7684\u521d\u59cb\u5316\u5bb9\u5668\uff1b"),(0,r.kt)("li",{parentName:"ol"},"\u4f9d\u6b21\u521b\u5efa Pod \u89c4\u683c\u4e2d\u6307\u5b9a\u7684\u5e38\u89c4\u5bb9\u5668\uff1b")),(0,r.kt)("p",null,"\u6211\u4eec\u53ef\u4ee5\u770b\u5230 Pod \u7684\u521b\u5efa\u8fc7\u7a0b\u5176\u5b9e\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u9996\u5148\u8ba1\u7b97 Pod \u89c4\u683c\u548c\u6c99\u7bb1\u7684\u53d8\u66f4\uff0c\u7136\u540e\u505c\u6b62\u53ef\u80fd\u5f71\u54cd\u8fd9\u4e00\u6b21\u521b\u5efa\u6216\u8005\u66f4\u65b0\u7684\u5bb9\u5668\uff0c\u6700\u540e\u4f9d\u6b21\u521b\u5efa\u6c99\u76d2\u3001\u521d\u59cb\u5316\u5bb9\u5668\u548c\u5e38\u89c4\u5bb9\u5668\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func (m *kubeGenericRuntimeManager) SyncPod(pod *v1.Pod, _ v1.PodStatus, podStatus *kubecontainer.PodStatus, pullSecrets []v1.Secret, backOff *flowcontrol.Backoff) (result kubecontainer.PodSyncResult) {\n    podContainerChanges := m.computePodActions(pod, podStatus)\n    if podContainerChanges.CreateSandbox {\n        ref, _ := ref.GetReference(legacyscheme.Scheme, pod)\n    }\n\n    if podContainerChanges.KillPod {\n        if podContainerChanges.CreateSandbox {\n            m.purgeInitContainers(pod, podStatus)\n        }\n    } else {\n        for containerID, containerInfo := range podContainerChanges.ContainersToKill {\n            m.killContainer(pod, containerID, containerInfo.name, containerInfo.message, nil)           }\n        }\n    }\n\n    podSandboxID := podContainerChanges.SandboxID\n    if podContainerChanges.CreateSandbox {\n        podSandboxID, _, _ = m.createPodSandbox(pod, podContainerChanges.Attempt)\n    }\n    podSandboxConfig, _ := m.generatePodSandboxConfig(pod, podContainerChanges.Attempt)\n\n    if container := podContainerChanges.NextInitContainerToStart; container != nil {\n        msg, _ := m.startContainer(podSandboxID, podSandboxConfig, container, pod, podStatus, pullSecrets, podIP, kubecontainer.ContainerTypeInit)\n    }\n\n    for _, idx := range podContainerChanges.ContainersToStart {\n        container := &pod.Spec.Containers[idx]\n        msg, _ := m.startContainer(podSandboxID, podSandboxConfig, container, pod, podStatus, pullSecrets, podIP, kubecontainer.ContainerTypeRegular)\n    }\n\n    return\n}\n")),(0,r.kt)("p",null,"\u7b80\u5316\u540e\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"SyncPod")," \u65b9\u6cd5\u7684\u8109\u7edc\u975e\u5e38\u6e05\u6670\uff0c\u53ef\u4ee5\u5f88\u597d\u5730\u7406\u89e3\u6574\u4e2a\u521b\u5efa Pod \u7684\u5de5\u4f5c\u6d41\u7a0b\uff1b\u800c\u521d\u59cb\u5316\u5bb9\u5668\u548c\u5e38\u89c4\u5bb9\u5668\u88ab\u8c03\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"startContainer")," \u6765\u542f\u52a8\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func (m *kubeGenericRuntimeManager) startContainer(podSandboxID string, podSandboxConfig *runtimeapi.PodSandboxConfig, container *v1.Container, pod *v1.Pod, podStatus *kubecontainer.PodStatus, pullSecrets []v1.Secret, podIP string, containerType kubecontainer.ContainerType) (string, error) {\n    imageRef, _, _ := m.imagePuller.EnsureImageExists(pod, container, pullSecrets)\n    \n    // ...\n    containerID, _ := m.runtimeService.CreateContainer(podSandboxID, containerConfig, podSandboxConfig)\n\n    m.internalLifecycle.PreStartContainer(pod, container, containerID)\n\n    m.runtimeService.StartContainer(containerID)\n\n    if container.Lifecycle != nil && container.Lifecycle.PostStart != nil {\n        kubeContainerID := kubecontainer.ContainerID{\n            Type: m.runtimeName,\n            ID:   containerID,\n        }\n        msg, _ := m.runner.Run(kubeContainerID, pod, container, container.Lifecycle.PostStart)\n    }\n\n    return "", nil\n}\n')),(0,r.kt)("p",null,"\u5728\u542f\u52a8\u6bcf\u4e00\u4e2a\u5bb9\u5668\u7684\u8fc7\u7a0b\u4e2d\u4e5f\u90fd\u6309\u7167\u76f8\u540c\u7684\u6b65\u9aa4\u8fdb\u884c\u64cd\u4f5c\uff1a"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u901a\u8fc7\u955c\u50cf\u62c9\u53d6\u5668\u83b7\u5f97\u5f53\u524d\u5bb9\u5668\u4e2d\u4f7f\u7528\u955c\u50cf\u7684\u5f15\u7528\uff1b"),(0,r.kt)("li",{parentName:"ol"},"\u8c03\u7528\u8fdc\u7a0b\u7684 ",(0,r.kt)("inlineCode",{parentName:"li"},"runtimeService")," \u521b\u5efa\u5bb9\u5668\uff1b"),(0,r.kt)("li",{parentName:"ol"},"\u8c03\u7528\u5185\u90e8\u7684\u751f\u547d\u5468\u671f\u65b9\u6cd5 ",(0,r.kt)("inlineCode",{parentName:"li"},"PreStartContainer")," \u4e3a\u5f53\u524d\u7684\u5bb9\u5668\u8bbe\u7f6e\u5206\u914d\u7684 CPU \u7b49\u8d44\u6e90\uff1b"),(0,r.kt)("li",{parentName:"ol"},"\u8c03\u7528\u8fdc\u7a0b\u7684 ",(0,r.kt)("inlineCode",{parentName:"li"},"runtimeService")," \u5f00\u59cb\u8fd0\u884c\u955c\u50cf\uff1b"),(0,r.kt)("li",{parentName:"ol"},"\u5982\u679c\u5f53\u524d\u7684\u5bb9\u5668\u5305\u542b ",(0,r.kt)("inlineCode",{parentName:"li"},"PostStart")," \u94a9\u5b50\u5c31\u4f1a\u6267\u884c\u8be5\u56de\u8c03\uff1b")),(0,r.kt)("p",null,"\u6bcf\u6b21 ",(0,r.kt)("inlineCode",{parentName:"p"},"SyncPod")," \u88ab\u8c03\u7528\u65f6\u4e0d\u4e00\u5b9a\u662f\u521b\u5efa\u65b0\u7684 Pod \u5bf9\u8c61\uff0c\u5b83\u8fd8\u4f1a\u627f\u62c5\u66f4\u65b0\u3001\u5220\u9664\u548c\u540c\u6b65 Pod \u89c4\u683c\u7684\u804c\u80fd\uff0c\u6839\u636e\u8f93\u5165\u7684\u65b0\u89c4\u683c\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\u3002"),(0,r.kt)("h3",{id:"2\u5065\u5eb7\u68c0\u67e5"},"2\u3001\u5065\u5eb7\u68c0\u67e5"),(0,r.kt)("p",null,"\u5982\u679c\u6211\u4eec\u9075\u5faa Pod \u7684\u6700\u4f73\u5b9e\u8df5\uff0c\u5176\u5b9e\u5e94\u8be5\u5c3d\u53ef\u80fd\u5730\u4e3a\u6bcf\u4e00\u4e2a Pod \u6dfb\u52a0 ",(0,r.kt)("inlineCode",{parentName:"p"},"livenessProbe")," \u548c ",(0,r.kt)("inlineCode",{parentName:"p"},"readinessProbe")," \u7684\u5065\u5eb7\u68c0\u67e5\uff0c\u8fd9\u4e24\u8005\u80fd\u591f\u4e3a Kubernetes \u63d0\u4f9b\u989d\u5916\u7684\u5b58\u6d3b\u4fe1\u606f\uff0c\u5982\u679c\u6211\u4eec\u914d\u7f6e\u4e86\u5408\u9002\u7684\u5065\u5eb7\u68c0\u67e5\u65b9\u6cd5\u548c\u89c4\u5219\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u51fa\u73b0\u670d\u52a1\u672a\u542f\u52a8\u5c31\u88ab\u6253\u5165\u6d41\u91cf\u6216\u8005\u957f\u65f6\u95f4\u672a\u54cd\u5e94\u4f9d\u7136\u6ca1\u6709\u91cd\u542f\u7b49\u95ee\u9898\u3002"),(0,r.kt)("p",null,"\u5728 Pod \u88ab\u521b\u5efa\u6216\u8005\u88ab\u79fb\u9664\u65f6\uff0c\u4f1a\u88ab\u52a0\u5165\u5230\u5f53\u524d\u8282\u70b9\u4e0a\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"ProbeManager")," \u4e2d\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"ProbeManager")," \u4f1a\u8d1f\u8d23\u8fd9\u4e9b Pod \u7684\u5065\u5eb7\u68c0\u67e5\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func (kl *Kubelet) HandlePodAdditions(pods []*v1.Pod) {\n    start := kl.clock.Now()\n    for _, pod := range pods {\n        kl.podManager.AddPod(pod)\n        kl.dispatchWork(pod, kubetypes.SyncPodCreate, mirrorPod, start)\n        kl.probeManager.AddPod(pod)\n    }\n}\n\nfunc (kl *Kubelet) HandlePodRemoves(pods []*v1.Pod) {\n    start := kl.clock.Now()\n    for _, pod := range pods {\n        kl.podManager.DeletePod(pod)\n        kl.deletePod(pod)\n        kl.probeManager.RemovePod(pod)\n    }\n}\n")),(0,r.kt)("p",null,"\u7b80\u5316\u540e\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"HandlePodAdditions")," \u548c ",(0,r.kt)("inlineCode",{parentName:"p"},"HandlePodRemoves")," \u65b9\u6cd5\u975e\u5e38\u76f4\u767d\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u6765\u770b ",(0,r.kt)("inlineCode",{parentName:"p"},"ProbeManager")," \u5982\u4f55\u5904\u7406\u4e0d\u540c\u8282\u70b9\u7684\u5065\u5eb7\u68c0\u67e5\u3002"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"k8s-15",src:t(5504).Z,width:"1200",height:"415"})),(0,r.kt)("p",null,"\u6bcf\u4e00\u4e2a\u65b0\u7684 Pod \u90fd\u4f1a\u88ab\u8c03\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"ProbeManager")," \u7684",(0,r.kt)("inlineCode",{parentName:"p"},"AddPod")," \u51fd\u6570\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u521d\u59cb\u5316\u4e00\u4e2a\u65b0\u7684 Goroutine \u5e76\u5728\u5176\u4e2d\u8fd0\u884c\u5bf9\u5f53\u524d Pod \u8fdb\u884c\u5065\u5eb7\u68c0\u67e5\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func (m *manager) AddPod(pod *v1.Pod) {\n    key := probeKey{podUID: pod.UID}\n    for _, c := range pod.Spec.Containers {\n        key.containerName = c.Name\n\n        if c.ReadinessProbe != nil {\n            key.probeType = readiness\n            w := newWorker(m, readiness, pod, c)\n            m.workers[key] = w\n            go w.run()\n        }\n\n        if c.LivenessProbe != nil {\n            key.probeType = liveness\n            w := newWorker(m, liveness, pod, c)\n            m.workers[key] = w\n            go w.run()\n        }\n    }\n}\n")),(0,r.kt)("p",null,"\u5728\u6267\u884c\u5065\u5eb7\u68c0\u67e5\u7684\u8fc7\u7a0b\u4e2d\uff0cWorker \u53ea\u662f\u8d1f\u8d23\u6839\u636e\u5f53\u524d Pod \u7684\u72b6\u6001\u5b9a\u671f\u89e6\u53d1\u4e00\u6b21 ",(0,r.kt)("inlineCode",{parentName:"p"},"Probe"),"\uff0c\u5b83\u4f1a\u6839\u636e Pod \u7684\u914d\u7f6e\u5206\u522b\u9009\u62e9\u8c03\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"Exec"),"\u3001",(0,r.kt)("inlineCode",{parentName:"p"},"HTTPGet")," \u6216 ",(0,r.kt)("inlineCode",{parentName:"p"},"TCPSocket")," \u4e09\u79cd\u4e0d\u540c\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"Probe")," \u65b9\u5f0f\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func (pb *prober) runProbe(probeType probeType, p *v1.Probe, pod *v1.Pod, status v1.PodStatus, container v1.Container, containerID kubecontainer.ContainerID) (probe.Result, string, error) {\n    timeout := time.Duration(p.TimeoutSeconds) * time.Second\n    if p.Exec != nil {\n        command := kubecontainer.ExpandContainerCommandOnlyStatic(p.Exec.Command, container.Env)\n        return pb.exec.Probe(pb.newExecInContainer(container, containerID, command, timeout))\n    }\n    if p.HTTPGet != nil {\n        scheme := strings.ToLower(string(p.HTTPGet.Scheme))\n        host := p.HTTPGet.Host\n        port, _ := extractPort(p.HTTPGet.Port, container)\n        path := p.HTTPGet.Path\n        url := formatURL(scheme, host, port, path)\n        headers := buildHeader(p.HTTPGet.HTTPHeaders)\n        if probeType == liveness {\n            return pb.livenessHttp.Probe(url, headers, timeout)\n        } else { // readiness\n            return pb.readinessHttp.Probe(url, headers, timeout)\n        }\n    }\n    if p.TCPSocket != nil {\n        port, _ := extractPort(p.TCPSocket.Port, container)\n        host := p.TCPSocket.Host\n        return pb.tcp.Probe(host, port, timeout)\n    }\n    return probe.Unknown, "", fmt.Errorf("Missing probe handler for %s:%s", format.Pod(pod), container.Name)\n}\n')),(0,r.kt)("p",null,"Kubernetes \u5728 Pod \u542f\u52a8\u540e\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"InitialDelaySeconds")," \u65f6\u95f4\u5185\u4f1a\u7b49\u5f85 Pod \u7684\u542f\u52a8\u548c\u521d\u59cb\u5316\uff0c\u5728\u8fd9\u4e4b\u540e\u4f1a\u5f00\u59cb\u5065\u5eb7\u68c0\u67e5\uff0c\u9ed8\u8ba4\u7684\u5065\u5eb7\u68c0\u67e5\u91cd\u8bd5\u6b21\u6570\u662f\u4e09\u6b21\uff0c\u5982\u679c\u5065\u5eb7\u68c0\u67e5\u6b63\u5e38\u8fd0\u884c\u8fd4\u56de\u4e86\u4e00\u4e2a\u786e\u5b9a\u7684\u7ed3\u679c\uff0c\u90a3\u4e48 Worker \u5c31\u662f\u8bb0\u5f55\u8fd9\u6b21\u7684\u7ed3\u679c\uff0c\u5728\u8fde\u7eed\u5931\u8d25 ",(0,r.kt)("inlineCode",{parentName:"p"},"FailureThreshold")," \u6b21\u6216\u8005\u6210\u529f ",(0,r.kt)("inlineCode",{parentName:"p"},"SuccessThreshold")," \u6b21\uff0c\u90a3\u4e48\u5c31\u4f1a\u6539\u53d8\u5f53\u524d Pod \u7684\u72b6\u6001\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4e86\u907f\u514d\u7531\u4e8e\u670d\u52a1\u4e0d\u7a33\u5b9a\u5e26\u6765\u7684\u6296\u52a8\u3002"),(0,r.kt)("h3",{id:"3\u5220\u9664"},"3\u3001\u5220\u9664"),(0,r.kt)("p",null,"\u5f53 Kubelet \u5728 ",(0,r.kt)("inlineCode",{parentName:"p"},"HandlePodRemoves")," \u65b9\u6cd5\u4e2d\u63a5\u6536\u5230\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u5220\u9664\u8bf7\u6c42\u65f6\uff0c\u5c31\u4f1a\u901a\u8fc7\u4e00\u4e2a\u540d\u4e3a ",(0,r.kt)("inlineCode",{parentName:"p"},"deletePod")," \u7684\u79c1\u6709\u65b9\u6cd5\u4e2d\u7684 Channel \u5c06\u8fd9\u4e00\u4e8b\u4ef6\u4f20\u9012\u7ed9 PodKiller \u8fdb\u884c\u5904\u7406\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func (kl *Kubelet) deletePod(pod *v1.Pod) error {\n    kl.podWorkers.ForgetWorker(pod.UID)\n\n    runningPods, _ := kl.runtimeCache.GetPods()\n    runningPod := kubecontainer.Pods(runningPods).FindPod("", pod.UID)\n    podPair := kubecontainer.PodPair{APIPod: pod, RunningPod: &runningPod}\n\n    kl.podKillingCh <- &podPair\n    return nil\n}\n')),(0,r.kt)("p",null,"Kubelet \u9664\u4e86\u5c06\u4e8b\u4ef6\u901a\u77e5\u7ed9 PodKiller \u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u5c06\u5f53\u524d Pod \u5bf9\u5e94\u7684 Worker \u4ece\u6301\u6709\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"podWorkers")," \u4e2d\u5220\u9664\uff1bPodKiller \u5176\u5b9e\u5c31\u662f Kubelet \u6301\u6709\u7684\u4e00\u4e2a Goroutine\uff0c\u5b83\u4f1a\u5728\u540e\u53f0\u6301\u7eed\u8fd0\u884c\u5e76\u76d1\u542c\u6765\u81ea ",(0,r.kt)("inlineCode",{parentName:"p"},"podKillingCh")," \u7684\u4e8b\u4ef6\uff1a"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"k8s-16",src:t(20621).Z,width:"1200",height:"345"})),(0,r.kt)("p",null,"\u7ecf\u8fc7\u4e00\u7cfb\u5217\u7684\u65b9\u6cd5\u8c03\u7528\u4e4b\u540e\uff0c\u6700\u7ec8\u8c03\u7528\u5bb9\u5668\u8fd0\u884c\u65f6\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"killContainersWithSyncResult")," \u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u540c\u6b65\u5730\u6740\u6389\u5f53\u524d Pod \u4e2d\u5168\u90e8\u7684\u5bb9\u5668\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func (m *kubeGenericRuntimeManager) killContainersWithSyncResult(pod *v1.Pod, runningPod kubecontainer.Pod, gracePeriodOverride *int64) (syncResults []*kubecontainer.SyncResult) {\n    containerResults := make(chan *kubecontainer.SyncResult, len(runningPod.Containers))\n\n    for _, container := range runningPod.Containers {\n        go func(container *kubecontainer.Container) {\n            killContainerResult := kubecontainer.NewSyncResult(kubecontainer.KillContainer, container.Name)\n            m.killContainer(pod, container.ID, container.Name, "Need to kill Pod", gracePeriodOverride)\n            containerResults <- killContainerResult\n        }(container)\n    }\n    close(containerResults)\n\n    for containerResult := range containerResults {\n        syncResults = append(syncResults, containerResult)\n    }\n    return\n}\n')),(0,r.kt)("p",null,"\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5bb9\u5668\u6765\u8bf4\uff0c\u5b83\u4eec\u5728\u88ab\u505c\u6b62\u4e4b\u524d\u90fd\u4f1a\u5148\u8c03\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"PreStop")," \u7684\u94a9\u5b50\u65b9\u6cd5\uff0c\u8ba9\u5bb9\u5668\u4e2d\u7684\u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u6709\u65f6\u95f4\u5b8c\u6210\u4e00\u4e9b\u672a\u5904\u7406\u7684\u64cd\u4f5c\uff0c\u968f\u540e\u8c03\u7528\u8fdc\u7a0b\u7684\u670d\u52a1\u505c\u6b62\u8fd0\u884c\u7684\u5bb9\u5668\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func (m *kubeGenericRuntimeManager) killContainer(pod *v1.Pod, containerID kubecontainer.ContainerID, containerName string, reason string, gracePeriodOverride *int64) error {\n    containerSpec := kubecontainer.GetContainerSpec(pod, containerName);\n\n    gracePeriod := int64(minimumGracePeriodInSeconds)\n    switch {\n    case pod.DeletionGracePeriodSeconds != nil:\n        gracePeriod = *pod.DeletionGracePeriodSeconds\n    case pod.Spec.TerminationGracePeriodSeconds != nil:\n        gracePeriod = *pod.Spec.TerminationGracePeriodSeconds\n    }\n    \n    m.executePreStopHook(pod, containerID, containerSpec, gracePeriod)\n    m.internalLifecycle.PreStopContainer(containerID.ID)\n    m.runtimeService.StopContainer(containerID.ID, gracePeriod)\n    m.containerRefManager.ClearRef(containerID)\n\n    return err\n}\n")),(0,r.kt)("p",null,"\u4ece\u8fd9\u4e2a\u7b80\u5316\u7248\u672c\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"killContainer")," \u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5927\u81f4\u770b\u51fa\u505c\u6b62\u8fd0\u884c\u5bb9\u5668\u7684\u5927\u81f4\u903b\u8f91\uff0c\u5148\u4ece Pod \u7684\u89c4\u683c\u4e2d\u8ba1\u7b97\u51fa\u5f53\u524d\u505c\u6b62\u6240\u9700\u8981\u7684\u65f6\u95f4\uff0c\u7136\u540e\u8fd0\u884c\u94a9\u5b50\u65b9\u6cd5\u548c\u5185\u90e8\u7684\u751f\u547d\u5468\u671f\u65b9\u6cd5\uff0c\u6700\u540e\u5c06\u5bb9\u5668\u505c\u6b62\u5e76\u6e05\u9664\u5f15\u7528\u3002"),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://coreos.com/kubernetes/docs/latest/pods.html"},"Overview of a Pod")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/concepts/workloads/pods/pod/"},"Pods \xb7 Kubernetes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://medium.com/google-cloud/understanding-kubernetes-networking-pods-7117dd28727"},"Understanding kubernetes networking: pods")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://medium.com/google-cloud/understanding-kubernetes-networking-services-f0cb48e4cc82"},"Understanding kubernetes networking: services")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://medium.com/google-cloud/understanding-kubernetes-networking-ingress-1bc341c84078"},"Understanding kubernetes networking: ingress")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://sookocheff.com/post/kubernetes/understanding-kubernetes-networking-model/"},"A Guide to the Kubernetes Networking Model")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.digitalocean.com/community/tutorials/an-introduction-to-networking-terminology-interfaces-and-protocols"},"An Introduction to Networking Terminology, Interfaces, and Protocols")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.digitalocean.com/community/tutorials/understanding-ip-addresses-subnets-and-cidr-notation-for-networking"},"Understanding IP Addresses, Subnets, and CIDR Notation for Networking")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://itnext.io/an-illustrated-guide-to-kubernetes-networking-part-1-d1ede3322727"},"An illustrated guide to Kubernetes Networking Part 1")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/concepts/cluster-administration/networking/"},"Cluster Networking")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/setup/scratch/"},"Creating a Custom Cluster from Scratch"))))}c.isMDXComponent=!0},7093:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/k8s-10-edf0d60bce2e12a0e4b01751804f616c.png"},10251:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/k8s-11-c2edd877aa7654d3e216a2bc853b0e74.png"},23942:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/k8s-12-e00ea9098bcb2533b155bb53c9d642a8.png"},72322:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/k8s-13-f0c77bca873177d577237dea8310d74f.png"},98061:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/k8s-14-8d7c0ee60414fd9813f520674473197d.png"},5504:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/k8s-15-17bd40fdee4933a5bc43bc9e754bc78a.png"},20621:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/k8s-16-1793e5c197a4690af08e2200e38c662c.png"}}]);