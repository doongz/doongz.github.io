"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[72075],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(t),f=o,m=c["".concat(p,".").concat(f)]||c[f]||u[f]||a;return t?r.createElement(m,i(i({ref:n},d),{},{components:t})):r.createElement(m,i({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},47823:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=t(87462),o=(t(67294),t(3905));const a={},i=void 0,l={unversionedId:"Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<dfs+bfs>-\u4e8c\u53c9\u6811\u4e2d\u6240\u6709\u8ddd\u79bbK\u7684\u7ed3\u70b9",id:"Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<dfs+bfs>-\u4e8c\u53c9\u6811\u4e2d\u6240\u6709\u8ddd\u79bbK\u7684\u7ed3\u70b9",title:"<dfs+bfs>-\u4e8c\u53c9\u6811\u4e2d\u6240\u6709\u8ddd\u79bbK\u7684\u7ed3\u70b9",description:"\u9898\u76ee\uff1a863. \u4e8c\u53c9\u6811\u4e2d\u6240\u6709\u8ddd\u79bb\u4e3a K \u7684\u7ed3\u70b9",source:"@site/docs/Algorithm/4-\u56fe\u8bba/\u4f8b\u9898-BFS/863-<dfs+bfs>-\u4e8c\u53c9\u6811\u4e2d\u6240\u6709\u8ddd\u79bbK\u7684\u7ed3\u70b9.md",sourceDirName:"Algorithm/4-\u56fe\u8bba/\u4f8b\u9898-BFS",slug:"/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<dfs+bfs>-\u4e8c\u53c9\u6811\u4e2d\u6240\u6709\u8ddd\u79bbK\u7684\u7ed3\u70b9",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<dfs+bfs>-\u4e8c\u53c9\u6811\u4e2d\u6240\u6709\u8ddd\u79bbK\u7684\u7ed3\u70b9",draft:!1,tags:[],version:"current",sidebarPosition:863,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<\u591a\u6e90bfs+\u72b6\u6001\u538b\u7f29>-\u8bbf\u95ee\u6240\u6709\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u591a\u6e90bfs+\u72b6\u6001\u538b\u7f29>-\u8bbf\u95ee\u6240\u6709\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84"},next:{title:"<\u4e8c\u7ef4\u8f6c\u4e00\u7ef4+TP\u95ee\u9898>-\u86c7\u68af\u68cb",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u4e8c\u7ef4\u8f6c\u4e00\u7ef4+TP\u95ee\u9898>-\u86c7\u68af\u68cb"}},p={},s=[{value:"\u65b9\u6cd5\uff1adfs+bfs",id:"\u65b9\u6cd5dfsbfs",level:2}],d={toc:s};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u9898\u76ee\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/all-nodes-distance-k-in-binary-tree/"},"863. \u4e8c\u53c9\u6811\u4e2d\u6240\u6709\u8ddd\u79bb\u4e3a K \u7684\u7ed3\u70b9")),(0,o.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff08\u5177\u6709\u6839\u7ed3\u70b9 ",(0,o.kt)("inlineCode",{parentName:"p"},"root"),"\uff09\uff0c \u4e00\u4e2a\u76ee\u6807\u7ed3\u70b9 ",(0,o.kt)("inlineCode",{parentName:"p"},"target")," \uff0c\u548c\u4e00\u4e2a\u6574\u6570\u503c ",(0,o.kt)("inlineCode",{parentName:"p"},"k")," \u3002"),(0,o.kt)("p",null,"\u8fd4\u56de\u5230\u76ee\u6807\u7ed3\u70b9 ",(0,o.kt)("inlineCode",{parentName:"p"},"target")," \u8ddd\u79bb\u4e3a ",(0,o.kt)("inlineCode",{parentName:"p"},"k")," \u7684\u6240\u6709\u7ed3\u70b9\u7684\u503c\u7684\u5217\u8868\u3002 \u7b54\u6848\u53ef\u4ee5\u4ee5 ",(0,o.kt)("strong",{parentName:"p"},"\u4efb\u4f55\u987a\u5e8f")," \u8fd4\u56de\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1\uff1a")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/28/sketch0.png",alt:"img"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1aroot = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2\n\u8f93\u51fa\uff1a[7,4,1]\n\u89e3\u91ca\uff1a\u6240\u6c42\u7ed3\u70b9\u4e3a\u4e0e\u76ee\u6807\u7ed3\u70b9\uff08\u503c\u4e3a 5\uff09\u8ddd\u79bb\u4e3a 2 \u7684\u7ed3\u70b9\uff0c\u503c\u5206\u522b\u4e3a 7\uff0c4\uff0c\u4ee5\u53ca 1\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u8f93\u5165: root = [1], target = 1, k = 3\n\u8f93\u51fa: [] \n")),(0,o.kt)("p",null,"\u63d0\u793a:"),(0,o.kt)("p",null,"\u8282\u70b9\u6570\u5728 ","[1, 500]"," \u8303\u56f4\u5185\n0 <= Node.val <= 500\nNode.val \u4e2d\u6240\u6709\u503c \u4e0d\u540c\n\u76ee\u6807\u7ed3\u70b9 target \u662f\u6811\u4e0a\u7684\u7ed3\u70b9\u3002\n0 <= k <= 1000"),(0,o.kt)("h2",{id:"\u65b9\u6cd5dfsbfs"},"\u65b9\u6cd5\uff1adfs+bfs"),(0,o.kt)("p",null,"dfs\u904d\u5386\u4e8c\u53c9\u6811\uff0c\u751f\u6210\u56fe\u7684\u4e34\u63a5\u8868"),(0,o.kt)("p",null,"\u6839\u636e\u4e34\u8fd1\u8868\uff0cbfs\u904d\u5386\uff0c\u4ece target \u5230\u7b2c k \u5c42"),(0,o.kt)("p",null,"\u7b2c k \u5c42\uff0c\u9000\u51fa\u7684\u65f6\u5019\uff0c\u961f\u5217\u91cc\u9762\u5c31\u662f\u7b2c k \u5c42\u7684\u6240\u6709\u8282\u70b9"),(0,o.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,o.kt)("inlineCode",{parentName:"p"},"O(n)"),"\uff0cdfs \u548c bfs \u90fd\u662f",(0,o.kt)("inlineCode",{parentName:"p"},"O(n)")),(0,o.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,o.kt)("inlineCode",{parentName:"p"},"O(n)"),"\uff0cdfs \u548c bfs \u90fd\u662f",(0,o.kt)("inlineCode",{parentName:"p"},"O(n)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c++"},'/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> adj;\n\n    void dfs(TreeNode* node) {\n        if (node->left) {\n            adj[node->val].push_back(node->left->val);\n            adj[node->left->val].push_back(node->val);\n            dfs(node->left);\n        }\n        if (node->right) {\n            adj[node->val].push_back(node->right->val);\n            adj[node->right->val].push_back(node->val);\n            dfs(node->right);\n        }\n    }\n\n    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {\n        adj.resize(501);\n        dfs(root);  // \u751f\u6210\u4e34\u63a5\u8868\n        // for (auto a : adj) {\n        //     for (auto b : a) cout << b << " ";\n        //     cout << endl;\n        // }\n\n        deque<int> que = {target->val};\n        unordered_set<int> visited = {target->val};  // \u4e0d\u8d70\u56de\u5934\u8def\n        int depth = 0;\n        while (!que.empty()) {\n            if (depth == k) break;\n\n            int sz = que.size();\n            for (int i = 0; i < sz; i++) {\n                int cur = que.front();\n                que.pop_front();\n                for (int next : adj[cur]) {\n                    if (visited.count(next) == 1) continue;\n                    que.push_back(next);\n                    visited.insert(next);\n                }\n            }\n            depth++;\n        }\n\n        vector<int> ans;\n        for (int num : que) {\n            ans.push_back(num);\n        }\n        return ans;\n    }\n};\n')))}c.isMDXComponent=!0}}]);