"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[63423],{3905:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>f});var r=t(67294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function u(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var l=r.createContext({}),i=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):u(u({},e),n)),t},c=function(n){var e=i(n.components);return r.createElement(l.Provider,{value:e},n.children)},p="mdxType",m={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},b=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,o=n.originalType,l=n.parentName,c=s(n,["components","mdxType","originalType","parentName"]),p=i(t),b=a,f=p["".concat(l,".").concat(b)]||p[b]||m[b]||o;return t?r.createElement(f,u(u({ref:e},c),{},{components:t})):r.createElement(f,u({ref:e},c))}));function f(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var o=t.length,u=new Array(o);u[0]=b;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s[p]="string"==typeof n?n:a,u[1]=s;for(var i=2;i<o;i++)u[i]=t[i];return r.createElement.apply(null,u)}return r.createElement.apply(null,t)}b.displayName="MDXCreateElement"},85802:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>u,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var r=t(87462),a=(t(67294),t(3905));const o={},u=void 0,s={unversionedId:"Algorithm/\u56fe\u8bba/\u4f8b\u9898-DFS/<\u56de\u6eaf+\u7279\u6b8a\u53bb\u91cd>-\u9012\u589e\u5b50\u5e8f\u5217",id:"Algorithm/\u56fe\u8bba/\u4f8b\u9898-DFS/<\u56de\u6eaf+\u7279\u6b8a\u53bb\u91cd>-\u9012\u589e\u5b50\u5e8f\u5217",title:"<\u56de\u6eaf+\u7279\u6b8a\u53bb\u91cd>-\u9012\u589e\u5b50\u5e8f\u5217",description:"\u9898\u76ee\uff1a491. \u9012\u589e\u5b50\u5e8f\u5217",source:"@site/docs/Algorithm/4-\u56fe\u8bba/\u4f8b\u9898-DFS/491-<\u56de\u6eaf+\u7279\u6b8a\u53bb\u91cd>-\u9012\u589e\u5b50\u5e8f\u5217.md",sourceDirName:"Algorithm/4-\u56fe\u8bba/\u4f8b\u9898-DFS",slug:"/Algorithm/\u56fe\u8bba/\u4f8b\u9898-DFS/<\u56de\u6eaf+\u7279\u6b8a\u53bb\u91cd>-\u9012\u589e\u5b50\u5e8f\u5217",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-DFS/<\u56de\u6eaf+\u7279\u6b8a\u53bb\u91cd>-\u9012\u589e\u5b50\u5e8f\u5217",draft:!1,tags:[],version:"current",sidebarPosition:491,frontMatter:{},sidebar:"algorithmSidebar",previous:{title:"<dfs\u904d\u5386\u65f6\u7edf\u8ba1>-\u5c9b\u5c7f\u7684\u5468\u957f",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-DFS/<dfs\u904d\u5386\u65f6\u7edf\u8ba1>-\u5c9b\u5c7f\u7684\u5468\u957f"},next:{title:"<\u5b50\u95ee\u9898\u62c6\u5206+\u526a\u679d>-\u53ea\u6709\u4e24\u4e2a\u952e\u7684\u952e\u76d8",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-DFS/<\u5b50\u95ee\u9898\u62c6\u5206+\u526a\u679d>-\u53ea\u6709\u4e24\u4e2a\u952e\u7684\u952e\u76d8"}},l={},i=[],c={toc:i};function p(n){let{components:e,...t}=n;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"\u9898\u76ee\uff1a",(0,a.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/increasing-subsequences/"},"491. \u9012\u589e\u5b50\u5e8f\u5217")),(0,a.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," \uff0c\u627e\u51fa\u5e76\u8fd4\u56de\u6240\u6709\u8be5\u6570\u7ec4\u4e2d\u4e0d\u540c\u7684\u9012\u589e\u5b50\u5e8f\u5217\uff0c\u9012\u589e\u5b50\u5e8f\u5217\u4e2d ",(0,a.kt)("strong",{parentName:"p"},"\u81f3\u5c11\u6709\u4e24\u4e2a\u5143\u7d20")," \u3002\u4f60\u53ef\u4ee5\u6309 ",(0,a.kt)("strong",{parentName:"p"},"\u4efb\u610f\u987a\u5e8f")," \u8fd4\u56de\u7b54\u6848\u3002"),(0,a.kt)("p",null,"\u6570\u7ec4\u4e2d\u53ef\u80fd\u542b\u6709\u91cd\u590d\u5143\u7d20\uff0c\u5982\u51fa\u73b0\u4e24\u4e2a\u6574\u6570\u76f8\u7b49\uff0c\u4e5f\u53ef\u4ee5\u89c6\u4f5c\u9012\u589e\u5e8f\u5217\u7684\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u793a\u4f8b 1\uff1a\n\n\u8f93\u5165\uff1anums = [4,6,7,7]\n\u8f93\u51fa\uff1a[[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]\n\n\u793a\u4f8b 2\uff1a\n\n\u8f93\u5165\uff1anums = [4,4,3,2,1]\n\u8f93\u51fa\uff1a[[4,4]]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u63d0\u793a\uff1a")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 15")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-100 <= nums[i] <= 100"))),(0,a.kt)("hr",null),(0,a.kt)("p",null,"\u5148\u7528\u6700\u57fa\u7840\u7684\u56de\u6eaf\u65b9\u6cd5\u5199\u51fa\uff08\u6ce8\u610f\u662f\u9519\u8bef\u7684\uff09"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int n;\n    vector<int> nums;\n    vector<vector<int>> ans;\n\n    void dfs(int idx, vector<int>& sub) {\n        if (idx == n) {\n            if (sub.size() >= 2) ans.push_back(sub);\n            return;\n        }\n\n        // \u9009\n        if (sub.size() == 0 || nums[idx] >= sub.back()) {\n            sub.push_back(nums[idx]);\n            dfs(idx + 1, sub);\n            sub.pop_back();\n        }\n        // \u4e0d\u9009\n        dfs(idx + 1, sub);\n        return;\n    }\n\n    vector<vector<int>> findSubsequences(vector<int>& _nums) {\n        nums = _nums;\n        n = nums.size();\n        vector<int> sub;\n\n        dfs(0, sub);\n        return ans;\n    }\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1a[4,6,7,7]\n\u8f93\u51fa\uff1a[[4,6,7,7],[4,6,7],[4,6,7],[4,6],[4,7,7],[4,7],[4,7],[6,7,7],[6,7],[6,7],[7,7]]\n\u9884\u671f\u7ed3\u679c\uff1a[[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]\n")),(0,a.kt)("p",null,"\u53d1\u73b0\u6709\u91cd\u590d\u7684\u503c"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u5982\u4f55\u53bb\u91cd"),"\uff1f"),(0,a.kt)("p",null,"\u6211\u4eec\u53ef\u4ee5",(0,a.kt)("strong",{parentName:"p"},"\u5bf9\u9009\u62e9\u548c\u4e0d\u9009\u62e9\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u9650\u5b9a"),"\uff0c\u5c31\u53ef\u4ee5\u8ba9\u679a\u4e3e\u51fa\u6765\u7684\u90fd\u662f\u5408\u6cd5\u7684\u5e76\u4e14\u4e0d\u91cd\u590d\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u4f7f\u5e8f\u5217\u5408\u6cd5\u7684\u529e\u6cd5\u975e\u5e38\u7b80\u5355\uff0c\u5373\u7ed9\u300c\u9009\u62e9\u300d\u505a\u4e00\u4e2a\u9650\u5b9a\u6761\u4ef6\uff0c",(0,a.kt)("strong",{parentName:"li"},"\u53ea\u6709\u5f53\u524d\u7684\u5143\u7d20\u5927\u4e8e\u7b49\u4e8e\u4e0a\u4e00\u4e2a\u9009\u62e9\u7684\u5143\u7d20\u7684\u65f6\u5019\u624d\u80fd\u9009\u62e9\u8fd9\u4e2a\u5143\u7d20"),"\uff0c\u8fd9\u6837\u679a\u4e3e\u51fa\u6765\u7684\u6240\u6709\u5143\u7d20\u90fd\u662f\u5408\u6cd5\u7684"),(0,a.kt)("li",{parentName:"ul"},"\u90a3\u5982\u4f55\u4fdd\u8bc1\u6ca1\u6709\u91cd\u590d\u5462\uff1f\u6211\u4eec\u9700\u8981\u7ed9\u300c\u4e0d\u9009\u62e9\u300d\u505a\u4e00\u4e2a\u9650\u5b9a\u6761\u4ef6\uff0c",(0,a.kt)("strong",{parentName:"li"},"\u53ea\u6709\u5f53\u5f53\u524d\u7684\u5143\u7d20\u4e0d\u7b49\u4e8e\u4e0a\u4e00\u4e2a\u9009\u62e9\u7684\u5143\u7d20\u7684\u65f6\u5019\uff0c\u624d\u8003\u8651\u4e0d\u9009\u62e9\u5f53\u524d\u5143\u7d20"),"\uff0c\u76f4\u63a5\u9012\u5f52\u540e\u9762\u7684\u5143\u7d20\u3002\u56e0\u4e3a\u5982\u679c\u6709\u4e24\u4e2a\u76f8\u540c\u7684\u5143\u7d20\uff0c\u6211\u4eec\u4f1a\u8003\u8651\u8fd9\u6837\u56db\u79cd\u60c5\u51b5\uff1a",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"\u524d\u8005\u88ab\u9009\u62e9\uff0c\u540e\u8005\u88ab\u9009\u62e9 \u2705"),(0,a.kt)("li",{parentName:"ol"},"\u524d\u8005\u88ab\u9009\u62e9\uff0c\u540e\u8005\u4e0d\u88ab\u9009\u62e9 \u274c"),(0,a.kt)("li",{parentName:"ol"},"\u524d\u8005\u4e0d\u88ab\u9009\u62e9\uff0c\u540e\u8005\u88ab\u9009\u62e9 \u2705"),(0,a.kt)("li",{parentName:"ol"},"\u524d\u8005\u4e0d\u88ab\u9009\u62e9\uff0c\u540e\u8005\u4e0d\u88ab\u9009\u62e9 \u2705")))),(0,a.kt)("p",null,"\u5176\u4e2d\u7b2c\u4e8c\u79cd\u60c5\u51b5\u548c\u7b2c\u4e09\u79cd\u60c5\u51b5\u5176\u5b9e\u662f\u7b49\u4ef7\u7684\uff0c\u6211\u4eec\u8fd9\u6837\u9650\u5236\u4e4b\u540e\uff0c\u820d\u5f03\u4e86\u7b2c\u4e8c\u79cd\uff0c\u4fdd\u7559\u4e86\u7b2c\u4e09\u79cd\uff0c\u4e8e\u662f\u8fbe\u5230\u4e86\u53bb\u91cd\u7684\u76ee\u7684\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u53ea\u6709\u5f53\u5f53\u524d\u7684\u5143\u7d20\u4e0d\u7b49\u4e8e\u4e0a\u4e00\u4e2a\u9009\u62e9\u7684\u5143\u7d20\u7684\u65f6\u5019\uff0c\u624d\u8003\u8651\u4e0d\u9009\u62e9\u5f53\u524d\u5143\u7d20..\u8fd9\u53e5\u8bdd\u7406\u89e3\u9519\u4e86\u8bef\u5bfc\u4e86\u6211\u534a\u4e2a\u5c0f\u65f6 \u5176\u5b9e\u8fd9\u53e5\u8bdd\u610f\u601d\u662f\u5047\u5982nums","[cur]","==last\u65f6\uff0c\u8fd9\u65f6\u5019\u5fc5\u987b\u9009\u62e9\u8be5\u5143\u7d20\uff0c4\uff0c6\uff0c7\uff0c7\u6bd4\u5982\u5f53\u6211\u4eec\u9009\u62e9\u4e86\u7b2c\u4e00\u4e2a7\u4e4b\u540e\uff0c\u5f53\u6211\u4eec\u9047\u5230\u7b2c\u4e8c\u4e2a7\u65f6\uff0c\u8fd9\u65f6\u5019\u8fd9\u4e2a7\u5fc5\u987b\u88ab\u9009\u62e9\uff0c\u51fa\u73b0\u7ed3\u679c\u6709\u4e24\u4e2a7\u7684vector\uff0c")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> nums; \n    vector<vector<int>> ans;\n\n    void dfs(int cur, int last, vector<int>& sub) {\n        if (cur == nums.size()) {\n            if (sub.size() >= 2) {\n                ans.push_back(sub);\n            }\n            return;\n        }\n        if (nums[cur] >= last) {\n            sub.push_back(nums[cur]);\n            dfs(cur + 1, nums[cur], sub);\n            sub.pop_back();\n        }\n        if (nums[cur] != last) {\n            dfs(cur + 1, last, sub);\n        }\n    }\n\n    vector<vector<int>> findSubsequences(vector<int>& _nums) {\n        nums = _nums;\n        vector<int> sub;\n        dfs(0, INT_MIN, sub);\n        return ans;\n    }\n};\n\n")))}p.isMDXComponent=!0}}]);