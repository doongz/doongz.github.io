"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[85271],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>f});var r=t(67294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function u(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},l=Object.keys(n);for(r=0;r<l.length;r++)t=l[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(r=0;r<l.length;r++)t=l[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var o=r.createContext({}),m=function(n){var e=r.useContext(o),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},p=function(n){var e=m(n.components);return r.createElement(o.Provider,{value:e},n.children)},s="mdxType",c={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,l=n.originalType,o=n.parentName,p=u(n,["components","mdxType","originalType","parentName"]),s=m(t),d=i,f=s["".concat(o,".").concat(d)]||s[d]||c[d]||l;return t?r.createElement(f,a(a({ref:e},p),{},{components:t})):r.createElement(f,a({ref:e},p))}));function f(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var l=t.length,a=new Array(l);a[0]=d;var u={};for(var o in e)hasOwnProperty.call(e,o)&&(u[o]=e[o]);u.originalType=n,u[s]="string"==typeof n?n:i,a[1]=u;for(var m=2;m<l;m++)a[m]=t[m];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},71:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>a,default:()=>s,frontMatter:()=>l,metadata:()=>u,toc:()=>m});var r=t(87462),i=(t(67294),t(3905));const l={},a=void 0,u={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6811\u72b6\u6570\u7ec4/<\u57fa\u7840\u6a21\u7248\u9898>-\u533a\u57df\u548c\u68c0\u7d22-\u6570\u7ec4\u53ef\u4fee\u6539",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6811\u72b6\u6570\u7ec4/<\u57fa\u7840\u6a21\u7248\u9898>-\u533a\u57df\u548c\u68c0\u7d22-\u6570\u7ec4\u53ef\u4fee\u6539",title:"<\u57fa\u7840\u6a21\u7248\u9898>-\u533a\u57df\u548c\u68c0\u7d22-\u6570\u7ec4\u53ef\u4fee\u6539",description:"307. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6811\u72b6\u6570\u7ec4/307-<\u57fa\u7840\u6a21\u7248\u9898>-\u533a\u57df\u548c\u68c0\u7d22-\u6570\u7ec4\u53ef\u4fee\u6539.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6811\u72b6\u6570\u7ec4",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6811\u72b6\u6570\u7ec4/<\u57fa\u7840\u6a21\u7248\u9898>-\u533a\u57df\u548c\u68c0\u7d22-\u6570\u7ec4\u53ef\u4fee\u6539",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6811\u72b6\u6570\u7ec4/<\u57fa\u7840\u6a21\u7248\u9898>-\u533a\u57df\u548c\u68c0\u7d22-\u6570\u7ec4\u53ef\u4fee\u6539",draft:!1,tags:[],version:"current",sidebarPosition:307,frontMatter:{},sidebar:"algorithmSidebar",previous:{title:"\u9762\u8bd5\u9898-03-05-<\u53cc\u6808>-\u6808\u6392\u5e8f",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6808/\u9762\u8bd5\u9898-03-05-<\u53cc\u6808>-\u6808\u6392\u5e8f"},next:{title:"<\u79bb\u6563\u5316+\u6811\u72b6\u6570\u7ec4>-\u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6811\u72b6\u6570\u7ec4/<\u79bb\u6563\u5316+\u6811\u72b6\u6570\u7ec4>-\u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570"}},o={},m=[],p={toc:m};function s(n){let{components:e,...t}=n;return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/range-sum-query-mutable/"},"307. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539")),(0,i.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 nums \uff0c\u8bf7\u4f60\u5b8c\u6210\u4e24\u7c7b\u67e5\u8be2\u3002"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5176\u4e2d\u4e00\u7c7b\u67e5\u8be2\u8981\u6c42 \u66f4\u65b0 \u6570\u7ec4 nums \u4e0b\u6807\u5bf9\u5e94\u7684\u503c"),(0,i.kt)("li",{parentName:"ul"},"\u53e6\u4e00\u7c7b\u67e5\u8be2\u8981\u6c42\u8fd4\u56de\u6570\u7ec4 nums \u4e2d\u7d22\u5f15 left \u548c\u7d22\u5f15 right \u4e4b\u95f4\uff08 \u5305\u542b \uff09\u7684nums\u5143\u7d20\u7684 \u548c \uff0c\u5176\u4e2d left <= right")),(0,i.kt)("p",null,"\u5b9e\u73b0 NumArray \u7c7b\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"NumArray(int[] nums) \u7528\u6574\u6570\u6570\u7ec4 nums \u521d\u59cb\u5316\u5bf9\u8c61"),(0,i.kt)("li",{parentName:"ul"},"void update(int index, int val) \u5c06 nums","[index]"," \u7684\u503c \u66f4\u65b0 \u4e3a val"),(0,i.kt)("li",{parentName:"ul"},"int sumRange(int left, int right) \u8fd4\u56de\u6570\u7ec4 nums \u4e2d\u7d22\u5f15 left \u548c\u7d22\u5f15 right \u4e4b\u95f4\uff08 \u5305\u542b \uff09\u7684nums\u5143\u7d20\u7684 \u548c \uff08\u5373\uff0cnums","[left]"," + nums","[left + 1]",", ..., nums","[right]","\uff09")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1\uff1a")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'\u8f93\u5165\uff1a\n["NumArray", "sumRange", "update", "sumRange"]\n[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]\n\u8f93\u51fa\uff1a\n[null, 9, null, 8]\n\n\u89e3\u91ca\uff1a\nNumArray numArray = new NumArray([1, 3, 5]);\nnumArray.sumRange(0, 2); // \u8fd4\u56de 1 + 3 + 5 = 9\nnumArray.update(1, 2);   // nums = [1,2,5]\nnumArray.sumRange(0, 2); // \u8fd4\u56de 1 + 2 + 5 = 8\n')),(0,i.kt)("p",null,"\u63d0\u793a\uff1a"),(0,i.kt)("p",null,"1 <= nums.length <= 3 ",(0,i.kt)("em",{parentName:"p"}," 104\n-100 <= nums","[i]"," <= 100\n0 <= index < nums.length\n-100 <= val <= 100\n0 <= left <= right < nums.length\n\u8c03\u7528 update \u548c sumRange \u65b9\u6cd5\u6b21\u6570\u4e0d\u5927\u4e8e 3 ")," 104 "),(0,i.kt)("hr",null),(0,i.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aupdate\u51fd\u6570 ",(0,i.kt)("inlineCode",{parentName:"p"},"O(logn)"),"\uff0csumRange\u51fd\u6570 ",(0,i.kt)("inlineCode",{parentName:"p"},"O(logn)")),(0,i.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},"O(n)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class NumArray {\npublic:\n    int size;\n    vector<int> nums;\n    vector<int> tree;\n\n    NumArray(vector<int>& nums) {\n        size = nums.size();\n        this->nums = nums;\n        tree.resize(size + 1, 0);\n        for (int i = 0; i < size; i++) {\n            add(i + 1, nums[i]);\n        }\n    }\n\n    int lowbit(int idx) {\n        // idx \u4e3a\u6811\u72b6\u6570\u7ec4\u4e0b\u6807\n        return idx & (-idx);\n    }\n\n    void add(int idx, int delta) {\n        // idx \u4e3a\u6811\u72b6\u6570\u7ec4\n        while (idx < size + 1) {\n            tree[idx] += delta;\n            idx += lowbit(idx);\n        }\n    }\n\n    void update(int index, int val) {\n        // index \u4e3a\u539f\u59cb\u6570\u7ec4\u4e0b\u6807\n        int delta = val - nums[index];\n        add(index + 1, delta);\n        nums[index] = val;\n    }\n\n    int query(int idx) {\n        // idx \u4e3a\u6811\u72b6\u6570\u7ec4\n        int sum = 0;\n        while (idx > 0) {\n            sum += tree[idx];\n            idx -= lowbit(idx);\n        }\n        return sum;\n    }\n\n    int sumRange(int left, int right) {\n        // left, right \u4e3a\u539f\u59cb\u6570\u7ec4\u4e0b\u6807\n        int preleft = query(left);\n        int preright = query(right + 1);\n        return preright - preleft;\n    }\n};\n")))}s.isMDXComponent=!0}}]);