"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[31789],{3905:(n,e,r)=>{r.d(e,{Zo:()=>u,kt:()=>m});var t=r(67294);function i(n,e,r){return e in n?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n}function o(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,t)}return r}function l(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){i(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function a(n,e){if(null==n)return{};var r,t,i=function(n,e){if(null==n)return{};var r,t,i={},o=Object.keys(n);for(t=0;t<o.length;t++)r=o[t],e.indexOf(r)>=0||(i[r]=n[r]);return i}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(t=0;t<o.length;t++)r=o[t],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(i[r]=n[r])}return i}var c=t.createContext({}),p=function(n){var e=t.useContext(c),r=e;return n&&(r="function"==typeof n?n(e):l(l({},e),n)),r},u=function(n){var e=p(n.components);return t.createElement(c.Provider,{value:e},n.children)},s="mdxType",d={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},f=t.forwardRef((function(n,e){var r=n.components,i=n.mdxType,o=n.originalType,c=n.parentName,u=a(n,["components","mdxType","originalType","parentName"]),s=p(r),f=i,m=s["".concat(c,".").concat(f)]||s[f]||d[f]||o;return r?t.createElement(m,l(l({ref:e},u),{},{components:r})):t.createElement(m,l({ref:e},u))}));function m(n,e){var r=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var o=r.length,l=new Array(o);l[0]=f;var a={};for(var c in e)hasOwnProperty.call(e,c)&&(a[c]=e[c]);a.originalType=n,a[s]="string"==typeof n?n:i,l[1]=a;for(var p=2;p<o;p++)l[p]=r[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},23214:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>s,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var t=r(87462),i=(r(67294),r(3905));const o={},l=void 0,a={unversionedId:"Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u5e38\u89c4bfs>-\u8150\u70c2\u7684\u6a58\u5b50",id:"Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u5e38\u89c4bfs>-\u8150\u70c2\u7684\u6a58\u5b50",title:"<\u5e38\u89c4bfs>-\u8150\u70c2\u7684\u6a58\u5b50",description:"\u9898\u76ee\uff1a994. \u8150\u70c2\u7684\u6a58\u5b50",source:"@site/docs/Algorithm/4-\u56fe\u8bba/\u4f8b\u9898-BFS/994-<\u5e38\u89c4bfs>-\u8150\u70c2\u7684\u6a58\u5b50.md",sourceDirName:"Algorithm/4-\u56fe\u8bba/\u4f8b\u9898-BFS",slug:"/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u5e38\u89c4bfs>-\u8150\u70c2\u7684\u6a58\u5b50",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u5e38\u89c4bfs>-\u8150\u70c2\u7684\u6a58\u5b50",draft:!1,tags:[],version:"current",sidebarPosition:994,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<\u4e8c\u7ef4\u8f6c\u4e00\u7ef4+TP\u95ee\u9898>-\u86c7\u68af\u68cb",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u4e8c\u7ef4\u8f6c\u4e00\u7ef4+TP\u95ee\u9898>-\u86c7\u68af\u68cb"},next:{title:"<bfs\u6a21\u7248\u9898>-\u8fb9\u754c\u7740\u8272",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<bfs\u6a21\u7248\u9898>-\u8fb9\u754c\u7740\u8272"}},c={},p=[{value:"\u9898\u76ee\uff1a994. \u8150\u70c2\u7684\u6a58\u5b50",id:"\u9898\u76ee994-\u8150\u70c2\u7684\u6a58\u5b50",level:4}],u={toc:p};function s(n){let{components:e,...r}=n;return(0,i.kt)("wrapper",(0,t.Z)({},u,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"\u9898\u76ee994-\u8150\u70c2\u7684\u6a58\u5b50"},"\u9898\u76ee\uff1a",(0,i.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/rotting-oranges/"},"994. \u8150\u70c2\u7684\u6a58\u5b50")),(0,i.kt)("p",null,"\u5728\u7ed9\u5b9a\u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"m x n")," \u7f51\u683c ",(0,i.kt)("inlineCode",{parentName:"p"},"grid")," \u4e2d\uff0c\u6bcf\u4e2a\u5355\u5143\u683c\u53ef\u4ee5\u6709\u4ee5\u4e0b\u4e09\u4e2a\u503c\u4e4b\u4e00\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u503c ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," \u4ee3\u8868\u7a7a\u5355\u5143\u683c\uff1b"),(0,i.kt)("li",{parentName:"ul"},"\u503c ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," \u4ee3\u8868\u65b0\u9c9c\u6a58\u5b50\uff1b"),(0,i.kt)("li",{parentName:"ul"},"\u503c ",(0,i.kt)("inlineCode",{parentName:"li"},"2")," \u4ee3\u8868\u8150\u70c2\u7684\u6a58\u5b50\u3002")),(0,i.kt)("p",null,"\u6bcf\u5206\u949f\uff0c\u8150\u70c2\u7684\u6a58\u5b50 ",(0,i.kt)("strong",{parentName:"p"},"\u5468\u56f4 4 \u4e2a\u65b9\u5411\u4e0a\u76f8\u90bb")," \u7684\u65b0\u9c9c\u6a58\u5b50\u90fd\u4f1a\u8150\u70c2\u3002"),(0,i.kt)("p",null,"\u8fd4\u56de ",(0,i.kt)("em",{parentName:"p"},"\u76f4\u5230\u5355\u5143\u683c\u4e2d\u6ca1\u6709\u65b0\u9c9c\u6a58\u5b50\u4e3a\u6b62\u6240\u5fc5\u987b\u7ecf\u8fc7\u7684\u6700\u5c0f\u5206\u949f\u6570\u3002\u5982\u679c\u4e0d\u53ef\u80fd\uff0c\u8fd4\u56de ",(0,i.kt)("inlineCode",{parentName:"em"},"-1"))," \u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1\uff1a")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("img",{parentName:"strong",src:"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/oranges.png",alt:"img"}))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1agrid = [[2,1,1],[1,1,0],[0,1,1]]\n\u8f93\u51fa\uff1a4\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u793a\u4f8b 2\uff1a\n\n\u8f93\u5165\uff1agrid = [[2,1,1],[0,1,1],[1,0,1]]\n\u8f93\u51fa\uff1a-1\n\u89e3\u91ca\uff1a\u5de6\u4e0b\u89d2\u7684\u6a58\u5b50\uff08\u7b2c 2 \u884c\uff0c \u7b2c 0 \u5217\uff09\u6c38\u8fdc\u4e0d\u4f1a\u8150\u70c2\uff0c\u56e0\u4e3a\u8150\u70c2\u53ea\u4f1a\u53d1\u751f\u5728 4 \u4e2a\u6b63\u5411\u4e0a\u3002\n\n\u793a\u4f8b 3\uff1a\n\n\u8f93\u5165\uff1agrid = [[0,2]]\n\u8f93\u51fa\uff1a0\n\u89e3\u91ca\uff1a\u56e0\u4e3a 0 \u5206\u949f\u65f6\u5df2\u7ecf\u6ca1\u6709\u65b0\u9c9c\u6a58\u5b50\u4e86\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f 0 \u3002\n\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u63d0\u793a\uff1a")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"m == grid.length")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"n == grid[i].length")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= m, n <= 10")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"grid[i][j]")," \u4ec5\u4e3a ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),"\u3001",(0,i.kt)("inlineCode",{parentName:"li"},"1")," \u6216 ",(0,i.kt)("inlineCode",{parentName:"li"},"2"))),(0,i.kt)("hr",null),(0,i.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},"O(n^2)")),(0,i.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},"O(n^2)")),(0,i.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a32 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8694.40%\u7684\u7528\u6237"),(0,i.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a15.1 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8621.37%\u7684\u7528\u6237"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def orangesRotting(self, grid: List[List[int]]) -> int:\n        \n        rows = len(grid)\n        cols = len(grid[0])\n        cnt = 0 # \u6709\u79cd\u7279\u6b8a\u60c5\u51b5\u662f\u5168\u662f\u7a7a\u683c\uff0c\u9700\u8981\u8fd4\u56de 0\n\n        queue = []\n        for r in range(rows):\n            for c in range(cols):\n                if grid[r][c] == 2:\n                    queue.append((r, c))\n                if grid[r][c] == 0:\n                    cnt += 1\n        if cnt == rows * cols: return 0\n        depth = 0\n        visited = set(queue)\n\n        # \u5f00\u59cb\u4f20\u67d3\n        while queue:\n            q_sz = len(queue)\n            for _ in range(q_sz):\n                row, col = queue.pop(0)\n                for dr, dc in ((0,1), (1,0), (-1,0),(0,-1)):\n                    nr = row + dr\n                    nc = col + dc\n                    if 0<=nr<rows and 0<=nc<cols and grid[nr][nc] == 1 and (nr, nc) not in visited:\n                        grid[nr][nc] = 2\n                        queue.append((nr, nc))\n                        visited.add((nr, nc))\n            depth += 1\n\n        # \u5982\u679c\u91cc\u9762\u8fd8\u6709\u597d\u6a58\u5b50\n        for r in range(rows):\n            for c in range(cols):\n                if grid[r][c] == 1:\n                    return -1\n                    \n        return depth - 1 # \u7b2c\u4e00\u6b21\u4e0d\u7b97\u6570\uff0c\u6240\u4ee5\u6700\u540e\u51cf\u4e00\n")),(0,i.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a4 ms, \u5728\u6240\u6709 Go \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8678.75%\u7684\u7528\u6237"),(0,i.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a3.3 MB, \u5728\u6240\u6709 Go \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.13%\u7684\u7528\u6237"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"func orangesRotting(grid [][]int) int {\n\n    direction := [4][2]int{[2]int{1, 0}, [2]int{0, 1}, [2]int{-1, 0}, [2]int{0, -1}}\n    rows := len(grid)\n    cols := len(grid[0])\n    cnt := 0 // \u6709\u79cd\u7279\u6b8a\u60c5\u51b5\u662f\u5168\u662f\u7a7a\u683c\uff0c\u9700\u8981\u8fd4\u56de 0\n\n    queue := [][2]int{}\n    for r := 0; r < rows; r++ {\n        for c := 0; c < cols; c++ {\n            if grid[r][c] == 2 {\n                queue = append(queue, [2]int{r, c})\n            }\n            if grid[r][c] == 0 {\n                cnt++\n            }\n        }\n    }\n    if cnt == rows*cols {\n        return 0\n    }\n    depth := 0\n    visited := map[[2]int]int{}\n    for _, v := range queue {\n        visited[v] = 0\n    }\n    // fmt.Println(queue)\n    // fmt.Println(visited)\n\n    // \u5f00\u59cb\u4f20\u67d3\n    for len(queue) > 0 {\n        q_sz := len(queue)\n        for i := 0; i < q_sz; i++ {\n            node := queue[0]\n            queue = queue[1:]\n            row := node[0]\n            col := node[1]\n            for _, d := range direction {\n                nr := row + d[0]\n                nc := col + d[1]\n                if nr >= 0 && nr < rows && nc >= 0 && nc < cols {\n                    if grid[nr][nc] == 1 {\n                        if _, ok := visited[[2]int{nr, nc}]; !ok {\n                            grid[nr][nc] = 2\n                            queue = append(queue, [2]int{nr, nc})\n                            visited[[2]int{nr, nc}] = 0\n                        }\n                    }\n                }\n            }\n        }\n        depth++\n    }\n\n    // \u5982\u679c\u91cc\u9762\u8fd8\u6709\u597d\u6a58\u5b50\n    for r := 0; r < rows; r++ {\n        for c := 0; c < cols; c++ {\n            if grid[r][c] == 1 {\n                return -1\n            }\n        }\n    }\n\n    // \u7b2c\u4e00\u6b21\u4e0d\u7b97\u6570\uff0c\u6240\u4ee5\u6700\u540e\u51cf\u4e00\n    return depth - 1\n\n}\n")),(0,i.kt)("p",null,"c++"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    vector<pair<int, int>> directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n    int orangesRotting(vector<vector<int>>& grid) {\n        int rows = grid.size();\n        int cols = grid[0].size();\n        int cnt = 0;  // \u521d\u59cb\u65f6\uff0c\u65b0\u9c9c\u6a58\u5b50\u7684\u6570\u91cf\n\n        deque<pair<int, int>> que;\n        for (int r = 0; r < rows; r++) {\n            for (int c = 0; c < cols; c++) {\n                if (grid[r][c] == 2) que.push_back({r, c});\n                if (grid[r][c] == 1) cnt++;\n            }\n        }\n\n        if (cnt == 0) return 0;\n\n        int step = 0;\n        while (!que.empty()) {\n            int sz = que.size();\n            for (int i = 0; i < sz; i++) {\n                auto [r, c] = que.front();\n                que.pop_front();\n                for (auto& [dr, dc] : directions) {\n                    int nr = r + dr;\n                    int nc = c + dc;\n                    if (nr < 0 || nr >= rows || nc < 0 || nc >= cols) continue;\n                    if (grid[nr][nc] != 1) continue;\n                    que.push_back({nr, nc});\n                    grid[nr][nc] = 2;\n                }\n            }\n            step++;\n        }\n\n        for (int r = 0; r < rows; r++) {\n            for (int c = 0; c < cols; c++) {\n                if (grid[r][c] == 1) return -1;\n            }\n        }\n\n        return step - 1;\n    }\n};\n")))}s.isMDXComponent=!0}}]);