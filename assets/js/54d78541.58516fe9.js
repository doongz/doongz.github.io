"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[44204],{3905:(n,e,t)=>{t.d(e,{Zo:()=>u,kt:()=>f});var r=t(67294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var l=r.createContext({}),p=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},u=function(n){var e=p(n.components);return r.createElement(l.Provider,{value:e},n.children)},c="mdxType",d={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,o=n.originalType,l=n.parentName,u=s(n,["components","mdxType","originalType","parentName"]),c=p(t),m=i,f=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return t?r.createElement(f,a(a({ref:e},u),{},{components:t})):r.createElement(f,a({ref:e},u))}));function f(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var o=t.length,a=new Array(o);a[0]=m;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s[c]="string"==typeof n?n:i,a[1]=s;for(var p=2;p<o;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},17750:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=t(87462),i=(t(67294),t(3905));const o={},a=void 0,s={unversionedId:"Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u53cc\u5411bfs>-\u6ed1\u52a8\u8c1c\u9898",id:"Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u53cc\u5411bfs>-\u6ed1\u52a8\u8c1c\u9898",title:"<\u53cc\u5411bfs>-\u6ed1\u52a8\u8c1c\u9898",description:"\u9898\u76ee\uff1a773. \u6ed1\u52a8\u8c1c\u9898",source:"@site/docs/Algorithm/4-\u56fe\u8bba/\u4f8b\u9898-BFS/773-<\u53cc\u5411bfs>-\u6ed1\u52a8\u8c1c\u9898.md",sourceDirName:"Algorithm/4-\u56fe\u8bba/\u4f8b\u9898-BFS",slug:"/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u53cc\u5411bfs>-\u6ed1\u52a8\u8c1c\u9898",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u53cc\u5411bfs>-\u6ed1\u52a8\u8c1c\u9898",draft:!1,tags:[],version:"current",sidebarPosition:773,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<\u53cc\u5411bfs>-\u6253\u5f00\u8f6c\u76d8\u9501",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u53cc\u5411bfs>-\u6253\u5f00\u8f6c\u76d8\u9501"},next:{title:"<\u70b9\u8f6c\u5316\u4e3a\u8fb9>-\u516c\u4ea4\u8def\u7ebf",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u70b9\u8f6c\u5316\u4e3a\u8fb9>-\u516c\u4ea4\u8def\u7ebf"}},l={},p=[{value:"\u5355\u5411bfs",id:"\u5355\u5411bfs",level:2},{value:"\u53cc\u5411bfs",id:"\u53cc\u5411bfs",level:2}],u={toc:p};function c(n){let{components:e,...t}=n;return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"\u9898\u76ee\uff1a",(0,i.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/sliding-puzzle/"},"773. \u6ed1\u52a8\u8c1c\u9898")),(0,i.kt)("p",null,"\u5728\u4e00\u4e2a ",(0,i.kt)("inlineCode",{parentName:"p"},"2 x 3")," \u7684\u677f\u4e0a\uff08",(0,i.kt)("inlineCode",{parentName:"p"},"board"),"\uff09\u6709 5 \u5757\u7816\u74e6\uff0c\u7528\u6570\u5b57 ",(0,i.kt)("inlineCode",{parentName:"p"},"1~5")," \u6765\u8868\u793a, \u4ee5\u53ca\u4e00\u5757\u7a7a\u7f3a\u7528 ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," \u6765\u8868\u793a\u3002\u4e00\u6b21 ",(0,i.kt)("strong",{parentName:"p"},"\u79fb\u52a8")," \u5b9a\u4e49\u4e3a\u9009\u62e9 ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," \u4e0e\u4e00\u4e2a\u76f8\u90bb\u7684\u6570\u5b57\uff08\u4e0a\u4e0b\u5de6\u53f3\uff09\u8fdb\u884c\u4ea4\u6362."),(0,i.kt)("p",null,"\u6700\u7ec8\u5f53\u677f ",(0,i.kt)("inlineCode",{parentName:"p"},"board")," \u7684\u7ed3\u679c\u662f ",(0,i.kt)("inlineCode",{parentName:"p"},"[[1,2,3],[4,5,0]]")," \u8c1c\u677f\u88ab\u89e3\u5f00\u3002"),(0,i.kt)("p",null,"\u7ed9\u51fa\u4e00\u4e2a\u8c1c\u677f\u7684\u521d\u59cb\u72b6\u6001 ",(0,i.kt)("inlineCode",{parentName:"p"},"board")," \uff0c\u8fd4\u56de\u6700\u5c11\u53ef\u4ee5\u901a\u8fc7\u591a\u5c11\u6b21\u79fb\u52a8\u89e3\u5f00\u8c1c\u677f\uff0c\u5982\u679c\u4e0d\u80fd\u89e3\u5f00\u8c1c\u677f\uff0c\u5219\u8fd4\u56de ",(0,i.kt)("inlineCode",{parentName:"p"},"-1")," \u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1\uff1a")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/06/29/slide1-grid.jpg",alt:"img"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1aboard = [[1,2,3],[4,0,5]]\n\u8f93\u51fa\uff1a1\n\u89e3\u91ca\uff1a\u4ea4\u6362 0 \u548c 5 \uff0c1 \u6b65\u5b8c\u6210\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u793a\u4f8b 2:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/06/29/slide2-grid.jpg",alt:"img"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1aboard = [[1,2,3],[5,4,0]]\n\u8f93\u51fa\uff1a-1\n\u89e3\u91ca\uff1a\u6ca1\u6709\u529e\u6cd5\u5b8c\u6210\u8c1c\u677f\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u793a\u4f8b 3:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/06/29/slide3-grid.jpg",alt:"img"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1aboard = [[4,1,2],[5,0,3]]\n\u8f93\u51fa\uff1a5\n\u89e3\u91ca\uff1a\n\u6700\u5c11\u5b8c\u6210\u8c1c\u677f\u7684\u6700\u5c11\u79fb\u52a8\u6b21\u6570\u662f 5 \uff0c\n\u4e00\u79cd\u79fb\u52a8\u8def\u5f84:\n\u5c1a\u672a\u79fb\u52a8: [[4,1,2],[5,0,3]]\n\u79fb\u52a8 1 \u6b21: [[4,1,2],[0,5,3]]\n\u79fb\u52a8 2 \u6b21: [[0,1,2],[4,5,3]]\n\u79fb\u52a8 3 \u6b21: [[1,0,2],[4,5,3]]\n\u79fb\u52a8 4 \u6b21: [[1,2,0],[4,5,3]]\n\u79fb\u52a8 5 \u6b21: [[1,2,3],[4,5,0]]\n")),(0,i.kt)("p",null,"\u63d0\u793a\uff1a"),(0,i.kt)("p",null,"board.length == 2\nboard","[i]",".length == 3\n",(0,i.kt)("inlineCode",{parentName:"p"},"0 <= board[i][j] <= 5"),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"board[i][j] \u4e2d\u6bcf\u4e2a\u503c\u90fd \u4e0d\u540c")),(0,i.kt)("h2",{id:"\u5355\u5411bfs"},"\u5355\u5411bfs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    unordered_map<int, vector<int>> directions = {\n        {0, {1, 3}},\n        {1, {0, 2, 4}},\n        {2, {1, 5}},\n        {3, {0, 4}},\n        {4, {1, 3, 5}},\n        {5, {2, 4}},\n    };\n\n    int slidingPuzzle(vector<vector<int>>& board) {\n        string start = \"\";\n        for (auto b : board) {\n            for (int a : b) start += a + 48;\n        }\n        string end = \"123450\";\n\n        deque<string> que = {start};\n        unordered_set<string> vis = {start};\n        int step = 0;\n\n        while (!que.empty()) {\n            int sz = que.size();\n            for (int i = 0; i < sz; i++) {\n                string cur = que.front();\n                que.pop_front();\n                if (cur == end) return step;\n\n                for (int j = 0; j < 6; j++) {\n                    if (cur[j] != '0') continue;\n                    for (int swap_idx : directions[j]) {\n                        string next = cur;\n                        next[j] = next[swap_idx];\n                        next[swap_idx] = '0';\n\n                        if (vis.count(next)) continue;\n                        que.push_back(next);\n                        vis.insert(next);\n                    }\n                    break;\n                }\n            }\n            step++;\n        }\n\n        return -1;\n    }\n};\n")),(0,i.kt)("h2",{id:"\u53cc\u5411bfs"},"\u53cc\u5411bfs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    unordered_map<int, vector<int>> directions = {\n        {0, {1, 3}},\n        {1, {0, 2, 4}},\n        {2, {1, 5}},\n        {3, {0, 4}},\n        {4, {1, 3, 5}},\n        {5, {2, 4}},\n    };\n\n    int slidingPuzzle(vector<vector<int>>& board) {\n        string start = \"\";\n        for (auto b : board) {\n            for (int a : b) start += a + 48;\n        }\n        string end = \"123450\";\n\n        deque<string> que_l = {start};\n        deque<string> que_r = {end};\n        unordered_set<string> vis_l = {start};\n        unordered_set<string> vis_r = {end};\n        int step = 0;\n\n        while (!que_l.empty() && !que_r.empty()) {\n            if (que_l.size() > que_r.size()) {\n                swap(que_l, que_r);\n                swap(vis_l, vis_r);\n            }\n            int sz = que_l.size();\n            for (int i = 0; i < sz; i++) {\n                string cur = que_l.front();\n                que_l.pop_front();\n                if (vis_r.count(cur)) return step;\n\n                for (int j = 0; j < 6; j++) {\n                    if (cur[j] != '0') continue;\n                    for (int swap_idx : directions[j]) {\n                        string next = cur;\n                        next[j] = next[swap_idx];\n                        next[swap_idx] = '0';\n\n                        if (vis_l.count(next)) continue;\n                        que_l.push_back(next);\n                        vis_l.insert(next);\n                    }\n                    break;\n                }\n            }\n            step++;\n        }\n\n        return -1;\n    }\n};\n")))}c.isMDXComponent=!0}}]);