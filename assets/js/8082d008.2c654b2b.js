"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[78608],{3905:(n,r,t)=>{t.d(r,{Zo:()=>d,kt:()=>m});var e=t(67294);function o(n,r,t){return r in n?Object.defineProperty(n,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[r]=t,n}function i(n,r){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(n);r&&(e=e.filter((function(r){return Object.getOwnPropertyDescriptor(n,r).enumerable}))),t.push.apply(t,e)}return t}function s(n){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(n,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(n,r,Object.getOwnPropertyDescriptor(t,r))}))}return n}function a(n,r){if(null==n)return{};var t,e,o=function(n,r){if(null==n)return{};var t,e,o={},i=Object.keys(n);for(e=0;e<i.length;e++)t=i[e],r.indexOf(t)>=0||(o[t]=n[t]);return o}(n,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(e=0;e<i.length;e++)t=i[e],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var c=e.createContext({}),l=function(n){var r=e.useContext(c),t=r;return n&&(t="function"==typeof n?n(r):s(s({},r),n)),t},d=function(n){var r=l(n.components);return e.createElement(c.Provider,{value:r},n.children)},p="mdxType",u={inlineCode:"code",wrapper:function(n){var r=n.children;return e.createElement(e.Fragment,{},r)}},f=e.forwardRef((function(n,r){var t=n.components,o=n.mdxType,i=n.originalType,c=n.parentName,d=a(n,["components","mdxType","originalType","parentName"]),p=l(t),f=o,m=p["".concat(c,".").concat(f)]||p[f]||u[f]||i;return t?e.createElement(m,s(s({ref:r},d),{},{components:t})):e.createElement(m,s({ref:r},d))}));function m(n,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof n||o){var i=t.length,s=new Array(i);s[0]=f;var a={};for(var c in r)hasOwnProperty.call(r,c)&&(a[c]=r[c]);a.originalType=n,a[p]="string"==typeof n?n:o,s[1]=a;for(var l=2;l<i;l++)s[l]=t[l];return e.createElement.apply(null,s)}return e.createElement.apply(null,t)}f.displayName="MDXCreateElement"},747:(n,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var e=t(87462),o=(t(67294),t(3905));const i={},s=void 0,a={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5b57\u5178\u6811/<\u5b57\u5178\u6811\u4f18\u5316dfs>-\u5355\u8bcd\u641c\u7d22II",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5b57\u5178\u6811/<\u5b57\u5178\u6811\u4f18\u5316dfs>-\u5355\u8bcd\u641c\u7d22II",title:"<\u5b57\u5178\u6811\u4f18\u5316dfs>-\u5355\u8bcd\u641c\u7d22II",description:"212. \u5355\u8bcd\u641c\u7d22 II",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5b57\u5178\u6811/212-<\u5b57\u5178\u6811\u4f18\u5316dfs>-\u5355\u8bcd\u641c\u7d22II.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5b57\u5178\u6811",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5b57\u5178\u6811/<\u5b57\u5178\u6811\u4f18\u5316dfs>-\u5355\u8bcd\u641c\u7d22II",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5b57\u5178\u6811/<\u5b57\u5178\u6811\u4f18\u5316dfs>-\u5355\u8bcd\u641c\u7d22II",draft:!1,tags:[],version:"current",sidebarPosition:212,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<\u542b\u6709\u901a\u914d\u7b26\u7684\u5bfb\u627e>-\u6dfb\u52a0\u4e0e\u641c\u7d22\u5355\u8bcd",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5b57\u5178\u6811/<\u542b\u6709\u901a\u914d\u7b26\u7684\u5bfb\u627e>-\u6dfb\u52a0\u4e0e\u641c\u7d22\u5355\u8bcd"},next:{title:"<\u8fd4\u56de\u6700\u5148\u9047\u5230\u7684\u524d\u7f00>-\u5355\u8bcd\u66ff\u6362",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5b57\u5178\u6811/<\u8fd4\u56de\u6700\u5148\u9047\u5230\u7684\u524d\u7f00>-\u5355\u8bcd\u66ff\u6362"}},c={},l=[{value:"\u65b9\u6cd5\u4e00\uff1a\u56de\u6eaf",id:"\u65b9\u6cd5\u4e00\u56de\u6eaf",level:2},{value:"\u65b9\u6cd5\u4e8c\uff1a\u5b57\u5178\u6811+\u56de\u6eaf",id:"\u65b9\u6cd5\u4e8c\u5b57\u5178\u6811\u56de\u6eaf",level:2}],d={toc:l};function p(n){let{components:r,...t}=n;return(0,o.kt)("wrapper",(0,e.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/word-search-ii/"},"212. \u5355\u8bcd\u641c\u7d22 II")),(0,o.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a m x n \u4e8c\u7ef4\u5b57\u7b26\u7f51\u683c board \u548c\u4e00\u4e2a\u5355\u8bcd\uff08\u5b57\u7b26\u4e32\uff09\u5217\u8868 words\uff0c \u8fd4\u56de\u6240\u6709\u4e8c\u7ef4\u7f51\u683c\u4e0a\u7684\u5355\u8bcd \u3002"),(0,o.kt)("p",null,"\u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7 \u76f8\u90bb\u7684\u5355\u5143\u683c \u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d\u201c\u76f8\u90bb\u201d\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u5728\u4e00\u4e2a\u5355\u8bcd\u4e2d\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1\uff1a")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/11/07/search1.jpg",alt:"img"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'\u8f93\u5165\uff1aboard = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"]\n\u8f93\u51fa\uff1a["eat","oath"]\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 2\uff1a")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/11/07/search2.jpg",alt:"img"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'\u8f93\u5165\uff1aboard = [["a","b"],["c","d"]], words = ["abcb"]\n\u8f93\u51fa\uff1a[]\n')),(0,o.kt)("p",null,"\u63d0\u793a\uff1a"),(0,o.kt)("p",null,"m == board.length\nn == board","[i]",".length\n1 <= m, n <= 12\nboard","[i][j]"," \u662f\u4e00\u4e2a\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\n1 <= words.length <= 3 * 104\n1 <= words","[i]",".length <= 10\nwords","[i]"," \u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\nwords \u4e2d\u7684\u6240\u6709\u5b57\u7b26\u4e32\u4e92\u4e0d\u76f8\u540c"),(0,o.kt)("h2",{id:"\u65b9\u6cd5\u4e00\u56de\u6eaf"},"\u65b9\u6cd5\u4e00\uff1a\u56de\u6eaf"),(0,o.kt)("p",null,"\u6570\u636e\u8303\u56f4\u53ea\u6709 12\uff0c\u4e14 words \u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 10\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u300c\u56de\u6eaf\u7b97\u6cd5\u300d\u3002"),(0,o.kt)("p",null,"\u8d77\u59cb\u5148\u5c06\u6240\u6709 words \u51fa\u73b0\u7684\u5355\u8bcd\u653e\u5230 Set \u7ed3\u6784\u4e2d\uff0c\u7136\u540e\u4ee5 board \u4e2d\u7684\u6bcf\u4e2a\u70b9\u4f5c\u4e3a\u8d77\u70b9\u8fdb\u884c\u7206\u641c\uff08\u7531\u4e8e\u9898\u76ee\u89c4\u5b9a\u5728\u4e00\u4e2a\u5355\u8bcd\u4e2d\u6bcf\u4e2a\u683c\u5b50\u53ea\u80fd\u88ab\u4f7f\u7528\u4e00\u6b21\uff0c\u56e0\u6b64\u8fd8\u9700\u8981\u4e00\u4e2a vis \u6570\u7ec4\u6765\u8bb0\u5f55\u8bbf\u95ee\u8fc7\u7684\u4f4d\u7f6e\uff09\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u5982\u679c\u5f53\u524d\u7206\u641c\u5230\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u8d85\u8fc7 10\uff0c\u76f4\u63a5\u526a\u679d\uff1b")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u5982\u679c\u5f53\u524d\u641c\u7d22\u5230\u7684\u5b57\u7b26\u4e32\u5728 Set \u4e2d\uff0c\u5219\u6dfb\u52a0\u5230\u7b54\u6848\uff08\u540c\u65f6\u4e86\u9632\u6b62\u4e0b\u4e00\u6b21\u518d\u641c\u7d22\u5230\u8be5\u5b57\u7b26\u4e32\uff0c\u9700\u8981\u5c06\u8be5\u5b57\u7b26\u4e32\u4ece Set \u4e2d\u79fb\u9664\uff09"))),(0,o.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,o.kt)("inlineCode",{parentName:"p"},"O(m*n*4^10)"),"\uff0c\u5171\u6709 m * n \u4e2a\u8d77\u70b9\uff0c\u6bcf\u6b21\u80fd\u5f80 4 \u4e2a\u65b9\u5411\u641c\u7d22\uff08\u4e0d\u8003\u8651\u91cd\u590d\u641c\u7d22\u95ee\u9898\uff09\uff0c\u4e14\u641c\u7d22\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 10"),(0,o.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,o.kt)("inlineCode",{parentName:"p"},"O(words[i].length)")),(0,o.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a872 ms, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8635.37%\u7684\u7528\u6237"),(0,o.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a9.8 MB, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8694.37%\u7684\u7528\u6237"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c++"},'class Solution {\nprivate:\n    unordered_set<string> us;\n    vector<vector<char>> board;\n    vector<pair<int, int>> direction;\n    int rows;\n    int cols;\n    bool visited[12][12];\n    vector<string> ans;\n\npublic:\n    vector<string> findWords(vector<vector<char>>& _board, vector<string>& words) {\n        board = _board;\n        direction = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};\n        rows = board.size();\n        cols = board[0].size();\n        for (string word : words) {\n            us.insert(word);\n        }\n        string path;\n        for (int r = 0; r < rows; r++) {\n            for (int c = 0; c < cols; c++) {\n                visited[r][c] = true;\n                path += board[r][c];\n                dfs(r, c, path);\n                path = "";\n                visited[r][c] = false;\n            }\n        }\n        return ans;\n    }\n\n    void dfs(int row, int col, string& path) {\n        if (path.length() > 10) return;\n        if (us.count(path) == 1) {\n            ans.push_back(path);\n            us.erase(path);\n        }\n        for (pair<int, int> dir : direction) {\n            int nr = row + dir.first;\n            int nc = col + dir.second;\n            if (0 <= nr && nr < rows && 0 <= nc && nc < cols) {\n                if (!visited[nr][nc]) {\n                    visited[nr][nc] = true;\n                    path += board[nr][nc];\n                    dfs(nr, nc, path);\n                    path.erase(path.size() - 1);\n                    visited[nr][nc] = false;\n                }\n            }\n        }\n    }\n};\n')),(0,o.kt)("h2",{id:"\u65b9\u6cd5\u4e8c\u5b57\u5178\u6811\u56de\u6eaf"},"\u65b9\u6cd5\u4e8c\uff1a\u5b57\u5178\u6811+\u56de\u6eaf"),(0,o.kt)("p",null,"\u5728\u300c\u89e3\u6cd5\u4e00\u300d\u4e2d\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u5f53\u524d\u4f4d\u7f6e (i, j)\uff0c\u6211\u4eec\u90fd\u4e0d\u53ef\u907f\u514d\u7684\u641c\u7d22\u4e86\u56db\u8054\u901a\u7684\u5168\u90e8\u65b9\u5411\uff0c\u8fd9\u5bfc\u81f4\u4e86\u90a3\u4e9b\u65e0\u6548\u641c\u7d22\u8def\u5f84\u6700\u7ec8\u53ea\u6709\u957f\u5ea6\u8fbe\u5230 10 \u624d\u4f1a\u88ab\u526a\u679d\u3002"),(0,o.kt)("p",null,"\u8981\u8fdb\u4e00\u6b65\u4f18\u5316\u6211\u4eec\u7684\u641c\u7d22\u8fc7\u7a0b\uff0c\u9700\u8981\u8003\u8651\u5982\u4f55\u5728\u6bcf\u4e00\u6b65\u7684\u641c\u7d22\u4e2d\u8fdb\u884c\u526a\u679d\u3002"),(0,o.kt)("p",null,"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 TrieTrie \u7ed3\u6784\u8fdb\u884c\u5efa\u6811\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u5f53\u524d\u4f4d\u7f6e (i, j) \u800c\u8a00\uff0c\u53ea\u6709\u5728 Trie \u4e2d\u5b58\u5728\u5f80\u4ece\u5b57\u7b26 a \u5230 b \u7684\u8fb9\u65f6\uff0c\u6211\u4eec\u624d\u5728\u68cb\u76d8\u4e0a\u641c\u7d22\u4ece a \u5230 b \u7684\u76f8\u90bb\u8def\u5f84\u3002"),(0,o.kt)("p",null,"\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5e73\u65f6\u5efa TrieNode \u4e2d\u7684 isEnd \u6807\u8bb0\u5c5e\u6027\u76f4\u63a5\u6362\u6210\u8bb0\u5f55\u5f53\u524d\u5b57\u7b26 s\uff0c\u8fd9\u6837\u6211\u4eec\u5728 DFS \u7684\u8fc7\u7a0b\u4e2d\u5219\u65e0\u987b\u989d\u5916\u8bb0\u5f55\u5f53\u524d\u641c\u7d22\u5b57\u7b26\u4e32\u3002"),(0,o.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a436 ms, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8659.24%\u7684\u7528\u6237"),(0,o.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a12.2 MB, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8640.29%\u7684\u7528\u6237"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c++"},"class Trie {\npublic:\n    Trie* son[26];  // \u5b58\u653e\u5f53\u524d\u5b57\u7b26\u4e4b\u540e\u7684\u5b57\u7b26\n    bool isWord;\n    string str;\n    Trie() {\n        for (int i = 0; i < 26; i++) son[i] = nullptr;\n        isWord = false;\n        str = \"\";\n    }\n    void insert(string word) {\n        Trie* root = this;     // \u4ece\u5934\u8282\u70b9\u5f00\u59cb\u67e5\n        for (char c : word) {  // \u7c7b\u4f3c\u94fe\u8868\u7684\u904d\u5386\n            int cur = c - 'a';\n            if (root->son[cur] == nullptr) root->son[cur] = new Trie();\n            root = root->son[cur];\n        }\n        root->isWord = true;  // \u5728\u5355\u8bcd\u7684\u7ed3\u5c3e\u8282\u70b9\u6807\u8bb0\u4e00\u4e0b \u662f\u5355\u8bcd\n        root->str = word;     // \u7ed3\u5c3e\u76f4\u63a5\u8bb0\u5f55\u5355\u8bcd\n    }\n};\n\nclass Solution {\npublic:\n    vector<vector<char>> board;\n    Trie trie;\n    int rows;\n    int cols;\n    vector<pair<int, int>> direction;\n    bool visited[12][12];\n    unordered_set<string> ans_set;\n    vector<string> ans;\n\n    vector<string> findWords(vector<vector<char>>& _board, vector<string>& words) {\n        board = _board;\n        rows = board.size();\n        cols = board[0].size();\n        direction = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};\n        for (string word : words) {\n            trie.insert(word);\n        }\n\n        for (int r = 0; r < rows; ++r) {\n            for (int c = 0; c < cols; ++c) {\n                int cur = board[r][c] - 'a';\n                if (trie.son[cur]) {\n                    visited[r][c] = true;\n                    dfs(r, c, trie.son[cur]);\n                    visited[r][c] = false;\n                }\n            }\n        }\n        for (string s : ans_set) ans.push_back(s);\n        return ans;\n    }\n    void dfs(int row, int col, Trie* node) {\n        if (node->str != \"\") {\n            ans_set.insert(node->str);\n        }\n        for (pair<int, int> dir : direction) {\n            int nr = row + dir.first;\n            int nc = col + dir.second;\n            if (0 <= nr && nr < rows && 0 <= nc && nc < cols) {\n                if (!visited[nr][nc]) {\n                    int nidx = board[nr][nc] - 'a';\n                    if (node->son[nidx] != nullptr) {\n                        visited[nr][nc] = true;\n                        dfs(nr, nc, node->son[nidx]);\n                        visited[nr][nc] = false;\n                    }\n                }\n            }\n        }\n    }\n};\n")),(0,o.kt)("p",null,"function \u5199\u6cd5\uff0c\u53ef\u89c1 dfs \u5199\u5916\u9762\u4f1a\u5feb\u4e00\u4e9b"),(0,o.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a596 ms, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8649.25%\u7684\u7528\u6237"),(0,o.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a12.1 MB, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8654.88%\u7684\u7528\u6237"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c++"},"class Trie {\npublic:\n    Trie* son[26];  // \u5b58\u653e\u5f53\u524d\u5b57\u7b26\u4e4b\u540e\u7684\u5b57\u7b26\n    bool isWord;\n    string str;\n    Trie() {\n        for (int i = 0; i < 26; i++) son[i] = nullptr;\n        isWord = false;\n        str = \"\";\n    }\n    void insert(string word) {\n        Trie* root = this;     // \u4ece\u5934\u8282\u70b9\u5f00\u59cb\u67e5\n        for (char c : word) {  // \u7c7b\u4f3c\u94fe\u8868\u7684\u904d\u5386\n            int cur = c - 'a';\n            if (root->son[cur] == nullptr) root->son[cur] = new Trie();\n            root = root->son[cur];\n        }\n        root->isWord = true;  // \u5728\u5355\u8bcd\u7684\u7ed3\u5c3e\u8282\u70b9\u6807\u8bb0\u4e00\u4e0b \u662f\u5355\u8bcd\n        root->str = word;     // \u7ed3\u5c3e\u76f4\u63a5\u8bb0\u5f55\u5355\u8bcd\n    }\n};\n\nclass Solution {\npublic:\n    bool visited[12][12];\n\n    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\n        Trie trie;\n        vector<string> ans;\n        unordered_set<string> ans_set;\n        int rows = board.size();\n        int cols = board[0].size();\n        vector<pair<int, int>> direction = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};\n        for (string word : words) {\n            trie.insert(word);\n        }\n\n        function<void(int, int, Trie*)> dfs = [&](int row, int col, Trie* node) {\n            if (node->str != \"\") {\n                ans_set.insert(node->str);\n            }\n            for (pair<int, int> dir : direction) {\n                int nr = row + dir.first;\n                int nc = col + dir.second;\n                if (0 <= nr && nr < rows && 0 <= nc && nc < cols) {\n                    if (!visited[nr][nc]) {\n                        int nidx = board[nr][nc] - 'a';\n                        if (node->son[nidx] != nullptr) {\n                            visited[nr][nc] = true;\n                            dfs(nr, nc, node->son[nidx]);\n                            visited[nr][nc] = false;\n                        }\n                    }\n                }\n            }\n        };\n\n        for (int r = 0; r < rows; ++r) {\n            for (int c = 0; c < cols; ++c) {\n                int cur = board[r][c] - 'a';\n                if (trie.son[cur]) {\n                    visited[r][c] = true;\n                    dfs(r, c, trie.son[cur]);\n                    visited[r][c] = false;\n                }\n            }\n        }\n        for (string s : ans_set) ans.push_back(s);\n        return ans;\n    }\n};\n")))}p.isMDXComponent=!0}}]);