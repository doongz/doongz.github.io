"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[31982],{3905:(n,e,t)=>{t.d(e,{Zo:()=>s,kt:()=>f});var r=t(67294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function l(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function p(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var a=r.createContext({}),u=function(n){var e=r.useContext(a),t=e;return n&&(t="function"==typeof n?n(e):l(l({},e),n)),t},s=function(n){var e=u(n.components);return r.createElement(a.Provider,{value:e},n.children)},c="mdxType",m={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,o=n.originalType,a=n.parentName,s=p(n,["components","mdxType","originalType","parentName"]),c=u(t),d=i,f=c["".concat(a,".").concat(d)]||c[d]||m[d]||o;return t?r.createElement(f,l(l({ref:e},s),{},{components:t})):r.createElement(f,l({ref:e},s))}));function f(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var o=t.length,l=new Array(o);l[0]=d;var p={};for(var a in e)hasOwnProperty.call(e,a)&&(p[a]=e[a]);p.originalType=n,p[c]="string"==typeof n?n:i,l[1]=p;for(var u=2;u<o;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},42429:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>u});var r=t(87462),i=(t(67294),t(3905));const o={},l=void 0,p={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6811\u72b6\u6570\u7ec4/\u7edf\u8ba1\u6570\u7ec4\u4e2d\u597d\u4e09\u5143\u7ec4\u6570\u76ee",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6811\u72b6\u6570\u7ec4/\u7edf\u8ba1\u6570\u7ec4\u4e2d\u597d\u4e09\u5143\u7ec4\u6570\u76ee",title:"\u7edf\u8ba1\u6570\u7ec4\u4e2d\u597d\u4e09\u5143\u7ec4\u6570\u76ee",description:"2179. \u7edf\u8ba1\u6570\u7ec4\u4e2d\u597d\u4e09\u5143\u7ec4\u6570\u76ee",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6811\u72b6\u6570\u7ec4/2179-\u7edf\u8ba1\u6570\u7ec4\u4e2d\u597d\u4e09\u5143\u7ec4\u6570\u76ee.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6811\u72b6\u6570\u7ec4",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6811\u72b6\u6570\u7ec4/\u7edf\u8ba1\u6570\u7ec4\u4e2d\u597d\u4e09\u5143\u7ec4\u6570\u76ee",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6811\u72b6\u6570\u7ec4/\u7edf\u8ba1\u6570\u7ec4\u4e2d\u597d\u4e09\u5143\u7ec4\u6570\u76ee",draft:!1,tags:[],version:"current",sidebarPosition:2179,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<\u79bb\u6563\u5316+\u6811\u72b6\u6570\u7ec4>-\u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6811\u72b6\u6570\u7ec4/<\u79bb\u6563\u5316+\u6811\u72b6\u6570\u7ec4>-\u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570"},next:{title:"\u4e24\u6570\u76f8\u52a0",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/\u4e24\u6570\u76f8\u52a0"}},a={},u=[{value:"\u65b9\u6cd5\uff1a\u6811\u72b6\u6570\u7ec4",id:"\u65b9\u6cd5\u6811\u72b6\u6570\u7ec4",level:2}],s={toc:u};function c(n){let{components:e,...t}=n;return(0,i.kt)("wrapper",(0,r.Z)({},s,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/count-good-triplets-in-an-array/"},"2179. \u7edf\u8ba1\u6570\u7ec4\u4e2d\u597d\u4e09\u5143\u7ec4\u6570\u76ee")),(0,i.kt)("p",null,"\u7ed9\u4f60\u4e24\u4e2a\u4e0b\u6807\u4ece ",(0,i.kt)("strong",{parentName:"p"},"0")," \u5f00\u59cb\u4e14\u957f\u5ea6\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," \u7684\u6574\u6570\u6570\u7ec4 ",(0,i.kt)("inlineCode",{parentName:"p"},"nums1")," \u548c ",(0,i.kt)("inlineCode",{parentName:"p"},"nums2")," \uff0c\u4e24\u8005\u90fd\u662f ",(0,i.kt)("inlineCode",{parentName:"p"},"[0, 1, ..., n - 1]")," \u7684 ",(0,i.kt)("strong",{parentName:"p"},"\u6392\u5217")," \u3002"),(0,i.kt)("p",null,"\u597d\u4e09\u5143\u7ec4 \u6307\u7684\u662f 3 \u4e2a \u4e92\u4e0d\u76f8\u540c \u7684\u503c\uff0c\u4e14\u5b83\u4eec\u5728\u6570\u7ec4 nums1 \u548c nums2 \u4e2d\u51fa\u73b0\u987a\u5e8f\u4fdd\u6301\u4e00\u81f4\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u5c06 pos1v \u8bb0\u4e3a\u503c v \u5728 nums1 \u4e2d\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0cpos2v \u4e3a\u503c v \u5728 nums2 \u4e2d\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u4e00\u4e2a\u597d\u4e09\u5143\u7ec4\u5b9a\u4e49\u4e3a 0 <= x, y, z <= n - 1 \uff0c\u4e14 pos1x < pos1y < pos1z \u548c pos2x < pos2y < pos2z \u90fd\u6210\u7acb\u7684 (x, y, z) \u3002"),(0,i.kt)("p",null,"\u8bf7\u4f60\u8fd4\u56de\u597d\u4e09\u5143\u7ec4\u7684 \u603b\u6570\u76ee \u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u793a\u4f8b 1\uff1a\n\n\u8f93\u5165\uff1anums1 = [2,0,1,3], nums2 = [0,1,2,3]\n\u8f93\u51fa\uff1a1\n\u89e3\u91ca\uff1a\n\u603b\u5171\u6709 4 \u4e2a\u4e09\u5143\u7ec4 (x,y,z) \u6ee1\u8db3 pos1x < pos1y < pos1z\xa0\uff0c\u5206\u522b\u662f (2,0,1) \uff0c(2,0,3) \uff0c(2,1,3) \u548c (0,1,3) \u3002\n\u8fd9\u4e9b\u4e09\u5143\u7ec4\u4e2d\uff0c\u53ea\u6709 (0,1,3) \u6ee1\u8db3 pos2x < pos2y < pos2z\xa0\u3002\u6240\u4ee5\u53ea\u6709 1 \u4e2a\u597d\u4e09\u5143\u7ec4\u3002\n\n\u793a\u4f8b 2\uff1a\n\n\u8f93\u5165\uff1anums1 = [4,0,1,3,2], nums2 = [4,1,0,2,3]\n\u8f93\u51fa\uff1a4\n\u89e3\u91ca\uff1a\u603b\u5171\u6709 4 \u4e2a\u597d\u4e09\u5143\u7ec4 (4,0,3) \uff0c(4,0,2) \uff0c(4,1,3) \u548c (4,1,2) \u3002\n")),(0,i.kt)("p",null,"\u63d0\u793a\uff1a"),(0,i.kt)("p",null,"n == nums1.length == nums2.length\n3 <= n <= 105\n0 <= nums1","[i]",", nums2","[i]"," <= n - 1\nnums1 \u548c nums2 \u662f ","[0, 1, ..., n - 1]"," \u7684\u6392\u5217\u3002"),(0,i.kt)("h2",{id:"\u65b9\u6cd5\u6811\u72b6\u6570\u7ec4"},"\u65b9\u6cd5\uff1a\u6811\u72b6\u6570\u7ec4"),(0,i.kt)("p",null,"\u9996\u5148\u7528\u54c8\u5e0c\u8868\u8bb0\u5f55\u6bcf\u4e2a\u6570\u5728\u6570\u7ec4\u4e8c\u4e2d\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u6309\u7167\u6570\u7ec4\u4e00\u7684\u987a\u5e8f\u4f9d\u6b21\u5904\u7406\u3002"),(0,i.kt)("p",null,"\u6211\u4eec\u8003\u8651\u4ee5",(0,i.kt)("strong",{parentName:"p"},"\u300c\u5f53\u524d\u6570\u5b57\u4f5c\u4e3a\u4e09\u5143\u7ec4\u4e2d\u95f4\u6570\u5b57\u300d"),"\u7684\u597d\u4e09\u5143\u7ec4\u7684\u6570\u76ee\u3002"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u7b2c\u4e00\u4e2a\u6570\u5b57\u9700\u8981\u662f\u5728\u6570\u7ec4\u4e8c\u4e2d\u7684\u4f4d\u7f6e\u6bd4\u5f53\u524d\u6570\u5b57\u66f4\u300c\u9760\u524d\u300d\u7684\uff1b"),(0,i.kt)("li",{parentName:"ul"},"\u7b2c\u4e09\u4e2a\u6570\u5b57\u9700\u8981\u662f\u5728\u6570\u7ec4\u4e8c\u4e2d\u7684\u4f4d\u7f6e\u6bd4\u5f53\u524d\u6570\u5b57\u66f4\u300c\u9760\u540e\u300d\u7684\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u8fd9\u91cc\u53ea\u5bf9\u6570\u5b57\u7684\u300c\u4f4d\u7f6e\u6709\u8981\u6c42\u300d\uff0c\u800c\u5bf9\u6570\u5b57\u5177\u4f53\u7684\u300c\u503c\u6ca1\u6709\u8981\u6c42\u300d")),(0,i.kt)("p",null,"\u5982\u4f55\u5feb\u901f\u6c42\u51fa\u6ee1\u8db3\u6761\u4ef6\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u548c\u7b2c\u4e09\u4e2a\u6570\u5b57\u7684\u4e2a\u6570\u5462\uff1f"),(0,i.kt)("p",null,"\u4ee5 nums1 = ","[4,0,1,3,2]","\uff0cnums2 = ","[4,1,0,2,3]"," \u4e3a\u4f8b"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"i \u4e3a num1 \u4e0b\u6807\uff0c\u4ece0\u5f00\u59cb"),(0,i.kt)("li",{parentName:"ul"},"idx \u4e3a nums2 \u4e0b\u6807\uff0c\u4ece1\u5f00\u59cb\uff08\u6811\u72b6\u6570\u7ec4\u5c31\u662f\u4ece1\u5f00\u59cb\u8ba1\uff0c0\u7a7a\u7740\uff09"),(0,i.kt)("li",{parentName:"ul"},"\u524d\u7f00\u548c pre","[idx]"," \u52a0 1\uff0c\u8868\u793a arr","[idx]"," \u5df2\u7ecf\u904d\u5386\u8fc7\uff0c\u5e76\u4e14\u5f53\u524d\u6570\u5b57\u5728 nums2 \u4e2d\u7684\u53f3\u8fb9\u90a3\u4e9b\u6570 [idx+1, ...) \u7684\u524d\u9762\u6709\u4e2a 1 \u503c\u6ee1\u8db3\u4e86"),(0,i.kt)("li",{parentName:"ul"},"\u6b64\u65f6\u4e2d\u95f4\u6570\u5b57\u7684\u300c\u5de6\u8fb9\u300d\u6709 pre","[idx-1]"," \u4e2a \u6ee1\u8db3\u6392\u5e8f\u7684"),(0,i.kt)("li",{parentName:"ul"},"\u300c\u53f3\u8fb9\u300d\u6709 n - idx \u4e2a\u6570\u5b57\uff0c\u5176\u4e2d\u6709 pre","[n]"," - pre","[idx]"," \u4e2a\u5df2\u7ecf\u904d\u5386\u8fc7\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u6ee1\u8db3\u6392\u5e8f\u7684\uff0c\u6709 n - idx - (pre","[n]"," - pre","[idx]",") \u4e2a")),(0,i.kt)("p",null,"\u904d\u5386\u8fc7\u7a0b\u5982\u4e0b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"i:     [0] 1  2 3 4\nnums1:  4  0  1 3 2\nidx:   [1] 3  2 5 4\narr:    0 [1] 0 0 0 0 \npre:    0 [1] 1 1 1 1\nleft:  0 = pre[1-1]\nright: 4 = 5 - 1 - (pre[5] - pre[1])\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"i:     0 [1] 2  3  4\nnums1: 4  0  1  3  2\nidx:   1 [3] 2  5  4\narr:   0  1  0 [1] 0 0 \npre:   0  1  1 [2] 2 2\nleft:  1 = pre[3-1]\nright: 2 = 5 - 3 - (pre[5] - pre[3])\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"i:     0  1 [2] 3 4\nnums1: 4  0  1  3 2\nidx:   1  3 [2] 5 4\narr:   0  1 [1] 1 0 0 \npre:   0  1 [2] 3 3 3\nleft:  1 = pre[2-1]\nright: 2 = 5 - 2 - (pre[5] - pre[2])\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"template <class T> class FenwickTree {\n  int limit;\n  vector<T> arr;\n\n  int lowbit(int x) { return x & (-x); }\n\npublic:\n  FenwickTree(int limit) {\n    this->limit = limit;\n    arr = vector<T>(limit + 1);\n  }\n\n  void update(int idx, T delta) {\n    for (; idx <= limit; idx += lowbit(idx))\n      arr[idx] += delta;\n  }\n\n  T query(int idx) {\n    T ans = 0;\n    for (; idx > 0; idx -= lowbit(idx))\n      ans += arr[idx];\n    return ans;\n  }\n};\n\nclass Solution {\npublic:\n    long long goodTriplets(vector<int>& nums1, vector<int>& nums2) {\n        int n = nums1.size();\n        FenwickTree<int> occur(n);\n        unordered_map<int, int> pos;\n        for (int i = 0; i < n; ++i)\n            pos[nums2[i]] = i + 1;\n        \n        long long ans = 0;\n        for (int i = 0; i < n; ++i) {\n            int idx = pos[nums1[i]];\n            occur.update(idx, 1);\n            int left = occur.query(idx-1);\n            int right = n - idx - (occur.query(n) - occur.query(idx));\n            ans += 1LL * left * right;\n        }\n        return ans;\n    }\n};\n")))}c.isMDXComponent=!0}}]);