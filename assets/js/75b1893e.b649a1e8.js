"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[48675],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var d=n.createContext({}),p=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,d=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),c=p(r),f=o,m=c["".concat(d,".").concat(f)]||c[f]||u[f]||i;return r?n.createElement(m,l(l({ref:t},s),{},{components:r})):n.createElement(m,l({ref:t},s))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,l=new Array(i);l[0]=f;var a={};for(var d in t)hasOwnProperty.call(t,d)&&(a[d]=t[d]);a.originalType=e,a[c]="string"==typeof e?e:o,l[1]=a;for(var p=2;p<i;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},78303:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var n=r(87462),o=(r(67294),r(3905));const i={},l=void 0,a={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<\u91cd\u5efa\u6811>-\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<\u91cd\u5efa\u6811>-\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",title:"<\u91cd\u5efa\u6811>-\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",description:"\u9898\u76ee\uff1a106. \u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/106-<\u91cd\u5efa\u6811>-\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<\u91cd\u5efa\u6811>-\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<\u91cd\u5efa\u6811>-\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",draft:!1,tags:[],version:"current",sidebarPosition:106,frontMatter:{},sidebar:"algorithmSidebar",previous:{title:"<\u91cd\u5efa\u6811>-\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<\u91cd\u5efa\u6811>-\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"},next:{title:"<\u5de7\u5999\u9012\u5f52>-\u5e73\u8861\u4e8c\u53c9\u6811",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<\u5de7\u5999\u9012\u5f52>-\u5e73\u8861\u4e8c\u53c9\u6811"}},d={},p=[],s={toc:p};function c(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,n.Z)({},s,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u9898\u76ee\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/"},"106. \u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811")),(0,o.kt)("p",null,"\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\u6570\u7ec4 inorder \u548c postorder \uff0c\u5176\u4e2d inorder \u662f\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\uff0c postorder \u662f\u540c\u4e00\u68f5\u6811\u7684\u540e\u5e8f\u904d\u5386\uff0c\u8bf7\u4f60\u6784\u9020\u5e76\u8fd4\u56de\u8fd9\u9897 \u4e8c\u53c9\u6811 \u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1:")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"img",src:r(49580).Z,width:"277",height:"302"})),(0,o.kt)("p",null,"\u8f93\u5165\uff1ainorder = ","[9,3,15,20,7]",", postorder = ","[9,15,7,20,3]","\n\u8f93\u51fa\uff1a","[3,9,20,null,null,15,7]"),(0,o.kt)("p",null,"\u63d0\u793a:"),(0,o.kt)("p",null,"1 <= inorder.length <= 3000\npostorder.length == inorder.length\n-3000 <= inorder","[i]",", postorder","[i]"," <= 3000\ninorder \u548c postorder \u90fd\u7531 \u4e0d\u540c \u7684\u503c\u7ec4\u6210\npostorder \u4e2d\u6bcf\u4e00\u4e2a\u503c\u90fd\u5728 inorder \u4e2d\ninorder \u4fdd\u8bc1\u662f\u6811\u7684\u4e2d\u5e8f\u904d\u5386\npostorder \u4fdd\u8bc1\u662f\u6811\u7684\u540e\u5e8f\u904d\u5386"),(0,o.kt)("p",null,"\u4e0e\u4e0a\u9898\u540c\u7406"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> TreeNode:\n\n        node_in_idx = collections.defaultdict(int)\n        for i, v in enumerate(inorder):\n            node_in_idx[v] = i\n\n        def dfs(postStart, postEnd, inStart, inEnd):\n            if postStart > postEnd or inStart > inEnd:\n                return None\n            \n            node_val = postorder[postEnd]\n            node_idx = node_in_idx[node_val]\n            left_size = node_idx - inStart\n\n            node = TreeNode(node_val)\n            node.left = dfs(postStart, postStart+left_size-1, inStart, node_idx-1)\n            node.right = dfs(postStart+left_size, postEnd-1, node_idx+1, inEnd)\n            return node\n        \n        return dfs(0, len(postorder)-1, 0, len(inorder)-1)\n")))}c.isMDXComponent=!0},49580:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/tree-20221221214405649-69c21fd4b33762fb1eec250ac5d95cd3.jpg"}}]);