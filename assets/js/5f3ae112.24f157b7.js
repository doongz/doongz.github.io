"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8779],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function u(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?u(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):u(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},u=Object.keys(e);for(r=0;r<u.length;r++)t=u[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(r=0;r<u.length;r++)t=u[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var a=r.createContext({}),c=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(a.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,u=e.originalType,a=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=c(t),d=i,f=p["".concat(a,".").concat(d)]||p[d]||m[d]||u;return t?r.createElement(f,l(l({ref:n},s),{},{components:t})):r.createElement(f,l({ref:n},s))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var u=t.length,l=new Array(u);l[0]=d;var o={};for(var a in n)hasOwnProperty.call(n,a)&&(o[a]=n[a]);o.originalType=e,o[p]="string"==typeof e?e:i,l[1]=o;for(var c=2;c<u;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},38730:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>u,metadata:()=>o,toc:()=>c});var r=t(87462),i=(t(67294),t(3905));const u={},l="\u7ebf\u6bb5\u6570\u6a21\u7248",o={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/5-5-\u7ebf\u6bb5\u6570",id:"Algorithm/\u6570\u636e\u7ed3\u6784/5-5-\u7ebf\u6bb5\u6570",title:"\u7ebf\u6bb5\u6570\u6a21\u7248",description:"c++",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/5-5-\u7ebf\u6bb5\u6570.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/5-5-\u7ebf\u6bb5\u6570",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/5-5-\u7ebf\u6bb5\u6570",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"algorithmSidebar",previous:{title:"\u6811\u72b6\u6570\u7ec4",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/5-4-\u6811\u72b6\u6570\u7ec4"},next:{title:"\u5b57\u5178\u6811",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/5-6-\u5b57\u5178\u6811"}},a={},c=[{value:"c++",id:"c",level:3}],s={toc:c};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u7ebf\u6bb5\u6570\u6a21\u7248"},"\u7ebf\u6bb5\u6570\u6a21\u7248"),(0,i.kt)("h3",{id:"c"},"c++"),(0,i.kt)("p",null,"\u4f8b\u9898\uff1a",(0,i.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/my-calendar-i/"},"729. \u6211\u7684\u65e5\u7a0b\u5b89\u6392\u8868 I")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/shifting-letters-ii/solution/by-lfool-vbqw/"},"\u7ebf\u6bb5\u6811\u6a21\u7248\u9898\u300c\u6c47\u603b\u7ea7\u522b\u6574\u7406 \ud83d\udd25\ud83d\udd25\ud83d\udd25\u300d")),(0,i.kt)("p",null,"\u7ebf\u6bb5\u6811\u4ece\u5165\u95e8\u5230\u6025\u505c\uff1a",(0,i.kt)("a",{parentName:"p",href:"https://leetcode.cn/circle/discuss/H4aMOn/"},"https://leetcode.cn/circle/discuss/H4aMOn/")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"struct Node{\n    int l, r;\n    int sum;\n};\n\nclass NumArray {\nprivate:\n    vector<Node> tr;\n    vector<int> nums;\n    int n;\npublic:\n    NumArray(vector<int>& nums) \n    {\n        n = nums.size();\n        tr = vector<Node>(n * 4);\n        this -> nums = nums;\n        build(1, 1, n);//\u5efa\u7acb\u7ebf\u6bb5\u6811\n    }\n    \n    void update(int index, int val) \n    {\n        modify(1, index + 1, val);\n    }\n    \n    int sumRange(int left, int right) \n    {\n        return query(1, left + 1, right + 1).sum;\n    }\n\n    void build(int u, int l, int r)\n    {\n        if (l == r) tr[u] = {l, r, nums[l - 1]};\n        else\n        {\n            tr[u] = {l, r};\n            int mid = l + r >> 1;\n            build(u << 1, l, mid), build(u << 1 | 1, mid + 1, r);\n            pushup(u);\n        }\n    }//\u7ebf\u6bb5\u6811\u521d\u59cb\u5316\n\n    void pushup(Node &u, Node &l, Node &r)\n    {\n        u.sum = l.sum + r.sum;\n    }//\u5411\u4e0a\u8c03\u6574\n\n    void pushup(int u)\n    {\n        pushup(tr[u], tr[u << 1], tr[u << 1 | 1]);\n    }//\u5411\u4e0a\u8c03\u6574\n\n    void modify(int u, int x, int val)\n    {\n        if (tr[u].l == x && tr[u].r == x) tr[u] = {x, x, val};\n        else\n        {\n            int mid = tr[u].l + tr[u].r >> 1;\n            if (x <= mid) modify(u << 1, x, val);//\u5de6\u8fb9\u66f4\u65b0\n            else modify(u << 1 | 1, x, val);//\u53f3\u8fb9\u66f4\u65b0\n            pushup(u);//\u5411\u4e0a\u66f4\u65b0\u7236\u8282\u70b9\n        }\n    }\n\n    Node query(int u, int l, int r)\n    {\n        if (tr[u].l >= l && tr[u].r <= r) return tr[u];//\u8fd4\u56de\u7ed3\u70b9\n        else\n        {\n            int mid = tr[u].l + tr[u].r >> 1;\n            if (r <= mid) return query(u << 1, l, r);//\u5de6\u8fb9\u67e5\u8be2\n            else if (l > mid) return query(u << 1 | 1, l, r);//\u53f3\u8fb9\u67e5\u8be2\n            else\n            {\n                auto left = query(u << 1, l, r);\n                auto right = query(u << 1 | 1, l, r);\n                Node res;\n                pushup(res, left, right);//\u4e24\u8fb9\u67e5\u8be2\u540e\u8fd4\u56de\u7ed3\u70b9\u548c\n                return res;\n            }\n        }\n    }\n\n};\n")))}p.isMDXComponent=!0}}]);