"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[64087],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},f="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),f=u(n),s=l,m=f["".concat(p,".").concat(s)]||f[s]||d[s]||o;return n?r.createElement(m,a(a({ref:t},c),{},{components:n})):r.createElement(m,a({ref:t},c))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,a=new Array(o);a[0]=s;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[f]="string"==typeof e?e:l,a[1]=i;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},68829:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>f,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(87462),l=(n(67294),n(3905));const o={},a=void 0,i={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/\u5251\u6307Offer-55-II-\u5e73\u8861\u4e8c\u53c9\u6811",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/\u5251\u6307Offer-55-II-\u5e73\u8861\u4e8c\u53c9\u6811",title:"\u5251\u6307Offer-55-II-\u5e73\u8861\u4e8c\u53c9\u6811",description:"\u9898\u76ee\uff1a\u5251\u6307 Offer 55 - II. \u5e73\u8861\u4e8c\u53c9\u6811",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/\u5251\u6307Offer-55-II-\u5e73\u8861\u4e8c\u53c9\u6811.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/\u5251\u6307Offer-55-II-\u5e73\u8861\u4e8c\u53c9\u6811",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/\u5251\u6307Offer-55-II-\u5e73\u8861\u4e8c\u53c9\u6811",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"\u5251\u6307Offer-26-<\u5b50\u7ed3\u6784>-\u6811\u7684\u5b50\u7ed3\u6784",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/\u5251\u6307Offer-26-<\u5b50\u7ed3\u6784>-\u6811\u7684\u5b50\u7ed3\u6784"},next:{title:"\u5251\u6307Offer-68-II-<\u6700\u8fd1\u516c\u5171\u7956\u5148>-\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/\u5251\u6307Offer-68-II-<\u6700\u8fd1\u516c\u5171\u7956\u5148>-\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"}},p={},u=[{value:"\u65b9\u6cd5\u4e00\uff1a\u540e\u5e8f\u904d\u5386 + \u526a\u679d \uff08\u4ece\u5e95\u81f3\u9876\uff09",id:"\u65b9\u6cd5\u4e00\u540e\u5e8f\u904d\u5386--\u526a\u679d-\u4ece\u5e95\u81f3\u9876",level:2},{value:"\u65b9\u6cd5\u4e8c\uff1a\u5148\u5e8f\u904d\u5386 + \u5224\u65ad\u6df1\u5ea6 \uff08\u4ece\u9876\u81f3\u5e95\uff09",id:"\u65b9\u6cd5\u4e8c\u5148\u5e8f\u904d\u5386--\u5224\u65ad\u6df1\u5ea6-\u4ece\u9876\u81f3\u5e95",level:2}],c={toc:u};function f(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"\u9898\u76ee\uff1a",(0,l.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/ping-heng-er-cha-shu-lcof/"},"\u5251\u6307 Offer 55 - II. \u5e73\u8861\u4e8c\u53c9\u6811")),(0,l.kt)("p",null,"\u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9\uff0c\u5224\u65ad\u8be5\u6811\u662f\u4e0d\u662f\u5e73\u8861\u4e8c\u53c9\u6811\u3002\u5982\u679c\u67d0\u4e8c\u53c9\u6811\u4e2d\u4efb\u610f\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u7684\u6df1\u5ea6\u76f8\u5dee\u4e0d\u8d85\u8fc71\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811\u3002"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1:")),(0,l.kt)("p",null,"\u7ed9\u5b9a\u4e8c\u53c9\u6811 ",(0,l.kt)("inlineCode",{parentName:"p"},"[3,9,20,null,null,15,7]")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"    3\n   / \\\n  9  20\n    /  \\\n   15   7\n")),(0,l.kt)("p",null,"\u8fd4\u56de ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," \u3002"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u793a\u4f8b 2:")),(0,l.kt)("p",null,"\u7ed9\u5b9a\u4e8c\u53c9\u6811 ",(0,l.kt)("inlineCode",{parentName:"p"},"[1,2,2,3,3,null,null,4,4]")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4\n")),(0,l.kt)("p",null,"\u8fd4\u56de ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," \u3002"),(0,l.kt)("p",null,"\u9650\u5236\uff1a"),(0,l.kt)("p",null,"0 <= \u6811\u7684\u7ed3\u70b9\u4e2a\u6570 <= 10000"),(0,l.kt)("p",null,"\u6ce8\u610f\uff1a\u672c\u9898\u4e0e\u4e3b\u7ad9 110 \u9898\u76f8\u540c\uff1a",(0,l.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/balanced-binary-tree/"},"https://leetcode-cn.com/problems/balanced-binary-tree/")),(0,l.kt)("h2",{id:"\u65b9\u6cd5\u4e00\u540e\u5e8f\u904d\u5386--\u526a\u679d-\u4ece\u5e95\u81f3\u9876"},"\u65b9\u6cd5\u4e00\uff1a\u540e\u5e8f\u904d\u5386 + \u526a\u679d \uff08\u4ece\u5e95\u81f3\u9876\uff09"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u6b64\u65b9\u6cd5\u4e3a\u672c\u9898\u7684\u6700\u4f18\u89e3\u6cd5\uff0c\u4f46\u526a\u679d\u7684\u65b9\u6cd5\u4e0d\u6613\u7b2c\u4e00\u65f6\u95f4\u60f3\u5230\u3002")),(0,l.kt)("p",null,"\u601d\u8def\u662f\u5bf9\u4e8c\u53c9\u6811\u505a\u540e\u5e8f\u904d\u5386\uff0c\u4ece\u5e95\u81f3\u9876\u8fd4\u56de\u5b50\u6811\u6df1\u5ea6\uff0c\u82e5\u5224\u5b9a\u67d0\u5b50\u6811\u4e0d\u662f\u5e73\u8861\u6811\u5219 \u201c\u526a\u679d\u201d \uff0c\u76f4\u63a5\u5411\u4e0a\u8fd4\u56de\u3002"),(0,l.kt)("p",null,"\u7b97\u6cd5\u6d41\u7a0b\uff1a"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"recur(root)")," \u51fd\u6570\uff1a")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u8fd4\u56de\u503c\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u5f53\u8282\u70b9root \u5de6 / \u53f3\u5b50\u6811\u7684\u6df1\u5ea6\u5dee \u22641 \uff1a\u5219\u8fd4\u56de\u5f53\u524d\u5b50\u6811\u7684\u6df1\u5ea6\uff0c\u5373\u8282\u70b9 root \u7684\u5de6 / \u53f3\u5b50\u6811\u7684\u6df1\u5ea6\u6700\u5927\u503c +1 \uff08 max(left, right) + 1 \uff09\uff1b"),(0,l.kt)("li",{parentName:"ul"},"\u5f53\u8282\u70b9root \u5de6 / \u53f3\u5b50\u6811\u7684\u6df1\u5ea6\u5dee >2 \uff1a\u5219\u8fd4\u56de -1 \uff0c\u4ee3\u8868 \u6b64\u5b50\u6811\u4e0d\u662f\u5e73\u8861\u6811 \u3002"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u7ec8\u6b62\u6761\u4ef6\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u5f53 root \u4e3a\u7a7a\uff1a\u8bf4\u660e\u8d8a\u8fc7\u53f6\u8282\u70b9\uff0c\u56e0\u6b64\u8fd4\u56de\u9ad8\u5ea6 0 \uff1b"),(0,l.kt)("li",{parentName:"ul"},"\u5f53\u5de6\uff08\u53f3\uff09\u5b50\u6811\u6df1\u5ea6\u4e3a -1 \uff1a\u4ee3\u8868\u6b64\u6811\u7684 \u5de6\uff08\u53f3\uff09\u5b50\u6811 \u4e0d\u662f\u5e73\u8861\u6811\uff0c\u56e0\u6b64\u526a\u679d\uff0c\u76f4\u63a5\u8fd4\u56de \u22121 \uff1b")))),(0,l.kt)("p",null,"isBalanced(root) \u51fd\u6570\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u8fd4\u56de\u503c\uff1a \u82e5 recur(root) != -1 \uff0c\u5219\u8bf4\u660e\u6b64\u6811\u5e73\u8861\uff0c\u8fd4\u56de true \uff1b \u5426\u5219\u8fd4\u56de false \u3002")),(0,l.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6 O(N)\uff1a N \u4e3a\u6811\u7684\u8282\u70b9\u6570\uff1b\u6700\u5dee\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u9012\u5f52\u904d\u5386\u6811\u7684\u6240\u6709\u8282\u70b9\u3002\n\u7a7a\u95f4\u590d\u6742\u5ea6 O(N)\uff1a \u6700\u5dee\u60c5\u51b5\u4e0b\uff08\u6811\u9000\u5316\u4e3a\u94fe\u8868\u65f6\uff09\uff0c\u7cfb\u7edf\u9012\u5f52\u9700\u8981\u4f7f\u7528 O(N) \u7684\u6808\u7a7a\u95f4\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    // \u8fd4\u56de\u5e73\u8861\u6811\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u5982\u679c\u4e0d\u662f\u5e73\u8861\u6811\uff0c\u8fd4\u56de -1\n    int dfs(TreeNode* node) {\n        if (node == nullptr) return 0;\n        int left = dfs(node->left);\n        int right = dfs(node->right);\n        // \u5982\u679c\u5de6\u53f3\u5b50\u6811\u90fd\u662f\u5e73\u8861\u6811\uff0c\u4e14\u5b50\u6811\u7684\u6df1\u5ea6\u5dee\u5c0f\u4e8e\u7b49\u4e8e 1\uff0c\u5219\u8be5\u8282\u70b9\u7684\u6811\u4e5f\u662f\u5e73\u8861\u6811\n        if (left != -1 && right != -1 && abs(left - right) <= 1) {\n            // \u8fd4\u56de\u5f53\u524d\u5e73\u8861\u6811\u7684\u6df1\u5ea6\n            return max(left, right) + 1;\n        }\n        return -1;\n    }\n    bool isBalanced(TreeNode* root) {\n        if (dfs(root) == -1) return false;\n        return true;\n    }\n};\n")),(0,l.kt)("h2",{id:"\u65b9\u6cd5\u4e8c\u5148\u5e8f\u904d\u5386--\u5224\u65ad\u6df1\u5ea6-\u4ece\u9876\u81f3\u5e95"},"\u65b9\u6cd5\u4e8c\uff1a\u5148\u5e8f\u904d\u5386 + \u5224\u65ad\u6df1\u5ea6 \uff08\u4ece\u9876\u81f3\u5e95\uff09"),(0,l.kt)("p",null,"\u601d\u8def\u662f\u6784\u9020\u4e00\u4e2a\u83b7\u53d6\u5f53\u524d\u5b50\u6811\u7684\u6df1\u5ea6\u7684\u51fd\u6570 depth(root) \uff08\u5373 \u9762\u8bd5\u989855 - I. \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 \uff09\uff0c\u901a\u8fc7\u6bd4\u8f83\u67d0\u5b50\u6811\u7684\u5de6\u53f3\u5b50\u6811\u7684\u6df1\u5ea6\u5dee abs(depth(root.left) - depth(root.right)) <= 1 \u662f\u5426\u6210\u7acb\uff0c\u6765\u5224\u65ad\u67d0\u5b50\u6811\u662f\u5426\u662f\u4e8c\u53c9\u5e73\u8861\u6811\u3002\u82e5\u6240\u6709\u5b50\u6811\u90fd\u5e73\u8861\uff0c\u5219\u6b64\u6811\u5e73\u8861\u3002"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)"),(0,l.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int height(TreeNode* node, int depth) {\n        if (node == nullptr) return depth;\n        return max(height(node->left, depth + 1), height(node->right, depth + 1));\n    }\n\n    bool isBalanced(TreeNode* root) {\n        if (root == nullptr) return true;\n        int left = height(root->left, 0);\n        int right = height(root->right, 0);\n        if (abs(left - right) <= 1 && isBalanced(root->left) && isBalanced(root->right)) return true;\n        return false;\n    }\n};\n")))}f.isMDXComponent=!0}}]);