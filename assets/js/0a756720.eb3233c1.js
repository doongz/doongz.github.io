"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[76014],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>d});var l=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,l,r=function(e,n){if(null==e)return{};var t,l,r={},a=Object.keys(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=l.createContext({}),u=function(e){var n=l.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=u(e.components);return l.createElement(p.Provider,{value:n},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},c=l.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=u(t),c=r,d=m["".concat(p,".").concat(c)]||m[c]||f[c]||a;return t?l.createElement(d,i(i({ref:n},s),{},{components:t})):l.createElement(d,i({ref:n},s))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=c;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[m]="string"==typeof e?e:r,i[1]=o;for(var u=2;u<a;u++)i[u]=t[u];return l.createElement.apply(null,i)}return l.createElement.apply(null,t)}c.displayName="MDXCreateElement"},971:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var l=t(87462),r=(t(67294),t(3905));const a={},i=void 0,o={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<\u5927\u5c0f\u6839\u5806>-\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<\u5927\u5c0f\u6839\u5806>-\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570",title:"<\u5927\u5c0f\u6839\u5806>-\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570",description:"\u9898\u76ee\uff1a295. \u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/295-<\u5927\u5c0f\u6839\u5806>-\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<\u5927\u5c0f\u6839\u5806>-\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<\u5927\u5c0f\u6839\u5806>-\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570",draft:!1,tags:[],version:"current",sidebarPosition:295,frontMatter:{},sidebar:"algorithmSidebar",previous:{title:"<\u5faa\u73af+\u5806-\u591a\u8def\u5f52\u5e76>-\u4e11\u6570II",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<\u5faa\u73af+\u5806-\u591a\u8def\u5f52\u5e76>-\u4e11\u6570II"},next:{title:"<TopK>-\u524dK\u4e2a\u9ad8\u9891\u5143\u7d20",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<TopK>-\u524dK\u4e2a\u9ad8\u9891\u5143\u7d20"}},p={},u=[{value:"\u65b9\u6cd5\uff1a\u5927\u3001\u5c0f\u6839\u5806",id:"\u65b9\u6cd5\u5927\u5c0f\u6839\u5806",level:2}],s={toc:u};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,l.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"\u9898\u76ee\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/find-median-from-data-stream/"},"295. \u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570")),(0,r.kt)("p",null,"\u9898\u89e3\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/find-median-from-data-stream/solution/gong-shui-san-xie-jing-dian-shu-ju-jie-g-pqy8/"},"https://leetcode-cn.com/problems/find-median-from-data-stream/solution/gong-shui-san-xie-jing-dian-shu-ju-jie-g-pqy8/")),(0,r.kt)("p",null,"\u4e2d\u4f4d\u6570\u662f\u6709\u5e8f\u5217\u8868\u4e2d\u95f4\u7684\u6570\u3002\u5982\u679c\u5217\u8868\u957f\u5ea6\u662f\u5076\u6570\uff0c\u4e2d\u4f4d\u6570\u5219\u662f\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\u3002"),(0,r.kt)("p",null,"\u4f8b\u5982\uff0c"),(0,r.kt)("p",null,"[2,3,4]"," \u7684\u4e2d\u4f4d\u6570\u662f 3"),(0,r.kt)("p",null,"[2,3]"," \u7684\u4e2d\u4f4d\u6570\u662f (2 + 3) / 2 = 2.5"),(0,r.kt)("p",null,"\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"void addNum(int num) - \u4ece\u6570\u636e\u6d41\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u6574\u6570\u5230\u6570\u636e\u7ed3\u6784\u4e2d\u3002"),(0,r.kt)("li",{parentName:"ul"},"double findMedian() - \u8fd4\u56de\u76ee\u524d\u6240\u6709\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\u3002")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u793a\u4f8b\uff1a")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"addNum(1)\naddNum(2)\nfindMedian() -> 1.5\naddNum(3) \nfindMedian() -> 2\n")),(0,r.kt)("p",null,"\u8fdb\u9636:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5982\u679c\u6570\u636e\u6d41\u4e2d\u6240\u6709\u6574\u6570\u90fd\u5728 0 \u5230 100 \u8303\u56f4\u5185\uff0c\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f"),(0,r.kt)("li",{parentName:"ul"},"\u5982\u679c\u6570\u636e\u6d41\u4e2d 99% \u7684\u6574\u6570\u90fd\u5728 0 \u5230 100 \u8303\u56f4\u5185\uff0c\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f")),(0,r.kt)("h2",{id:"\u65b9\u6cd5\u5927\u5c0f\u6839\u5806"},"\u65b9\u6cd5\uff1a\u5927\u3001\u5c0f\u6839\u5806"),(0,r.kt)("p",null,"\u8fd9\u662f\u4e00\u9053\u7ecf\u5178\u7684\u6570\u636e\u7ed3\u6784\u8fd0\u7528\u9898\u3002"),(0,r.kt)("p",null,"\u5177\u4f53\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a\u4f18\u5148\u961f\u5217\uff08\u5806\uff09\u6765\u7ef4\u62a4\u6574\u4e2a\u6570\u636e\u6d41\u6570\u636e\uff0c\u4ee4\u7ef4\u62a4\u6570\u636e\u6d41\u5de6\u534a\u8fb9\u6570\u636e\u7684\u4f18\u5148\u961f\u5217\uff08\u5806\uff09\u4e3a l\uff0c\u7ef4\u62a4\u6570\u636e\u6d41\u53f3\u534a\u8fb9\u6570\u636e\u7684\u4f18\u5148\u961f\u5217\uff08\u5806\uff09\u4e3a r\u3002"),(0,r.kt)("p",null,"\u663e\u7136\uff0c\u4e3a\u4e86\u53ef\u4ee5\u5728 O(1) \u7684\u590d\u6742\u5ea6\u5185\u53d6\u5f97\u5f53\u524d\u4e2d\u4f4d\u6570\uff0c\u6211\u4eec\u5e94\u5f53\u4ee4 l \u4e3a\u5927\u6839\u5806\uff0cr \u4e3a\u5c0f\u6839\u5806\uff0c\u5e76\u4eba\u4e3a\u56fa\u5b9a l \u548c r \u4e4b\u524d\u5b58\u5728\u5982\u4e0b\u7684\u5927\u5c0f\u5173\u7cfb\uff1a"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u5f53\u6570\u636e\u6d41\u5143\u7d20\u6570\u91cf\u4e3a\u5076\u6570\uff1al \u548c r \u5927\u5c0f\u76f8\u540c\uff0c\u6b64\u65f6\u52a8\u6001\u4e2d\u4f4d\u6570\u4e3a\u4e24\u8005\u5806\u9876\u5143\u7d20\u7684\u5e73\u5747\u503c\uff1b"),(0,r.kt)("li",{parentName:"ol"},"\u5f53\u6570\u636e\u6d41\u5143\u7d20\u6570\u91cf\u4e3a\u5947\u6570\uff1al \u6bd4 r \u591a\u4e00\uff0c\u6b64\u65f6\u52a8\u6001\u4e2d\u4f4d\u6570\u4e3a l \u7684\u5806\u9876\u539f\u6570\u3002")),(0,r.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aaddNum \u51fd\u6570\u7684\u590d\u6742\u5ea6\u4e3a ",(0,r.kt)("inlineCode",{parentName:"p"},"O(logn)"),"\uff1bfindMedian \u51fd\u6570\u7684\u590d\u6742\u5ea6\u4e3a ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")),(0,r.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"O(n)")),(0,r.kt)("p",null,"c++"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class MedianFinder {\npublic:\n    priority_queue<int, vector<int>, less<int>> bigQ;       // \u5927\u6839\u5806\uff0c\u653e\u5c0f\u7684\u4e00\u534a\n    priority_queue<int, vector<int>, greater<int>> smallQ;  // \u5c0f\u6839\u5806\uff0c\u653e\u5927\u7684\u4e00\u534a\n\n    MedianFinder() {\n    }\n\n    void addNum(int num) {\n        if (bigQ.empty() || num <= bigQ.top()) {\n            // \u5f80 bigQ \u653e\n            bigQ.push(num);\n            if (bigQ.size() > smallQ.size() + 1) {\n                smallQ.push(bigQ.top());\n                bigQ.pop();\n            }\n        } else {\n            smallQ.push(num);\n            if (smallQ.size() > bigQ.size()) {\n                bigQ.push(smallQ.top());\n                smallQ.pop();\n            }\n        }\n    }\n\n    double findMedian() {\n        if (bigQ.size() > smallQ.size()) {\n            return bigQ.top();\n        }\n        return (bigQ.top() + smallQ.top()) / 2.0; // \u5982\u679c\u662f\u6574\u65702\uff0c\u8fd4\u56de\u503c\u4f1a\u88ab\u53d6\u6574\n    }\n};\n")),(0,r.kt)("p",null,"python"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class MedianFinder:\n\n    def __init__(self):\n        self.smallQue = []  # \u5c0f\u7684\u4e00\u534a\u5927\u6839\u5806\n        self.bigQue = []    # \u5927\u7684\u4e00\u534a\uff0c\u5c0f\u6839\u5806\n\n    def addNum(self, num: int) -> None:\n        if not self.smallQue or num < -self.smallQue[0]:\n            heapq.heappush(self.smallQue, -num) # \u8d1f\u7684\u653e\u8fdb\u53bb\uff0c\u5c0f\u7684\u53d8\u5927\u7684\n            if len(self.smallQue) > len(self.bigQue) + 1:\n                # \u628a\u5c0f\u4e00\u534a\u4e2d\u7684\u6700\u5927\u7684\u653e\u5230\u5927\u7684\u4e00\u534a\u4e2d\n                heapq.heappush(self.bigQue, -heapq.heappop(self.smallQue))\n        elif num >= -self.smallQue[0]:\n            heapq.heappush(self.bigQue, num)\n            if len(self.bigQue) > len(self.smallQue):\n                heapq.heappush(self.smallQue, -heapq.heappop(self.bigQue))\n\n    def findMedian(self) -> float:\n        if len(self.smallQue) > len(self.bigQue):\n            return -self.smallQue[0]\n        return (-self.smallQue[0] + self.bigQue[0]) / 2\n")))}m.isMDXComponent=!0}}]);