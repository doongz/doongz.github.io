"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[53499],{3905:(e,n,r)=>{r.d(n,{Zo:()=>s,kt:()=>f});var t=r(67294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=t.createContext({}),u=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},s=function(e){var n=u(e.components);return t.createElement(p.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=u(r),d=i,f=m["".concat(p,".").concat(d)]||m[d]||c[d]||a;return r?t.createElement(f,l(l({ref:n},s),{},{components:r})):t.createElement(f,l({ref:n},s))}));function f(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,l=new Array(a);l[0]=d;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[m]="string"==typeof e?e:i,l[1]=o;for(var u=2;u<a;u++)l[u]=r[u];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},49109:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var t=r(87462),i=(r(67294),r(3905));const a={},l=void 0,o={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5b57\u5178\u6811/<\u627e\u524d\u7f00\u540e\u7684\u5206\u6570>-\u952e\u503c\u6620\u5c04",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5b57\u5178\u6811/<\u627e\u524d\u7f00\u540e\u7684\u5206\u6570>-\u952e\u503c\u6620\u5c04",title:"<\u627e\u524d\u7f00\u540e\u7684\u5206\u6570>-\u952e\u503c\u6620\u5c04",description:"\u9898\u76ee\uff1a677. \u952e\u503c\u6620\u5c04",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5b57\u5178\u6811/677-<\u627e\u524d\u7f00\u540e\u7684\u5206\u6570>-\u952e\u503c\u6620\u5c04.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5b57\u5178\u6811",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5b57\u5178\u6811/<\u627e\u524d\u7f00\u540e\u7684\u5206\u6570>-\u952e\u503c\u6620\u5c04",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5b57\u5178\u6811/<\u627e\u524d\u7f00\u540e\u7684\u5206\u6570>-\u952e\u503c\u6620\u5c04",draft:!1,tags:[],version:"current",sidebarPosition:677,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<dfs\u641c\u7d22\u5b57\u5178\u6811>-\u5b9e\u73b0\u4e00\u4e2a\u9b54\u6cd5\u5b57\u5178",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5b57\u5178\u6811/<dfs\u641c\u7d22\u5b57\u5178\u6811>-\u5b9e\u73b0\u4e00\u4e2a\u9b54\u6cd5\u5b57\u5178"},next:{title:"<\u8003\u5bdf\u5982\u4f55\u904d\u5386>-\u8bcd\u5178\u4e2d\u6700\u957f\u7684\u5355\u8bcd",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5b57\u5178\u6811/<\u8003\u5bdf\u5982\u4f55\u904d\u5386>-\u8bcd\u5178\u4e2d\u6700\u957f\u7684\u5355\u8bcd"}},p={},u=[],s={toc:u};function m(e){let{components:n,...r}=e;return(0,i.kt)("wrapper",(0,t.Z)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"\u9898\u76ee\uff1a",(0,i.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/map-sum-pairs/"},"677. \u952e\u503c\u6620\u5c04")),(0,i.kt)("p",null,"\u8bbe\u8ba1\u4e00\u4e2a map \uff0c\u6ee1\u8db3\u4ee5\u4e0b\u51e0\u70b9:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5b57\u7b26\u4e32\u8868\u793a\u952e\uff0c\u6574\u6570\u8868\u793a\u503c"),(0,i.kt)("li",{parentName:"ul"},"\u8fd4\u56de\u5177\u6709\u524d\u7f00\u7b49\u4e8e\u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u952e\u7684\u503c\u7684\u603b\u548c")),(0,i.kt)("p",null,"\u5b9e\u73b0\u4e00\u4e2a ",(0,i.kt)("inlineCode",{parentName:"p"},"MapSum")," \u7c7b\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MapSum()")," \u521d\u59cb\u5316 ",(0,i.kt)("inlineCode",{parentName:"li"},"MapSum")," \u5bf9\u8c61"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"void insert(String key, int val)")," \u63d2\u5165 ",(0,i.kt)("inlineCode",{parentName:"li"},"key-val")," \u952e\u503c\u5bf9\uff0c\u5b57\u7b26\u4e32\u8868\u793a\u952e ",(0,i.kt)("inlineCode",{parentName:"li"},"key")," \uff0c\u6574\u6570\u8868\u793a\u503c ",(0,i.kt)("inlineCode",{parentName:"li"},"val")," \u3002\u5982\u679c\u952e ",(0,i.kt)("inlineCode",{parentName:"li"},"key")," \u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48\u539f\u6765\u7684\u952e\u503c\u5bf9 ",(0,i.kt)("inlineCode",{parentName:"li"},"key-value")," \u5c06\u88ab\u66ff\u4ee3\u6210\u65b0\u7684\u952e\u503c\u5bf9\u3002"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int sum(string prefix)")," \u8fd4\u56de\u6240\u6709\u4ee5\u8be5\u524d\u7f00 ",(0,i.kt)("inlineCode",{parentName:"li"},"prefix")," \u5f00\u5934\u7684\u952e ",(0,i.kt)("inlineCode",{parentName:"li"},"key")," \u7684\u503c\u7684\u603b\u548c\u3002")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'\u8f93\u5165\uff1a\n["MapSum", "insert", "sum", "insert", "sum"]\n[[], ["apple", 3], ["ap"], ["app", 2], ["ap"]]\n\u8f93\u51fa\uff1a\n[null, null, 3, null, 5]\n\n\u89e3\u91ca\uff1a\nMapSum mapSum = new MapSum();\nmapSum.insert("apple", 3);  \nmapSum.sum("ap");           // \u8fd4\u56de 3 (apple = 3)\nmapSum.insert("app", 2);    \nmapSum.sum("ap");           // \u8fd4\u56de 5 (apple + app = 3 + 2 = 5)\n')),(0,i.kt)("p",null,"\u63d0\u793a\uff1a"),(0,i.kt)("p",null,"1 <= key.length, prefix.length <= 50\nkey \u548c prefix \u4ec5\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\n1 <= val <= 1000\n\u6700\u591a\u8c03\u7528 50 \u6b21 insert \u548c sum"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"class Trie {\npublic:\n    Trie* son[26];  // \u5b58\u653e\u5f53\u524d\u5b57\u7b26\u4e4b\u540e\u7684\u5b57\u7b26\n    bool isWord;\n    string str;\n    int val = 0;\n\n    Trie() {\n        for (int i = 0; i < 26; i++) son[i] = nullptr;\n        isWord = false;\n        str = \"\";\n    }\n    ~Trie() {\n        for (int i = 0; i < 26; i++) {\n            if (son[i] != nullptr) delete son[i];\n        }\n    }\n\n    void insert(string word, int val) {\n        Trie* node = this;     // \u4ece\u5934\u8282\u70b9\u5f00\u59cb\u67e5\n        for (char c : word) {  // \u7c7b\u4f3c\u94fe\u8868\u7684\u904d\u5386\n            int cur = c - 'a';\n            if (node->son[cur] == nullptr) node->son[cur] = new Trie();\n            node = node->son[cur];\n        }\n        node->isWord = true;  // \u5728\u5355\u8bcd\u7684\u7ed3\u5c3e\u8282\u70b9\u6807\u8bb0\u4e00\u4e0b \u662f\u5355\u8bcd\n        node->str = word;     // \u7ed3\u5c3e\u76f4\u63a5\u8bb0\u5f55\u5355\u8bcd\n        node->val = val;      // \u8bb0\u5f55\u8be5\u5355\u8bcd\u7684\u503c\n    }\n\n    // \u524d\u7f00\u540e\u9762\u7684\u5206\u6570\n    int get_val(string& prefix) {\n        // \u627e\u5230\u524d\u7f00\u7684\u8282\u70b9\n        Trie* node = after_prefix(prefix);\n        return dfs(node);\n    }\n\n    // \u8fd4\u56de\u524d\u7f00\u540e\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\n    Trie* after_prefix(string& prefix) {\n        Trie* node = this;\n        for (char c : prefix) {\n            int cur = c - 'a';\n            if (node->son[cur] == nullptr) return nullptr;  // prefix\u8fd8\u6ca1\u904d\u5386\u5b8c\uff0c\u5c31\u627e\u4e0d\u5230\u4e86\n            node = node->son[cur];\n        }\n        return node;  // prefix\u6b63\u5e38\u904d\u5386\u5b8c\uff0c\u5c31\u8fd4\u56detrue\n    }\n\n    // \u6c42\u4ee5 node \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u7684\u8282\u70b9\u548c\n    int dfs(Trie* node) {\n        if (node == nullptr) return 0;\n\n        int sum = 0;\n        for (int i = 0; i < 26; i++) {\n            sum += dfs(node->son[i]);\n        }\n        return sum + node->val;\n    }\n};\n\nclass MapSum {\npublic:\n    Trie trie;\n    MapSum() {\n    }\n\n    void insert(string key, int val) {\n        trie.insert(key, val);\n    }\n\n    int sum(string prefix) {\n        return trie.get_val(prefix);\n    }\n};\n\n/**\n * Your MapSum object will be instantiated and called as such:\n * MapSum* obj = new MapSum();\n * obj->insert(key,val);\n * int param_2 = obj->sum(prefix);\n */\n")))}m.isMDXComponent=!0}}]);