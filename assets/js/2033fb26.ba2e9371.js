"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[70923],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(t),f=l,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||a;return t?r.createElement(m,i(i({ref:n},c),{},{components:t})):r.createElement(m,i({ref:n},c))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,i=new Array(a);i[0]=f;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:l,i[1]=o;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},34696:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var r=t(87462),l=(t(67294),t(3905));const a={},i=void 0,o={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/\u5251\u6307Offer-II-025-\u94fe\u8868\u4e2d\u7684\u4e24\u6570\u76f8\u52a0",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/\u5251\u6307Offer-II-025-\u94fe\u8868\u4e2d\u7684\u4e24\u6570\u76f8\u52a0",title:"\u5251\u6307Offer-II-025-\u94fe\u8868\u4e2d\u7684\u4e24\u6570\u76f8\u52a0",description:"\u9898\u76ee\uff1a\u5251\u6307 Offer II 025. \u94fe\u8868\u4e2d\u7684\u4e24\u6570\u76f8\u52a0",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/\u5251\u6307Offer-II-025-\u94fe\u8868\u4e2d\u7684\u4e24\u6570\u76f8\u52a0.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/\u5251\u6307Offer-II-025-\u94fe\u8868\u4e2d\u7684\u4e24\u6570\u76f8\u52a0",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/\u5251\u6307Offer-II-025-\u94fe\u8868\u4e2d\u7684\u4e24\u6570\u76f8\u52a0",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"algorithmSidebar",previous:{title:"\u5251\u6307Offer-II-023-\u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u91cd\u5408\u8282\u70b9",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/\u5251\u6307Offer-II-023-\u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u91cd\u5408\u8282\u70b9"},next:{title:"\u5251\u6307Offer-II-026-\u91cd\u6392\u94fe\u8868",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/\u5251\u6307Offer-II-026-\u91cd\u6392\u94fe\u8868"}},s={},p=[{value:"\u6062\u590d\u6210 arr \u505a\u6cd5",id:"\u6062\u590d\u6210-arr-\u505a\u6cd5",level:2}],c={toc:p};function u(e){let{components:n,...a}=e;return(0,l.kt)("wrapper",(0,r.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"\u9898\u76ee\uff1a",(0,l.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/lMSNwu/"},"\u5251\u6307 Offer II 025. \u94fe\u8868\u4e2d\u7684\u4e24\u6570\u76f8\u52a0")),(0,l.kt)("p",null,"\u7ed9\u5b9a\u4e24\u4e2a \u975e\u7a7a\u94fe\u8868 l1\u548c l2 \u6765\u4ee3\u8868\u4e24\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u6570\u5b57\u6700\u9ad8\u4f4d\u4f4d\u4e8e\u94fe\u8868\u5f00\u59cb\u4f4d\u7f6e\u3002\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u5b58\u50a8\u4e00\u4f4d\u6570\u5b57\u3002\u5c06\u8fd9\u4e24\u6570\u76f8\u52a0\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u3002"),(0,l.kt)("p",null,"\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u5b57\u90fd\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u793a\u4f8b1\uff1a")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"img",src:t(43142).Z,width:"523",height:"342"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1al1 = [7,2,4,3], l2 = [5,6,4]\n\u8f93\u51fa\uff1a[7,8,0,7]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u793a\u4f8b2\uff1a")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1al1 = [2,4,3], l2 = [5,6,4]\n\u8f93\u51fa\uff1a[8,0,7]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u793a\u4f8b3\uff1a")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1al1 = [0], l2 = [0]\n\u8f93\u51fa\uff1a[0]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u63d0\u793a\uff1a")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u94fe\u8868\u7684\u957f\u5ea6\u8303\u56f4\u4e3a",(0,l.kt)("inlineCode",{parentName:"li"}," [1, 100]")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"0 <= node.val <= 9")),(0,l.kt)("li",{parentName:"ul"},"\u8f93\u5165\u6570\u636e\u4fdd\u8bc1\u94fe\u8868\u4ee3\u8868\u7684\u6570\u5b57\u65e0\u524d\u5bfc 0")),(0,l.kt)("p",null,"\u8fdb\u9636\uff1a\u5982\u679c\u8f93\u5165\u94fe\u8868\u4e0d\u80fd\u4fee\u6539\u8be5\u5982\u4f55\u5904\u7406\uff1f\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e0d\u80fd\u5bf9\u5217\u8868\u4e2d\u7684\u8282\u70b9\u8fdb\u884c\u7ffb\u8f6c\u3002"),(0,l.kt)("p",null,"\u6ce8\u610f\uff1a\u672c\u9898\u4e0e\u4e3b\u7ad9 445 \u9898\u76f8\u540c\uff1a",(0,l.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/add-two-numbers-ii/"},"https://leetcode-cn.com/problems/add-two-numbers-ii/")),(0,l.kt)("hr",null),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"update\uff1a\u7edf\u4e00\u56de\u590d\u4e0b\u5934\u63d2\u6cd5\u7684\u8bc4\u8bba\uff0c\u4e0d\u719f\u6089\u7684\u53ef\u4ee5\u7528\u8fed\u4ee3\u6cd5\u53bb\u505a\u505a ",(0,l.kt)("a",{parentName:"strong",href:"https://leetcode-cn.com/problems/reverse-linked-list/"},"206. \u53cd\u8f6c\u94fe\u8868"),"\uff0c\u9700\u8981\u94fe\u8868\u9006\u5e8f\u7684\u65f6\u5019\u5c31\u7528\u5934\u63d2\u6cd5"),"\u3002"),(0,l.kt)("p",null,"\u7528 stack \u4fdd\u5b58\u94fe\u8868\uff0c\u518d\u4ece stack \u4e2d\u53d6\u51fa\u6765\uff0c\u5c31\u662f\u6570\u5b57\u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\u8bbf\u95ee\u4e86\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        stack<int> stk1;\n        stack<int> stk2;\n        while (l1) {\n            stk1.push(l1->val);\n            l1 = l1->next;\n        }\n        while (l2) {\n            stk2.push(l2->val);\n            l2 = l2->next;\n        }\n        int carry = 0;\n        ListNode* head = nullptr;\n        while (!stk1.empty() || !stk2.empty() || carry > 0) {\n            int sum = carry;\n            if (!stk1.empty()) {\n                sum += stk1.top();\n                stk1.pop();\n            }\n            if (!stk2.empty()) {\n                sum += stk2.top();\n                stk2.pop();\n            }\n            ListNode* node = new ListNode(sum % 10);\n            node->next = head;\n            head = node;\n            carry = sum / 10;\n        }\n        return head;\n    }\n};\n")),(0,l.kt)("h2",{id:"\u6062\u590d\u6210-arr-\u505a\u6cd5"},"\u6062\u590d\u6210 arr \u505a\u6cd5"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        vector<int> l1_arr;\n        vector<int> l2_arr;\n        while (l1) {\n            l1_arr.push_back(l1->val);\n            l1 = l1->next;\n        }\n        while (l2) {\n            l2_arr.push_back(l2->val);\n            l2 = l2->next;\n        }\n\n        int l1_sz = l1_arr.size();\n        int l2_sz = l2_arr.size();\n        reverse(l1_arr.begin(), l1_arr.end());\n        reverse(l2_arr.begin(), l2_arr.end());\n        int n;\n        if (l1_sz < l2_sz) {\n            for (int i = 0; i < l2_sz - l1_sz; i++) {\n                l1_arr.push_back(0);\n            }\n            n = l2_sz;\n        } else {\n            for (int i = 0; i < l1_sz - l2_sz; i++) {\n                l2_arr.push_back(0);\n            }\n            n = l1_sz;\n        }\n        l1_arr.push_back(0);  // \u591a\u6269\u5145\u4e00\u4f4d\uff0c\u4e3a\u6700\u9876\u5c42\u8fdb\u4f4d\n\n        int pre = 0;  // \u8fdb\u4f4d\u6570\n        for (int i = 0; i < n; i++) {\n            int now = l1_arr[i] + l2_arr[i] + pre;\n            if (now > 9) {\n                pre = 1;\n                l1_arr[i] = now - 10;\n            } else {\n                pre = 0;\n                l1_arr[i] = now;\n            }\n        }\n        int start;\n        if (pre > 0) {\n            l1_arr[n] = pre;\n            start = n;\n        } else {\n            start = n - 1;\n        }\n\n        ListNode* head = new ListNode();\n        ListNode* cur = head;\n        for (int i = start; i >= 0; i--) {\n            cur->val = l1_arr[i];\n            if (i == 0) {\n                cur->next = nullptr;\n            } else {\n                cur->next = new ListNode();\n                cur = cur->next;\n            }\n        }\n        return head;\n    }\n};\n")))}u.isMDXComponent=!0},43142:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/1626420025-fZfzMX-image-ddfd53a4f6be0e45117aa5bd4dcf847a.png"}}]);