"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[74277],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),o=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=o(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,p=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=o(n),d=i,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||s;return n?r.createElement(f,l(l({ref:t},c),{},{components:n})):r.createElement(f,l({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,l=new Array(s);l[0]=d;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a[u]="string"==typeof e?e:i,l[1]=a;for(var o=2;o<s;o++)l[o]=n[o];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},69236:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>o});var r=n(87462),i=(n(67294),n(3905));const s={},l=void 0,a={unversionedId:"Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6392\u5e8f/\u5251\u6307Offer-51-<\u5e76\u5f52\u6392\u5e8f-\u79bb\u6563\u5316+\u6811\u72b6\u6570\u7ec4>-\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9",id:"Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6392\u5e8f/\u5251\u6307Offer-51-<\u5e76\u5f52\u6392\u5e8f-\u79bb\u6563\u5316+\u6811\u72b6\u6570\u7ec4>-\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9",title:"\u5251\u6307Offer-51-<\u5e76\u5f52\u6392\u5e8f-\u79bb\u6563\u5316+\u6811\u72b6\u6570\u7ec4>-\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9",description:"\u5251\u6307 Offer 51. \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9",source:"@site/docs/Algorithm/2-\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6392\u5e8f/\u5251\u6307Offer-51-<\u5e76\u5f52\u6392\u5e8f-\u79bb\u6563\u5316+\u6811\u72b6\u6570\u7ec4>-\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9.md",sourceDirName:"Algorithm/2-\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6392\u5e8f",slug:"/Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6392\u5e8f/\u5251\u6307Offer-51-<\u5e76\u5f52\u6392\u5e8f-\u79bb\u6563\u5316+\u6811\u72b6\u6570\u7ec4>-\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9",permalink:"/docs/Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6392\u5e8f/\u5251\u6307Offer-51-<\u5e76\u5f52\u6392\u5e8f-\u79bb\u6563\u5316+\u6811\u72b6\u6570\u7ec4>-\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"\u5251\u6307Offer-45-\u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570",permalink:"/docs/Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6392\u5e8f/\u5251\u6307Offer-45-\u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570"},next:{title:"\u5251\u6307Offer-II-034-<\u5b57\u5178\u5e8f>-\u5916\u661f\u8bed\u8a00\u662f\u5426\u6392\u5e8f",permalink:"/docs/Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6392\u5e8f/\u5251\u6307Offer-II-034-<\u5b57\u5178\u5e8f>-\u5916\u661f\u8bed\u8a00\u662f\u5426\u6392\u5e8f"}},p={},o=[{value:"\u65b9\u6cd5\u4e00\uff1a\u5e76\u5f52\u6392\u5e8f",id:"\u65b9\u6cd5\u4e00\u5e76\u5f52\u6392\u5e8f",level:2},{value:"\u65b9\u6cd5\u4e8c\uff1a\u79bb\u6563\u5316+\u6811\u72b6\u6570\u7ec4",id:"\u65b9\u6cd5\u4e8c\u79bb\u6563\u5316\u6811\u72b6\u6570\u7ec4",level:2}],c={toc:o};function u(e){let{components:t,...s}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/"},"\u5251\u6307 Offer 51. \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9")),(0,i.kt)("p",null,"\u5728\u6570\u7ec4\u4e2d\u7684\u4e24\u4e2a\u6570\u5b57\uff0c\u5982\u679c\u524d\u9762\u4e00\u4e2a\u6570\u5b57\u5927\u4e8e\u540e\u9762\u7684\u6570\u5b57\uff0c\u5219\u8fd9\u4e24\u4e2a\u6570\u5b57\u7ec4\u6210\u4e00\u4e2a\u9006\u5e8f\u5bf9\u3002\u8f93\u5165\u4e00\u4e2a\u6570\u7ec4\uff0c\u6c42\u51fa\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9\u7684\u603b\u6570\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u8f93\u5165: [7,5,6,4]\n\u8f93\u51fa: 5\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u9650\u5236\uff1a")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"0 <= \u6570\u7ec4\u957f\u5ea6 <= 50000\n")),(0,i.kt)("h2",{id:"\u65b9\u6cd5\u4e00\u5e76\u5f52\u6392\u5e8f"},"\u65b9\u6cd5\u4e00\uff1a\u5e76\u5f52\u6392\u5e8f"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/solution/jian-zhi-offer-51-shu-zu-zhong-de-ni-xu-pvn2h/"},"\u9898\u89e3\u6765\u6e90")),(0,i.kt)("p",null,"\u300c\u5f52\u5e76\u6392\u5e8f\u300d\u4e0e\u300c\u9006\u5e8f\u5bf9\u300d\u662f\u606f\u606f\u76f8\u5173\u7684\u3002\u5f52\u5e76\u6392\u5e8f\u4f53\u73b0\u4e86 \u201c\u5206\u800c\u6cbb\u4e4b\u201d \u7684\u7b97\u6cd5\u601d\u60f3\uff0c\u5177\u4f53\u4e3a\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5206\uff1a \u4e0d\u65ad\u5c06\u6570\u7ec4\u4ece\u4e2d\u70b9\u4f4d\u7f6e\u5212\u5206\u5f00\uff08\u5373\u4e8c\u5206\u6cd5\uff09\uff0c\u5c06\u6574\u4e2a\u6570\u7ec4\u7684\u6392\u5e8f\u95ee\u9898\u8f6c\u5316\u4e3a\u5b50\u6570\u7ec4\u7684\u6392\u5e8f\u95ee\u9898\uff1b"),(0,i.kt)("li",{parentName:"ul"},"\u6cbb\uff1a \u5212\u5206\u5230\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 1 \u65f6\uff0c\u5f00\u59cb\u5411\u4e0a\u5408\u5e76\uff0c\u4e0d\u65ad\u5c06 \u8f83\u77ed\u6392\u5e8f\u6570\u7ec4 \u5408\u5e76\u4e3a \u8f83\u957f\u6392\u5e8f\u6570\u7ec4\uff0c\u76f4\u81f3\u5408\u5e76\u81f3\u539f\u6570\u7ec4\u65f6\u5b8c\u6210\u6392\u5e8f\uff1b")),(0,i.kt)("p",null,"\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u4e3a\u6570\u7ec4 ","[7, 3, 2, 6, 0, 1, 5, 4]"," \u7684\u5f52\u5e76\u6392\u5e8f\u8fc7\u7a0b\u3002"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(81400).Z,width:"1447",height:"1086"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u300c\u5408\u5e76\u9636\u6bb5\u300d\u672c\u8d28\u4e0a\u662f\u300c\u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u6570\u7ec4\u300d\u7684\u8fc7\u7a0b\uff0c\u800c\u6bcf\u5f53\u9047\u5230\u300c\u5de6\u5b50\u6570\u7ec4\u5f53\u524d\u5143\u7d20 > \u53f3\u5b50\u6570\u7ec4\u5f53\u524d\u5143\u7d20\u300d\u65f6\uff0c\u610f\u5473\u7740\u300c\u5de6\u5b50\u6570\u7ec4\u5f53\u524d\u5143\u7d20 \u81f3 \u672b\u5c3e\u5143\u7d20\u300d\u4e0e\u300c\u53f3\u5b50\u6570\u7ec4\u5f53\u524d\u5143\u7d20\u300d\u6784\u6210\u4e86\u82e5\u5e72\u300c\u9006\u5e8f\u5bf9\u300d")),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(60881).Z,width:"1084",height:"656"})),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(62900).Z,width:"870",height:"768"})),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(17214).Z,width:"916",height:"766"})),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(63669).Z,width:"874",height:"686"})),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(17362).Z,width:"796",height:"648"})),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(89699).Z,width:"828",height:"790"})),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(42191).Z,width:"898",height:"778"})),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(23953).Z,width:"852",height:"668"})),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(90565).Z,width:"864",height:"652"})),(0,i.kt)("p",null,"\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u4e3a\u6570\u7ec4 ","[7, 3, 2, 6, 0, 1, 5, 4]"," \u7684\u5f52\u5e76\u6392\u5e8f\u4e0e\u9006\u5e8f\u5bf9\u7edf\u8ba1\u8fc7\u7a0b\u3002"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(44474).Z,width:"1448",height:"1086"})),(0,i.kt)("p",null,"\u7b97\u6cd5\u5b9e\u73b0\u4e0a\u5bf9\u6a21\u7248\u8fdb\u884c\u51e0\u5904\u66f4\u6539\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u6dfb\u52a0\u6210\u5458\u53d8\u91cf reverse_pairs"),(0,i.kt)("li",{parentName:"ul"},"tmp","[ptr_l]"," > tmp","[ptr_r]"," \u7684\u60c5\u51b5\u4e0b\uff0c\u8ba1\u7b97\u5f53\u524d\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u9006\u5e8f\u5bf9 mid - ptr_l + 1"),(0,i.kt)("li",{parentName:"ul"},"\u6ce8\u610f\uff1a\u5728 tmp","[ptr_l]"," == tmp","[ptr_r]"," \u7684\u60c5\u51b5\u4e0b\uff0c\u4e24\u4e2a\u6307\u9488\u76f8\u7b49\uff0c\u4e00\u5b9a\u8981\u5de6\u6307\u9488\u79fb\u52a8")),(0,i.kt)("p",null,"\u4f8b\u5982 ","[1,2,3][1,3]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u82e5\u4e24\u6307\u9488\u76f8\u7b49\u300c\u53f3\u6307\u9488\u300d\u79fb\u52a8\uff0c\u4f1a\u5bfc\u81f4\u53f3\u8fb9\u6570\u7ec4\u7684 1 \u88ab\u7a7a\u8fc7\u53bb\uff0c\u5de6\u8fb9\u7684\u66f4\u5927\u503c\u65e0\u6cd5\u4e0e\u5b83\u6bd4\u8f83"),(0,i.kt)("li",{parentName:"ul"},"\u82e5\u4e24\u6307\u9488\u76f8\u7b49\u300c\u5de6\u6307\u9488\u300d\u79fb\u52a8\uff0c\u56e0\u4e3a 1 \u5c31\u662f\u5de6\u8fb9\u6700\u5c0f\u7684\uff0c\u4e0d\u4f1a\u9519\u8fc7\u7b54\u6848")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"class MergeSort {\nprivate:\n    vector<int> tmp;  // \u7528\u4e8e\u8f85\u52a9\u5408\u5e76\u6709\u5e8f\u6570\u7ec4\n    void _sort(vector<int> &nums, int lo, int hi) {\n        if (lo == hi) return;  // \u5355\u4e2a\u5143\u7d20\u4e0d\u7528\u6392\u5e8f\n        int mid = lo + (hi - lo) / 2;\n        _sort(nums, lo, mid);      // \u5148\u5bf9\u5de6\u534a\u90e8\u5206\u6570\u7ec4 [lo,mid] \u6392\u5e8f\n        _sort(nums, mid + 1, hi);  // \u518d\u5bf9\u53f3\u534a\u90e8\u5206\u6570\u7ec4 [mid+1,hi] \u6392\u5e8f\n        merge(nums, lo, mid, hi);  // \u5c06\u4e24\u90e8\u5206\u6709\u5e8f\u6570\u7ec4\u5408\u5e76\u6210\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\n    }\n    void merge(vector<int> &nums, int lo, int mid, int hi) {\n        // \u5148\u628a [lo, hi] \u590d\u5236\u5230\u8f85\u52a9\u6570\u7ec4\u4e2d\uff0c\u4ee5\u4fbf\u5408\u5e76\u540e\u7684\u7ed3\u679c\u80fd\u591f\u76f4\u63a5\u5b58\u5165 nums\n        for (int i = lo; i <= hi; i++) tmp[i] = nums[i];\n        // \u53cc\u6307\u9488\uff0c\u5206\u522b\u6307\u5411\u5de6\u53f3\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\uff0c\u5408\u5e76\n        int ptr_l = lo, ptr_r = mid + 1;\n        for (int idx = lo; idx <= hi; idx++) {\n            if (ptr_l == mid + 1) {  // \u5de6\u534a\u8fb9\u6570\u7ec4\u5df2\u5168\u90e8\u88ab\u5408\u5e76\n                nums[idx] = tmp[ptr_r++];\n            } else if (ptr_r == hi + 1) {  // \u53f3\u534a\u8fb9\u6570\u7ec4\u5df2\u5168\u90e8\u88ab\u5408\u5e76\n                nums[idx] = tmp[ptr_l++];\n            } else if (tmp[ptr_l] < tmp[ptr_r]) {\n                nums[idx] = tmp[ptr_l];\n                ptr_l++;\n            } else if (tmp[ptr_l] == tmp[ptr_r]) {\n                nums[idx] = tmp[ptr_l];  // \u6ce8\u610f\u6ce8\u610f\u6ce8\u610f\uff1a\u4e24\u4e2a\u6307\u9488\u76f8\u7b49\u65f6\uff0c\u4e00\u5b9a\u8981\u5de6\u6307\u9488\u79fb\u52a8\n                ptr_l++;\n            } else if (tmp[ptr_l] > tmp[ptr_r]) {\n                reverse_pairs += mid - ptr_l + 1;  // \u9006\u5e8f\u5bf9\u8fdb\u884c\u7d2f\u52a0\n                nums[idx] = tmp[ptr_r];\n                ptr_r++;\n            }\n        }\n    }\n\npublic:\n    int reverse_pairs;\n    void sort(vector<int> &nums) {\n        int n = nums.size();\n        reverse_pairs = 0;\n        tmp.resize(n);          // \u5148\u7ed9\u8f85\u52a9\u6570\u7ec4\u5f00\u8f9f\u5185\u5b58\u7a7a\u95f4\uff0c\u4e0d\u8981\u653e\u5728\u9012\u5f52\u91cc\u9762\n        _sort(nums, 0, n - 1);  // \u6392\u5e8f\u6574\u4e2a\u6570\u7ec4\uff08\u539f\u5730\u4fee\u6539\uff09\n    }\n};\n\nclass Solution {\npublic:\n    int reversePairs(vector<int> &nums) {\n        if (nums.empty()) return 0;\n        MergeSort ms;\n        ms.sort(nums);\n        return ms.reverse_pairs;\n    }\n};\n")),(0,i.kt)("h2",{id:"\u65b9\u6cd5\u4e8c\u79bb\u6563\u5316\u6811\u72b6\u6570\u7ec4"},"\u65b9\u6cd5\u4e8c\uff1a\u79bb\u6563\u5316+\u6811\u72b6\u6570\u7ec4"),(0,i.kt)("p",null,"\u4e0e ",(0,i.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/count-of-smaller-numbers-after-self/solution/shu-zhuang-shu-zu-c-python-by-dodo_1202-igmr/"},"315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570")," \u4e00\u6478\u4e00\u6837"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"class FenwickTree {\npublic:\n    int size;\n    vector<int> tree;\n\n    FenwickTree(int n) {\n        size = n;\n        tree.resize(size + 1, 0);\n    }\n    int lowbit(int idx) {\n        return idx & (-idx);\n    }\n    void add(int idx, int delta) {\n        while (idx < size + 1) {\n            tree[idx] += delta;\n            idx += lowbit(idx);\n        }\n    }\n    int query(int idx) {\n        int sum = 0;\n        while (idx > 0) {\n            sum += tree[idx];\n            idx -= lowbit(idx);\n        }\n        return sum;\n    }\n};\n\nclass Solution {\npublic:\n    int reversePairs(vector<int>& nums) {\n        set<int> s(nums.begin(), nums.end());\n        unordered_map<int, int> um;\n        int rank = 1;\n        for (auto it = s.begin(); it != s.end(); it++) {\n            um[*it] = rank;\n            rank++;\n        }\n        FenwickTree ftree(s.size());\n        int ans = 0;\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            rank = um[nums[i]];\n            ftree.add(rank, 1);\n            ans += ftree.query(rank - 1);\n        }\n        return ans;\n    }\n};\n")))}u.isMDXComponent=!0},81400:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/jz-51-1-af034d5c92c97bcd2c18553f42bdbc86.png"},90565:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/jz-51-10-11cd55bd525bf91999f84cbec823d616.png"},44474:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/jz-51-11-b3e63d854adf78277150d98568ff9760.png"},60881:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/jz-51-2-257597a710197027c434595ac37fe87e.png"},62900:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/jz-51-3-5819da7e43dce2c5f5e9c8b07c91e4c6.png"},17214:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/jz-51-4-3908febc30c41a28a830d63c8b562ea4.png"},63669:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/jz-51-5-6e7b85d955f4fa439747b3d017afcafd.png"},17362:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/jz-51-6-ac8289f4baea6e53cfd2c174fbc25f00.png"},89699:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/jz-51-7-a187ef3a169a5abc0460ef0529c4e44e.png"},42191:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/jz-51-8-db279e830e83cbfcbaf0567cc066a79a.png"},23953:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/jz-51-9-31afd24b3a3c7d9b7aca66f68acc5a79.png"}}]);