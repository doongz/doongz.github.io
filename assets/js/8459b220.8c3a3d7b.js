"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[63810],{3905:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>f});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=t.createContext({}),c=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},u=function(e){var n=c(e.components);return t.createElement(p.Provider,{value:n},e.children)},d="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(r),m=o,f=d["".concat(p,".").concat(m)]||d[m]||s[m]||a;return r?t.createElement(f,i(i({ref:n},u),{},{components:r})):t.createElement(f,i({ref:n},u))}));function f(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},89933:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var t=r(87462),o=(r(67294),r(3905));const a={},i=void 0,l={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u641c\u7d22\u6811/\u9762\u8bd5\u9898-04-06-<\u4e2d\u5e8f\u904d\u5386>-\u540e\u7ee7\u8005",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u641c\u7d22\u6811/\u9762\u8bd5\u9898-04-06-<\u4e2d\u5e8f\u904d\u5386>-\u540e\u7ee7\u8005",title:"\u9762\u8bd5\u9898-04-06-<\u4e2d\u5e8f\u904d\u5386>-\u540e\u7ee7\u8005",description:"\u9898\u76ee\uff1a\u9762\u8bd5\u9898 04.06. \u540e\u7ee7\u8005",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u641c\u7d22\u6811/\u9762\u8bd5\u9898-04-06-<\u4e2d\u5e8f\u904d\u5386>-\u540e\u7ee7\u8005.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u641c\u7d22\u6811",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u641c\u7d22\u6811/\u9762\u8bd5\u9898-04-06-<\u4e2d\u5e8f\u904d\u5386>-\u540e\u7ee7\u8005",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u641c\u7d22\u6811/\u9762\u8bd5\u9898-04-06-<\u4e2d\u5e8f\u904d\u5386>-\u540e\u7ee7\u8005",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"\u9762\u8bd5\u9898-04-05-\u5408\u6cd5\u4e8c\u53c9\u641c\u7d22\u6811",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u641c\u7d22\u6811/\u9762\u8bd5\u9898-04-05-\u5408\u6cd5\u4e8c\u53c9\u641c\u7d22\u6811"},next:{title:"<\u9012\u5f52>-\u76f8\u540c\u7684\u6811",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<\u9012\u5f52>-\u76f8\u540c\u7684\u6811"}},p={},c=[{value:"\u672c\u529e\u6cd5\uff1a\u4e2d\u5e8f\u904d\u5386+\u5faa\u73af\u6bd4\u5bf9",id:"\u672c\u529e\u6cd5\u4e2d\u5e8f\u904d\u5386\u5faa\u73af\u6bd4\u5bf9",level:2},{value:"BST \u7279\u6027 + \u9012\u5f52",id:"bst-\u7279\u6027--\u9012\u5f52",level:2}],u={toc:c};function d(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u9898\u76ee\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/successor-lcci/"},"\u9762\u8bd5\u9898 04.06. \u540e\u7ee7\u8005")),(0,o.kt)("h2",{id:"\u672c\u529e\u6cd5\u4e2d\u5e8f\u904d\u5386\u5faa\u73af\u6bd4\u5bf9"},"\u672c\u529e\u6cd5\uff1a\u4e2d\u5e8f\u904d\u5386+\u5faa\u73af\u6bd4\u5bf9"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c++"},"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode*> node_arr;\n\n    void dfs(TreeNode* cur) {\n        if (cur == nullptr) return;\n        dfs(cur->left);\n        node_arr.push_back(cur);\n        dfs(cur->right);\n    }\n\n    TreeNode* inorderSuccessor(TreeNode* root, TreeNode* p) {\n        dfs(root);\n        int n = node_arr.size();\n        for (int i = 0; i < n - 1; i++) {\n            if (node_arr[i] == p) return node_arr[i + 1];\n        }\n        return nullptr;\n    }\n};\n")),(0,o.kt)("h2",{id:"bst-\u7279\u6027--\u9012\u5f52"},"BST \u7279\u6027 + \u9012\u5f52"),(0,o.kt)("p",null,"\u5229\u7528 ",(0,o.kt)("inlineCode",{parentName:"p"},"BST")," \u7684\u7279\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u5f53\u524d\u8282\u70b9 ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," \u4e0e ",(0,o.kt)("inlineCode",{parentName:"p"},"p")," \u7684\u503c\u5927\u5c0f\u5173\u7cfb\u6765\u786e\u5b9a\u641c\u7d22\u65b9\u5411\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u82e5\u6709 ",(0,o.kt)("inlineCode",{parentName:"p"},"root.val <= p.val")," : \u6839\u636e ",(0,o.kt)("inlineCode",{parentName:"p"},"BST")," \u7279\u6027\u53ef\u77e5\u5f53\u524d\u8282\u70b9 ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," \u53ca\u5176\u5de6\u5b50\u6811\u5b50\u8282\u70b9\u5747\u6ee1\u8db3\u300c\u503c\u5c0f\u4e8e\u7b49\u4e8e ",(0,o.kt)("inlineCode",{parentName:"p"},"p.val"),"\u300d\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u662f ",(0,o.kt)("inlineCode",{parentName:"p"},"p")," \u70b9\u7684\u540e\u7ee7\uff0c\u6211\u4eec\u76f4\u63a5\u5230 ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," \u7684\u53f3\u5b50\u6811\u641c\u7d22 ",(0,o.kt)("inlineCode",{parentName:"p"},"p")," \u7684\u540e\u7ee7\uff08\u9012\u5f52\u5904\u7406\uff09\uff1b")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u82e5\u6709 ",(0,o.kt)("inlineCode",{parentName:"p"},"root.val > p.val")," : \u5f53\u7b2c\u4e00\u6b21\u641c\u7d22\u5230\u6ee1\u8db3\u6b64\u6761\u4ef6\u7684\u8282\u70b9\u65f6\uff0c\u5728\u4ee5 ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u300c\u4f4d\u4e8e\u6700\u5de6\u4e0b\u65b9\u300d\u7684\u503c\u4e3a ",(0,o.kt)("inlineCode",{parentName:"p"},"p")," \u7684\u540e\u7ee7\uff0c\u4f46\u4e5f\u6709\u53ef\u80fd ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," \u6ca1\u6709\u5de6\u5b50\u6811\uff0c\u56e0\u6b64 ",(0,o.kt)("inlineCode",{parentName:"p"},"p")," \u7684\u540e\u7ee7\u8981\u4e48\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," \u7684\u5de6\u5b50\u6811\u4e2d\uff08\u82e5\u6709\uff09\uff0c\u8981\u4e48\u662f ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," \u672c\u8eab\uff0c\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5230 ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," \u7684\u5de6\u5b50\u6811\u641c\u7d22\uff0c\u82e5\u641c\u7d22\u7ed3\u679c\u4e3a\u7a7a\u8fd4\u56de ",(0,o.kt)("inlineCode",{parentName:"p"},"root"),"\uff0c\u5426\u5219\u8fd4\u56de\u641c\u7d22\u7ed3\u679c\u3002"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c++"},"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* inorderSuccessor(TreeNode* root, TreeNode* p) {\n        if (root == nullptr) return nullptr;\n        if (root->val <= p->val) return inorderSuccessor(root->right, p);\n        TreeNode* ans = inorderSuccessor(root->left, p);\n        return ans == nullptr ? root : ans;\n    }\n};\n")))}d.isMDXComponent=!0}}]);