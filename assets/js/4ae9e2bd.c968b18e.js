"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[61866],{3905:(n,e,t)=>{t.d(e,{Zo:()=>s,kt:()=>c});var i=t(67294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function l(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function d(n,e){if(null==n)return{};var t,i,a=function(n,e){if(null==n)return{};var t,i,a={},r=Object.keys(n);for(i=0;i<r.length;i++)t=r[i],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(i=0;i<r.length;i++)t=r[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var o=i.createContext({}),p=function(n){var e=i.useContext(o),t=e;return n&&(t="function"==typeof n?n(e):l(l({},e),n)),t},s=function(n){var e=p(n.components);return i.createElement(o.Provider,{value:e},n.children)},u="mdxType",m={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},k=i.forwardRef((function(n,e){var t=n.components,a=n.mdxType,r=n.originalType,o=n.parentName,s=d(n,["components","mdxType","originalType","parentName"]),u=p(t),k=a,c=u["".concat(o,".").concat(k)]||u[k]||m[k]||r;return t?i.createElement(c,l(l({ref:e},s),{},{components:t})):i.createElement(c,l({ref:e},s))}));function c(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var r=t.length,l=new Array(r);l[0]=k;var d={};for(var o in e)hasOwnProperty.call(e,o)&&(d[o]=e[o]);d.originalType=n,d[u]="string"==typeof n?n:a,l[1]=d;for(var p=2;p<r;p++)l[p]=t[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}k.displayName="MDXCreateElement"},93795:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>d,toc:()=>p});var i=t(87462),a=(t(67294),t(3905));const r={},l="\u6700\u77ed\u8def\u5f84",d={unversionedId:"Algorithm/\u56fe\u8bba/\u6700\u77ed\u8def\u5f84",id:"Algorithm/\u56fe\u8bba/\u6700\u77ed\u8def\u5f84",title:"\u6700\u77ed\u8def\u5f84",description:"\u53c2\u8003\uff1ahttps://oi-wiki.org/graph/shortest-path/",source:"@site/docs/Algorithm/4-\u56fe\u8bba/06-\u6700\u77ed\u8def\u5f84.md",sourceDirName:"Algorithm/4-\u56fe\u8bba",slug:"/Algorithm/\u56fe\u8bba/\u6700\u77ed\u8def\u5f84",permalink:"/docs/Algorithm/\u56fe\u8bba/\u6700\u77ed\u8def\u5f84",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"docsSidebar",previous:{title:"\u62d3\u6251\u6392\u5e8f",permalink:"/docs/Algorithm/\u56fe\u8bba/\u62d3\u6251\u6392\u5e8f"},next:{title:"\u6b27\u62c9\u56fe",permalink:"/docs/Algorithm/\u56fe\u8bba/\u6b27\u62c9\u56fe"}},o={},p=[{value:"\u4e00\u3001Dijkstra \u7b97\u6cd5",id:"\u4e00dijkstra-\u7b97\u6cd5",level:2},{value:"\u6d41\u7a0b",id:"\u6d41\u7a0b",level:3},{value:"\u5b9e\u73b0\u4e00\uff1a\u4f18\u5148\u961f\u5217\uff08\u5e38\u7528\uff09",id:"\u5b9e\u73b0\u4e00\u4f18\u5148\u961f\u5217\u5e38\u7528",level:3},{value:"\u90bb\u63a5\u77e9\u9635\u5199\u6cd5",id:"\u90bb\u63a5\u77e9\u9635\u5199\u6cd5",level:4},{value:"\u90bb\u63a5\u8868\u5199\u6cd5",id:"\u90bb\u63a5\u8868\u5199\u6cd5",level:4},{value:"\u5b9e\u73b0\u4e8c\uff1a\u66b4\u529b\u6cd5",id:"\u5b9e\u73b0\u4e8c\u66b4\u529b\u6cd5",level:3},{value:"\u4e8c\u3001Floyd \u7b97\u6cd5",id:"\u4e8cfloyd-\u7b97\u6cd5",level:2},{value:"\u6d41\u7a0b",id:"\u6d41\u7a0b-1",level:3},{value:"\u5b9e\u73b0",id:"\u5b9e\u73b0",level:3},{value:"\u4e09\u3001Bellman-Ford \u7b97\u6cd5",id:"\u4e09bellman-ford-\u7b97\u6cd5",level:2},{value:"\u6d41\u7a0b",id:"\u6d41\u7a0b-2",level:3},{value:"\u7c7b\u56fe\u5b9e\u73b0",id:"\u7c7b\u56fe\u5b9e\u73b0",level:3},{value:"\u961f\u5217\u4f18\u5316\uff1aSPFA",id:"\u961f\u5217\u4f18\u5316spfa",level:3},{value:"\u5176\u4ed6\u4f18\u5316",id:"\u5176\u4ed6\u4f18\u5316",level:3}],s={toc:p};function u(n){let{components:e,...r}=n;return(0,a.kt)("wrapper",(0,i.Z)({},s,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u6700\u77ed\u8def\u5f84"},"\u6700\u77ed\u8def\u5f84"),(0,a.kt)("p",null,"\u53c2\u8003\uff1a",(0,a.kt)("a",{parentName:"p",href:"https://oi-wiki.org/graph/shortest-path/"},"https://oi-wiki.org/graph/shortest-path/")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"n")," \u4e3a\u56fe\u4e0a\u70b9\u7684\u6570\u76ee\uff0c"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"m")," \u4e3a\u56fe\u4e0a\u8fb9\u7684\u6570\u76ee "),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"start")," \u4e3a\u6700\u77ed\u8def\u5f84\u7684\u6e90\u70b9 "),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"D(u)")," \u4e3a\u6e90\u70b9",(0,a.kt)("inlineCode",{parentName:"p"},"start")," \u5230\u76ee\u6807\u70b9",(0,a.kt)("inlineCode",{parentName:"p"},"u"),"\u7684\u5b9e\u9645\u6700\u77ed\u8def\u5f84\u957f\u5ea6 "),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"dis(u)")," \u4e3a",(0,a.kt)("inlineCode",{parentName:"p"},"start"),"\u70b9\u5230",(0,a.kt)("inlineCode",{parentName:"p"},"u"),"\u7684\u300c\u4f30\u8ba1\u6700\u77ed\u8def\u5f84\u300d\uff0c\u4efb\u4f55\u65f6\u5019\u90fd\u6709",(0,a.kt)("inlineCode",{parentName:"p"},"dis(u)"),"\u5927\u4e8e\u7b49\u4e8e",(0,a.kt)("inlineCode",{parentName:"p"},"D(u)")),(0,a.kt)("p",null,"\u5f53\u6700\u77ed\u7b97\u6cd5\u7ed3\u675f\u65f6\uff0c\u5e94\u6709",(0,a.kt)("inlineCode",{parentName:"p"},"dis(u)"),"\u7b49\u4e8e",(0,a.kt)("inlineCode",{parentName:"p"},"D(u) ")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"w(u, v)")," \u4e3a",(0,a.kt)("inlineCode",{parentName:"p"},"(u, v)"),"\u8fd9\u4e00\u6761\u8fb9\u7684\u6743\u503c"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"\u6700\u77ed\u8def\u7b97\u6cd5"),(0,a.kt)("th",{parentName:"tr",align:null},"Dijkstra"),(0,a.kt)("th",{parentName:"tr",align:null},"Floyd"),(0,a.kt)("th",{parentName:"tr",align:null},"Bellman-Ford"),(0,a.kt)("th",{parentName:"tr",align:null},"Johnson"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"\u6700\u77ed\u8def\u7c7b\u578b"),(0,a.kt)("td",{parentName:"tr",align:null},"\u5355\u6e90\u6700\u77ed\u8def"),(0,a.kt)("td",{parentName:"tr",align:null},"\u6bcf\u5bf9\u7ed3\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def"),(0,a.kt)("td",{parentName:"tr",align:null},"\u5355\u6e90\u6700\u77ed\u8def"),(0,a.kt)("td",{parentName:"tr",align:null},"\u6bcf\u5bf9\u7ed3\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"\u8fb9\u6743\uff08\u6b63\u3001\u8d1f\uff09"),(0,a.kt)("td",{parentName:"tr",align:null},"\u975e\u8d1f\u6743\u56fe"),(0,a.kt)("td",{parentName:"tr",align:null},"\u4efb\u610f\u56fe"),(0,a.kt)("td",{parentName:"tr",align:null},"\u4efb\u610f\u56fe"),(0,a.kt)("td",{parentName:"tr",align:null},"\u4efb\u610f\u56fe")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"\u5b58\u5728\u8d1f\u73af(\u73af\u5185\u6743\u503c\u90fd\u4e3a\u8d1f)\uff0c\u6700\u77ed\u8def\u5f84\u4e0d\u5b58\u5728"),(0,a.kt)("td",{parentName:"tr",align:null},"\u4e0d\u80fd"),(0,a.kt)("td",{parentName:"tr",align:null},"\u4e0d\u80fd\uff0c\u53ef\u68c0\u6d4b\u8d1f\u73af"),(0,a.kt)("td",{parentName:"tr",align:null},"\u80fd\uff0c\u53ef\u68c0\u6d4b\u8d1f\u73af"),(0,a.kt)("td",{parentName:"tr",align:null},"\u80fd")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"\u63a8\u8350\u4f5c\u7528\u56fe\u7684\u5927\u5c0f"),(0,a.kt)("td",{parentName:"tr",align:null},"\u4e2d/\u5927"),(0,a.kt)("td",{parentName:"tr",align:null},"\u5c0f"),(0,a.kt)("td",{parentName:"tr",align:null},"\u5c0f/\u4e2d"),(0,a.kt)("td",{parentName:"tr",align:null},"\u4e2d/\u5927")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"\u65f6\u95f4\u590d\u6742\u5ea6"),(0,a.kt)("td",{parentName:"tr",align:null},"O(mlog m)"),(0,a.kt)("td",{parentName:"tr",align:null},"O(n^3)"),(0,a.kt)("td",{parentName:"tr",align:null},"O(nm)"),(0,a.kt)("td",{parentName:"tr",align:null},"O(nmlog m)")))),(0,a.kt)("h2",{id:"\u4e00dijkstra-\u7b97\u6cd5"},"\u4e00\u3001Dijkstra \u7b97\u6cd5"),(0,a.kt)("p",null,"\u662f\u4e00\u79cd\u6c42\u89e3 ",(0,a.kt)("strong",{parentName:"p"},"\u975e\u8d1f\u6743\u56fe")," \u4e0a\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\uff0c",(0,a.kt)("strong",{parentName:"p"},"\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u300c\u8d2a\u5fc3\u601d\u60f3\u300d")),(0,a.kt)("h3",{id:"\u6d41\u7a0b"},"\u6d41\u7a0b"),(0,a.kt)("p",null,"\u5c06\u7ed3\u70b9\u5206\u6210\u4e24\u4e2a\u96c6\u5408\uff1a",(0,a.kt)("strong",{parentName:"p"},"\u5df2\u786e\u5b9a\u6700\u77ed\u8def\u957f\u5ea6\u7684\u70b9\u96c6 ",(0,a.kt)("inlineCode",{parentName:"strong"},"visited")),"\uff0c",(0,a.kt)("strong",{parentName:"p"},"\u672a\u786e\u5b9a\u6700\u77ed\u8def\u957f\u5ea6\u7684\u70b9\u96c6 ",(0,a.kt)("inlineCode",{parentName:"strong"},"queue")),"\uff0c\u4e00\u5f00\u59cb\u6240\u6709\u7684\u70b9\u90fd\u5c5e\u4e8e ",(0,a.kt)("inlineCode",{parentName:"p"},"queue")," \u96c6\u5408"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"dis")," \u5217\u8868\u4e2d\u4fdd\u5b58\u4ece\u8d77\u70b9 ",(0,a.kt)("inlineCode",{parentName:"strong"},"start")," \u5230\u76ee\u6807\u70b9\u7684\u300c\u4f30\u8ba1\u6700\u77ed\u8ddd\u79bb\u300d"),"\uff0c\u5728\u7b97\u6cd5\u7ed3\u675f\u540e\u4f1a\u88ab\u66f4\u65b0\u4e3a\u300c\u5b9e\u9645\u6700\u77ed\u8def\u5f84\u300d"),(0,a.kt)("p",null,"\u521d\u59cb\u5316\uff1a\u8d77\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," \u8fdb\u5165 ",(0,a.kt)("inlineCode",{parentName:"p"},"visited"),"\uff0c\u5176\u4f59\u70b9\u8fdb\u5165 ",(0,a.kt)("inlineCode",{parentName:"p"},"queue"),"\uff0c\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"dis")," \u5217\u8868\u4e2d\u8bb0\u5f55 ",(0,a.kt)("inlineCode",{parentName:"p"},"dis[start]=0")),(0,a.kt)("p",null,"while ",(0,a.kt)("inlineCode",{parentName:"p"},"queue")," \u96c6\u5408\u4e0d\u4e3a\u7a7a\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u4ece ",(0,a.kt)("inlineCode",{parentName:"li"},"queue")," \u96c6\u5408\u4e2d\u9009\u53d6\u4e00\u4e2a\u6700\u77ed\u8def\u957f\u5ea6\u6700\u5c0f\u7684",(0,a.kt)("inlineCode",{parentName:"li"},"cur"),"\u7ed3\u70b9\uff0c\u79fb\u5230 ",(0,a.kt)("inlineCode",{parentName:"li"},"visited")," \u96c6\u5408\u4e2d"),(0,a.kt)("li",{parentName:"ol"},"\u5bf9",(0,a.kt)("inlineCode",{parentName:"li"},"cur"),"\u7ed3\u70b9\u7684\u6240\u6709\u51fa\u8fb9",(0,a.kt)("inlineCode",{parentName:"li"},"n_node"),"\u6267\u884c\u677e\u5f1b\u64cd\u4f5c\u3002\u66ff\u6362\u8fd9\u4e9b",(0,a.kt)("inlineCode",{parentName:"li"},"n_node"),"\u9876\u70b9\u5728dis\u4e2d\u7684\u503c\u4e3a\u300c\u5148\u4ece\u6e90\u70b9\u5230",(0,a.kt)("inlineCode",{parentName:"li"},"cur"),"\u70b9\u518d\u5230",(0,a.kt)("inlineCode",{parentName:"li"},"n_node"),"\u70b9\u300d")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u95ee\u9898\u4e00\uff1a",(0,a.kt)("a",{parentName:"strong",href:"https://www.zhihu.com/question/306895915"},"\u677e\u5f1b\u662f\u4ec0\u4e48\u610f\u601d?"))),(0,a.kt)("p",null,"\u53ef\u4ee5\u60f3\u50cf\u56fe\u662f\u7528\u6bdb\u7ebf\u548c\u73e0\u5b50\u7ec4\u6210\u7684\u7f51\u72b6\u7ed3\u6784\uff0c\u4e24\u9897\u73e0\u5b50\u4e4b\u95f4\u6bdb\u7ebf\u7684\u957f\u5ea6\u5373edge\u4e0a\u7684\u6743\u503c\uff0c\u4e00\u5f00\u59cb\u5341\u5206\u677e\u4e71\u7684\u653e\u5728\u684c\u4e0a\u3002"),(0,a.kt)("p",null,"\u73b0\u5728\u8981\u6c42SSSP(\u5355\u6e90\u6700\u77ed\u8def)\uff0c\u5f53\u53d1\u73b0\u4ece\u6e90\u70b9s\u5230\u5f53\u524d\u70b9u\u6709\u4e24\u6761\u8def\u5f84\uff0c",(0,a.kt)("strong",{parentName:"p"},"relax\u64cd\u4f5c\u53ef\u4ee5\u60f3\u8c61\u6210\u7528\u529b\u628as\u548cu\u4e24\u70b9\u5f80\u5916\u6491\u5f00"),"\u3002"),(0,a.kt)("p",null,"\u8fd9\u65f6\u5019\u4f9d\u7167\u751f\u6d3b\u7ecf\u9a8c\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u81ea\u7136\u7684\u770b\u5230s\u70b9\u548cu\u70b9\u4e4b\u95ee",(0,a.kt)("strong",{parentName:"p"},"\u8f83\u77ed\u7684\u90a3\u6761\u8fb9\u5904\u4e8e\u7d27\u7ef7\u72b6\u6001\uff0c\u800c\u8f83\u957f\u7684\u90a3\u6761\u8fb9\u5904\u4e8e\u677e\u5f1b\u72b6\u6001"),"\u3002"),(0,a.kt)("p",null,"\u56e0\u6b64\u975e\u5e38\u5f62\u8c61\u7684\u628a\u8fd9\u4e2a\u64cd\u4f5c\u79f0\u4e3a\u677e\u5f1b\u64cd\u4f5c\u3002"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"dijkstra\u7684\u677e\u5f1b\u64cd\u4f5c\u4e3a\uff1a"),"\n$$\ndis","[n","_","node]"," = min(dis","[n","_","node]",",\\ dis","[cur]"," + adj","[cur][n\\_node]",")\n$$\n",(0,a.kt)("img",{src:t(5045).Z,width:"840",height:"275"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u95ee\u9898\u4e8c\uff1a\u4e3a\u4ec0\u4ece ",(0,a.kt)("inlineCode",{parentName:"strong"},"queue")," \u96c6\u5408\u4e2d\u9009\u53d6\u4e00\u4e2a\u6700\u77ed\u8def\u957f\u5ea6\u6700\u5c0f\u7684\u7ed3\u70b9\uff0c\u5c31\u53ef\u4ee5\u786e\u5b9a\u4e3a\u6e90\u70b9\u5230\u8be5\u70b9\u5df2\u662f\u6700\u77ed\u7684\uff1f")),(0,a.kt)("p",null,"\u300c\u8d2a\u5fc3\u601d\u60f3\u300d\u5982\u679c\u6bcf\u6b21\u9009\u7684\u90fd\u662f\u6700\u77ed\u7684\u70b9\uff0c\u901a\u8fc7\u6700\u77ed\u70b9\u6765\u7ef4\u62a4\u540e\u9762\u7684\u70b9\u4e5f\u4e00\u5b9a\u662f\u6700\u77ed\u7684\uff08\u5b89\u6170\u81ea\u5df1\u7684\u89e3\u7b54\uff09"),(0,a.kt)("h3",{id:"\u5b9e\u73b0\u4e00\u4f18\u5148\u961f\u5217\u5e38\u7528"},"\u5b9e\u73b0\u4e00\uff1a\u4f18\u5148\u961f\u5217\uff08\u5e38\u7528\uff09"),(0,a.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6 \uff1a",(0,a.kt)("inlineCode",{parentName:"p"},"O(mlog(n+n)")),(0,a.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,a.kt)("inlineCode",{parentName:"p"},"O(n^2)")),(0,a.kt)("h4",{id:"\u90bb\u63a5\u77e9\u9635\u5199\u6cd5"},"\u90bb\u63a5\u77e9\u9635\u5199\u6cd5"),(0,a.kt)("p",null,"c++:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\n// \u751f\u6210\u90bb\u63a5\u77e9\u9635\nvector<vector<int>> gen_adj(int n, vector<vector<int>> &graph) {\n    vector<vector<int>> adj(n, vector<int>(n, INT_MAX));\n    for (auto &g : graph) {\n        adj[g[0]][g[1]] = g[2];\n    }\n    for (int i = 0; i < n; i++) {\n        adj[i][i] = 0;\n    }\n    return adj;\n}\n\nvector<int> dijkstra(int start, vector<vector<int>> &adj) {\n    int n = adj.size();\n    vector<bool> visited(n, false);\n    vector<int> dis(n, INT_MAX);\n\n    dis[start] = 0;\n    auto cmp = [&](const auto &a, const auto &b) {\n        return a.first > b.first;\n    };\n    // first:\u5b58\u6e90\u70b9\u5230\u8be5\u70b9\u7684\u9884\u4f30\u6700\u77ed\u8ddd\u79bb\uff08\u4f5c\u4e3a\u4f18\u5148\u7ea7\uff09, second:\u5b58\u5230\u8fbe\u70b9\n    priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(cmp)> smallQue(cmp);\n    // \u8d77\u70b9\u5148\u5165\u961f\n    smallQue.push({dis[start], start});\n\n    while (!smallQue.empty()) {\n        /*\n        \u5c0f\u6839\u5806pop\u51fa\u7684\u5806\u9876\uff0c\u5c31\u662f\u6e90\u70b9s\u5230\u8be5\u70b9\u7684\u6700\u77ed\u8def\u5f84\n        \u5df2\u7ecf\u786e\u5b9a\u6700\u77ed\u8ddd\u79bb\u7684\u70b9\uff0c\u4e0b\u6b21\u4e0d\u7528\u518d\u8d70\u4e86\n        */\n        auto [d, cur] = smallQue.top();\n        smallQue.pop();\n\n        visited[cur] = true;  // \u6807\u8bb0\u8be5\u70b9\u6709\u4e86\u6700\u77ed\u8ddd\u79bb\n\n        /* \u677e\u5f1b\u64cd\u4f5c:\n        \u770b\u770b\u901a\u8fc7\u8be5\u9876\u70b9\u5230\u8fbe\u5176\u4ed6\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u662f\u5426\u6bd4\u6e90\u70b9\u76f4\u63a5\u5230\u8fbe\u77ed\n        \u5982\u679c\u662f\uff0c\u90a3\u4e48\u5c31\u66f4\u65b0\u8fd9\u4e9b\u9876\u70b9\u5728dis\u4e2d\u7684\u503c\n        \u8fd9\u4e00\u6b65\u7b97\u51fa\u6765\u7684\u53ef\u80fd\u4e0d\u662f\u6700\u77ed\u7684\uff0c\u4f46\u80af\u5b9a\u6bd4\u4ee5\u524d\u77ed\n        */\n        for (int next = 0; next < n; next++) {\n            if (adj[cur][next] == INT_MAX) continue;  // \u8fbe\u5230\u4e0d\u4e86\n            if (dis[cur] + adj[cur][next] < dis[next]) {\n                dis[next] = dis[cur] + adj[cur][next];\n                smallQue.push({dis[next], next});\n            }\n        }\n    }\n\n    return dis;\n}\n\nint main() {\n    int n = 6;\n    vector<vector<int>> graph = {\n        {0, 1, 1}, {0, 2, 12},\n        {1, 2, 9}, {1, 3, 3},\n        {2, 4, 5},\n        {3, 2, 4}, {3, 4, 13}, {3, 5, 15},\n        {4, 5, 4}\n    };\n\n    vector<vector<int>> adj = gen_adj(n, graph);\n\n    int start = 0;\n    vector<int> dis = dijkstra(start, adj);\n    // 0 1 8 4 13 17\n\n    return 0;\n}\n")),(0,a.kt)("p",null,"python:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import heapq\n\ninf = float("inf")\nadj = [\n    [0, 1, 12, inf, inf, inf],\n    [inf, 0, 9, 3, inf, inf],\n    [inf, inf, 0, inf, 5, inf],\n    [inf, inf, 4, 0, 13, 15],\n    [inf, inf, inf, inf, 0, 4],\n    [inf, inf, inf, inf, inf, 0]\n]\n\n\ndef dijkstra(start, adj):\n    node_sz = len(adj)\n    visited = [False for _ in range(node_sz)]\n    dis = [float("inf") for _ in range(node_sz)]\n\n    dis[start] = 0\n    queue = []\n\n    heapq.heappush(queue, (dis[start], start))\n\n    while queue:\n        _, cur = heapq.heappop(queue)\n        if visited[cur]:\n            continue\n\n        visited[cur] = True\n\n        for n_node in range(node_sz):\n            if dis[cur] + adj[cur][n_node] < dis[n_node]:\n                dis[n_node] = dis[cur] + adj[cur][n_node]\n                heapq.heappush(queue, (dis[n_node], n_node))\n\n    print(dis)  # [0, 1, 8, 4, 13, 17]\n\n\ndijkstra(0, adj)\n')),(0,a.kt)("h4",{id:"\u90bb\u63a5\u8868\u5199\u6cd5"},"\u90bb\u63a5\u8868\u5199\u6cd5"),(0,a.kt)("p",null,"c++:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\n// \u751f\u6210\u90bb\u63a5\u8868\nvector<vector<pair<int, int>>> gen_adj(int n, vector<vector<int>> &graph) {\n    vector<vector<pair<int, int>>> adj(n);\n    for (auto &g : graph) {\n        adj[g[0]].push_back({g[1], g[2]});\n    }\n    for (int i = 0; i < n; i++) {\n        adj[i].push_back({i, 0});\n    }\n    return adj;\n}\n\nvector<int> dijkstra(int start, vector<vector<pair<int, int>>> &adj) {\n    int n = adj.size();\n    vector<bool> visited(n, false);\n    vector<int> dis(n, INT_MAX);\n\n    dis[start] = 0;\n    auto cmp = [&](const auto &a, const auto &b) {\n        return a.first > b.first;\n    };\n\n    priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(cmp)> smallQue(cmp);\n\n    smallQue.push({dis[start], start});\n\n    while (!smallQue.empty()) {\n        auto [d, cur] = smallQue.top();\n        smallQue.pop();\n\n        visited[cur] = true;\n\n        for (auto &[next, cost] : adj[cur]) {\n            if (dis[cur] + cost < dis[next]) {\n                dis[next] = dis[cur] + cost;\n                smallQue.push({dis[next], next});\n            }\n        }\n    }\n\n    return dis;\n}\n\nint main() {\n    int n = 6;\n    vector<vector<int>> graph = {\n        {0, 1, 1}, {0, 2, 12},\n        {1, 2, 9}, {1, 3, 3},\n        {2, 4, 5},\n        {3, 2, 4}, {3, 4, 13}, {3, 5, 15},\n        {4, 5, 4}\n    };\n\n    vector<vector<pair<int, int>>> adj = gen_adj(n, graph);\n\n    int start = 0;\n    vector<int> dis = dijkstra(start, adj);\n    // 0 1 8 4 13 17\n\n    return 0;\n}\n")),(0,a.kt)("p",null,"python:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import heapq\n\n# \u90bb\u63a5\u8868\uff0c(\u5230\u8fbe\u70b9\uff0c\u6743\u503c)\nadj = [\n    [(0, 0), (1, 1), (2, 12)],\n    [(1, 0), (2, 9), (3, 3)],\n    [(2, 0), (4, 5)],\n    [(2, 4), (3, 0), (4, 13), (5, 15)],\n    [(4, 0), (5, 4)],\n    [(5, 0)]\n]\n\ndef dijkstra(start, adj):\n    node_sz = len(adj)\n    visited = [False for _ in range(node_sz)]\n    dis = [float("inf") for _ in range(node_sz)]\n\n    dis[start] = 0\n    queue = []\n    heapq.heappush(queue, (dis[start], start)) \n\n    while queue:\n        _, cur = heapq.heappop(queue)\n        if visited[cur]:\n            continue\n        \n        visited[cur] = True\n\n        for n_node, val in adj[cur]:\n            if dis[cur] + val < dis[n_node]:\n                dis[n_node] = dis[cur] + val\n                heapq.heappush(queue, (dis[n_node], n_node))\n    \n    print(dis) # [0, 1, 8, 4, 13, 17]\n')),(0,a.kt)("h3",{id:"\u5b9e\u73b0\u4e8c\u66b4\u529b\u6cd5"},"\u5b9e\u73b0\u4e8c\uff1a\u66b4\u529b\u6cd5"),(0,a.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,a.kt)("inlineCode",{parentName:"p"},"O(m^2)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def dijkstra(start, adj):\n    node_sz = len(adj)\n    visited = [False if n != start else True for n in range(node_sz)]\n    queue = [n for n in range(node_sz) if n != start]\n    dis = [adj[start][n] if n != start else 0 for n in range(node_sz)]\n    """\n    visited: [True, False, False, False, False, False] \u5728\u8fd9\u79cd\u5199\u6cd5\u4e2d\u53ef\u4ee5\u4e0d\u7528visited\n    queue:   [1, 2, 3, 4, 5]\n    dis:     [0, 1, 12, inf, inf, inf]\n    """\n\n    while queue:\n        """\n        \u4ece queue \u96c6\u5408\u4e2d\u9009\u53d6\u4e00\u4e2a\u6700\u77ed\u8def\u957f\u5ea6\u6700\u5c0f\u7684\u7ed3\u70b9\uff0c\u8fd9\u4e9b\u6743\u503c\u4ecedis\u6570\u7ec4\u4e2d\u627e\n        \u8d2a\u5fc3\u7b97\u6cd5\uff0c\u8be5\u503c\u5c31\u662f\u6e90\u70b9s\u5230\u8be5\u503c\u5bf9\u5e94\u70b9\u7684\u6700\u77ed\u8def\u5f84\n        """\n        idx = queue[0] # \u968f\u4fbf\u5728 queue \u4e2d\u627e\u4e2a\u70b9\n        for i in queue:\n            if dis[i] < dis[idx]:\n                idx = i\n        \n        queue.remove(idx)\n        visited[idx] = True\n\n        """\n        \u677e\u5f1b\u64cd\u4f5c:\n        \u9700\u8981\u770b\u770b\u65b0\u52a0\u5165\u7684\u9876\u70b9\u662f\u5426\u53ef\u4ee5\u5230\u8fbe\u5176\u4ed6\u9876\u70b9\uff0c\n        \u5e76\u4e14\u770b\u770b\u901a\u8fc7\u8be5\u9876\u70b9\u5230\u8fbe\u5176\u4ed6\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u662f\u5426\u6bd4\u6e90\u70b9\u76f4\u63a5\u5230\u8fbe\u77ed\n        \u5982\u679c\u662f\uff0c\u90a3\u4e48\u5c31\u66ff\u6362\u8fd9\u4e9b\u9876\u70b9\u5728dis\u4e2d\u7684\u503c\n        """\n        for n_node in queue:\n            if dis[idx] + adj[idx][n_node] < dis[n_node]:\n                dis[n_node] = dis[idx] + adj[idx][n_node]\n    \n    print(dis) # [0, 1, 8, 4, 13, 17]\n')),(0,a.kt)("h2",{id:"\u4e8cfloyd-\u7b97\u6cd5"},"\u4e8c\u3001Floyd \u7b97\u6cd5"),(0,a.kt)("p",null,"\u5f17\u6d1b\u4f0a\u5fb7\u7b97\u6cd5 \uff0c\u8fb9\u6743\u53ef\u6b63\u53ef\u8d1f\uff0c\u8fd0\u884c\u4e00\u6b21\u7b97\u6cd5\u5373\u53ef\u6c42\u5f97\u300c\u4efb\u610f\u4e24\u70b9\u95f4\u6700\u77ed\u8def\u5f84\u300d\uff0c",(0,a.kt)("strong",{parentName:"p"},"\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u300c\u52a8\u6001\u89c4\u5212\u300d")),(0,a.kt)("h3",{id:"\u6d41\u7a0b-1"},"\u6d41\u7a0b"),(0,a.kt)("p",null,"\u4efb\u610f\u8282\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"i")," \u5230 ",(0,a.kt)("inlineCode",{parentName:"p"},"j")," \u7684\u6700\u77ed\u8def\u5f84\u4e24\u79cd\u53ef\u80fd\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u76f4\u63a5\u4ece\u8d77\u70b9 ",(0,a.kt)("inlineCode",{parentName:"li"},"start")," \u5230\u7ec8\u70b9 ",(0,a.kt)("inlineCode",{parentName:"li"},"end")),(0,a.kt)("li",{parentName:"ol"},"\u4ece\u8d77\u70b9 ",(0,a.kt)("inlineCode",{parentName:"li"},"start")," \u7ecf\u8fc7\u4e2d\u8f6c\u70b9 ",(0,a.kt)("inlineCode",{parentName:"li"},"mid")," \u5230\u8fbe\u7ec8\u70b9 ",(0,a.kt)("inlineCode",{parentName:"li"},"end"))),(0,a.kt)("p",null,"\u57fa\u672c\u6d41\u7a0b\u4e3a\u4e09\u5c42\u5faa\u73af\uff08\u5faa\u73af\u7684\u5d4c\u5957\u987a\u5e8f\u662f\u56fa\u5b9a\u7684\uff09\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u7b2c\u4e00\u5c42\uff1a\u679a\u4e3e\u4e2d\u8f6c\u70b9 ",(0,a.kt)("inlineCode",{parentName:"li"},"mid")),(0,a.kt)("li",{parentName:"ol"},"\u7b2c\u4e8c\u5c42\uff1a\u679a\u4e3e\u8d77\u70b9 ",(0,a.kt)("inlineCode",{parentName:"li"},"s")),(0,a.kt)("li",{parentName:"ol"},"\u7b2c\u4e09\u5c42\uff1a\u679a\u4e3e\u7ec8\u70b9 ",(0,a.kt)("inlineCode",{parentName:"li"},"e")," \uff0c\u8fdb\u884c\u300c",(0,a.kt)("strong",{parentName:"li"},"\u677e\u5f1b\u64cd\u4f5c"),"\u300d")),(0,a.kt)("p",null,"\u6bcf\u6b21\u7b2c\u4e00\u5c42\u5faa\u73af\u7ed3\u675f\u540e\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"dis")," \u4e2d\u4fdd\u5b58\u4e86\u4ece ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," \u5230 ",(0,a.kt)("inlineCode",{parentName:"p"},"end")," \u7684\u8def\u5f84\u4e2d\u4ee5 ",(0,a.kt)("inlineCode",{parentName:"p"},"mid")," \u4e3a\u4e2d\u8f6c\u70b9\u7684\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"start")," \u5230 ",(0,a.kt)("inlineCode",{parentName:"p"},"end")," \u53ef\u80fd\u7684\u6700\u77ed\u8def\u5f84\u3002"),(0,a.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,a.kt)("inlineCode",{parentName:"p"},"O(n^3)")),(0,a.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,a.kt)("inlineCode",{parentName:"p"},"O(n^2)")),(0,a.kt)("h3",{id:"\u5b9e\u73b0"},"\u5b9e\u73b0"),(0,a.kt)("p",null,"\u7528\u300c\u90bb\u63a5\u77e9\u9635\u300d\u5b9e\u73b0\u4f1a\u65b9\u4fbf"),(0,a.kt)("p",null,"python:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'inf = float("inf")\nadj = [\n    [0, 1, 12, inf, inf, inf],\n    [inf, 0, 9, 3, inf, inf],\n    [inf, inf, 0, inf, 5, inf],\n    [inf, inf, 4, 0, 13, 15],\n    [inf, inf, inf, inf, 0, 4],\n    [inf, inf, inf, inf, inf, 0]\n]\ndef floyd(adj):\n    node_sz = len(adj)\n    dis = [a[:] for a in adj] # \u76f4\u63a5\u7528adj\u5f53\u4f5cdis\u6765\u7528\u4e5f\u53ef\u4ee5\n    for mid in range(0, node_sz):\n        for s in range(0, node_sz):\n            for e in range(0, node_sz):\n                dis[s][e] = min(dis[s][e], dis[s][mid] + dis[mid][e])\n    print(dis)\n"""\n[\n    [0, 1, 8, 4, 13, 17], \n    [inf, 0, 7, 3, 12, 16], \n    [inf, inf, 0, inf, 5, 9], \n    [inf, inf, 4, 0, 9, 13], \n    [inf, inf, inf, inf, 0, 4], \n    [inf, inf, inf, inf, inf, 0]\n]\n"""\n')),(0,a.kt)("p",null,"c++:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},'#include <climits>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<vector<int>> floyd(vector<vector<int>> &adj) {\n    int n = adj.size();\n    vector<vector<int>> dis = adj;\n    for (int mid = 0; mid < n; mid++) {\n        for (int s = 0; s < n; s++) {\n            for (int e = 0; e < n; e++) {\n                if (dis[s][mid] == INT_MAX || dis[mid][e] == INT_MAX) continue;\n                dis[s][e] = min(dis[s][e], dis[s][mid] + dis[mid][e]);\n            }\n        }\n    }\n    return dis;\n}\n\nint main() {\n    vector<vector<int>> adj = {\n        {0, 1, 12, INT_MAX, INT_MAX, INT_MAX},\n        {INT_MAX, 0, 9, 3, INT_MAX, INT_MAX},\n        {INT_MAX, INT_MAX, 0, INT_MAX, 5, INT_MAX},\n        {INT_MAX, INT_MAX, 4, 0, 13, 15},\n        {INT_MAX, INT_MAX, INT_MAX, INT_MAX, 0, 4},\n        {INT_MAX, INT_MAX, INT_MAX, INT_MAX, INT_MAX, 0},\n    };\n    vector<vector<int>> dis = floyd(adj);\n    for (auto a : dis) {\n        for (auto b : a) cout << b << " ";\n        cout << endl;\n    }\n    return 0;\n}\n')),(0,a.kt)("h2",{id:"\u4e09bellman-ford-\u7b97\u6cd5"},"\u4e09\u3001Bellman-Ford \u7b97\u6cd5"),(0,a.kt)("p",null,"Bellman-Ford \u7b97\u6cd5\u662f\u4e00\u79cd\u57fa\u4e8e\u677e\u5f1b\uff08relax\uff09\u64cd\u4f5c\u7684\u6700\u77ed\u8def\u7b97\u6cd5\uff0c\u53ef\u4ee5\u6c42\u51fa\u6709\u8d1f\u6743\u7684\u56fe\u7684\u6700\u77ed\u8def\uff0c\u5e76\u53ef\u4ee5\u5bf9\u6700\u77ed\u8def\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\u8fdb\u884c\u5224\u65ad\u3002"),(0,a.kt)("p",null,"\u5728\u56fd\u5185 OI \u754c\uff0c\u4f60\u53ef\u80fd\u542c\u8bf4\u8fc7\u7684\u201cSPFA\u201d\uff0c\u5c31\u662f Bellman-Ford \u7b97\u6cd5\u7684\u4e00\u79cd\u5b9e\u73b0\u3002"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,a.kt)("inlineCode",{parentName:"li"},"O(nm)")),(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,a.kt)("inlineCode",{parentName:"li"},"O(m)"))),(0,a.kt)("h3",{id:"\u6d41\u7a0b-2"},"\u6d41\u7a0b"),(0,a.kt)("p",null,"Bellman-Ford \u7b97\u6cd5\u8981\u7528\u5230\u7684\u677e\u5f1b\u64cd\u4f5c\uff08Djikstra \u7b97\u6cd5\u4e5f\u4f1a\u7528\u5230\uff09,\u5bf9\u4e8e\u8fb9 ",(0,a.kt)("inlineCode",{parentName:"p"},"(u, v)"),"\uff0c\u677e\u5f1b\u64cd\u4f5c\u5bf9\u5e94\u4e0b\u9762\u7684\u5f0f\u5b50\n$$\ndis(v) = min(dis(v), \\ dis(u) + w(u,v))\n$$\n\u542b\u4e49\uff1a\u6211\u4eec\u5c1d\u8bd5\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"s->u->v")," \uff08\u5176\u4e2d ",(0,a.kt)("inlineCode",{parentName:"p"},"s->u")," \u7684\u8def\u5f84\u53d6\u6700\u77ed\u8def\u5f84\uff09\u8fd9\u6761\u8def\u5f84\u53bb\u66f4\u65b0 ",(0,a.kt)("inlineCode",{parentName:"p"},"v")," \u70b9\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\uff0c\u5982\u679c\u8fd9\u6761\u8def\u5f84\u66f4\u4f18\uff0c\u5c31\u66f4\u65b0\u3002"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Bellman-Ford \u7b97\u6cd5\u6240\u505a\u7684\uff0c\u5c31\u662f\u4e0d\u65ad\u5c1d\u8bd5\u5bf9\u56fe\u4e0a\u6bcf\u4e00\u6761\u8fb9\u8fdb\u884c\u677e\u5f1b\u3002\u6211\u4eec\u6bcf\u8fdb\u884c\u4e00\u8f6e\u5faa\u73af\uff0c\u5c31\u5bf9\u56fe\u4e0a\u6240\u6709\u7684\u8fb9\u90fd\u5c1d\u8bd5\u8fdb\u884c\u4e00\u6b21\u677e\u5f1b\u64cd\u4f5c\uff0c\u5f53\u4e00\u6b21\u5faa\u73af\u4e2d\u6ca1\u6709\u6210\u529f\u7684\u677e\u5f1b\u64cd\u4f5c\u65f6\uff0c\u7b97\u6cd5\u505c\u6b62"),"\u3002"),(0,a.kt)("p",null,"\u6bcf\u6b21\u5faa\u73af\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"O(m)")," \u7684\uff0c\u90a3\u4e48\u6700\u591a\u4f1a\u5faa\u73af\u591a\u5c11\u6b21\u5462\uff1f"),(0,a.kt)("p",null,"\u5728\u6700\u77ed\u8def\u5b58\u5728\u7684\u60c5\u51b5\u4e0b\uff0c\u7531\u4e8e\u4e00\u6b21\u677e\u5f1b\u64cd\u4f5c\u4f1a\u4f7f\u6700\u77ed\u8def\u7684\u8fb9\u6570\u81f3\u5c11 ",(0,a.kt)("inlineCode",{parentName:"p"},"+1"),"\uff0c\u800c\u6700\u77ed\u8def\u7684\u8fb9\u6570\u6700\u591a\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"n-1"),"\uff0c\u56e0\u6b64\u6574\u4e2a\u7b97\u6cd5\u6700\u591a\u6267\u884c ",(0,a.kt)("inlineCode",{parentName:"p"},"n-1")," \u8f6e\u677e\u5f1b\u64cd\u4f5c\u3002\u6545\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"O(nm)"),"\u3002"),(0,a.kt)("p",null,"\u4f46\u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\uff0c\u5982\u679c\u4ece ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," \u70b9\u51fa\u53d1\uff0c\u62b5\u8fbe\u4e00\u4e2a\u8d1f\u73af\u65f6\uff0c\u677e\u5f1b\u64cd\u4f5c\u4f1a\u65e0\u4f11\u6b62\u5730\u8fdb\u884c\u4e0b\u53bb\u3002\u6ce8\u610f\u5230\u524d\u9762\u7684\u8bba\u8bc1\u4e2d\u5df2\u7ecf\u8bf4\u660e\u4e86\uff0c\u5bf9\u4e8e\u6700\u77ed\u8def\u5b58\u5728\u7684\u56fe\uff0c\u677e\u5f1b\u64cd\u4f5c\u6700\u591a\u53ea\u4f1a\u6267\u884c ",(0,a.kt)("inlineCode",{parentName:"p"},"n-1")," \u8f6e\uff0c\u56e0\u6b64\u5982\u679c\u7b2c ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," \u8f6e\u5faa\u73af\u65f6\u4ecd\u7136\u5b58\u5728\u80fd\u677e\u5f1b\u7684\u8fb9\uff0c\u8bf4\u660e\u4ece ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," \u70b9\u51fa\u53d1\uff0c\u80fd\u591f\u62b5\u8fbe\u4e00\u4e2a\u8d1f\u73af\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4ee5 ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," \u70b9\u4e3a\u6e90\u70b9\u8dd1 Bellman-Ford \u7b97\u6cd5\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u7ed9\u51fa\u5b58\u5728\u8d1f\u73af\u7684\u7ed3\u679c\uff0c\u53ea\u80fd\u8bf4\u660e\u4ece ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," \u70b9\u51fa\u53d1\u4e0d\u80fd\u62b5\u8fbe\u4e00\u4e2a\u8d1f\u73af\uff0c\u800c\u4e0d\u80fd\u8bf4\u660e\u56fe\u4e0a\u4e0d\u5b58\u5728\u8d1f\u73af"),(0,a.kt)("p",{parentName:"blockquote"},"\u56e0\u6b64\u5982\u679c\u9700\u8981\u5224\u65ad\u6574\u4e2a\u56fe\u4e0a\u662f\u5426\u5b58\u5728\u8d1f\u73af\uff0c\u6700\u4e25\u8c28\u7684\u505a\u6cd5\u662f\u5efa\u7acb\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\uff0c\u5411\u56fe\u4e0a\u6bcf\u4e2a\u8282\u70b9\u8fde\u4e00\u6761\u6743\u503c\u4e3a 0 \u7684\u8fb9\uff0c\u7136\u540e\u4ee5\u8d85\u7ea7\u6e90\u70b9\u4e3a\u8d77\u70b9\u6267\u884c Bellman-Ford \u7b97\u6cd5\u3002")),(0,a.kt)("h3",{id:"\u7c7b\u56fe\u5b9e\u73b0"},"\u7c7b\u56fe\u5b9e\u73b0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'graph = [\n    [0, 1, 1], [0, 2, 12],\n    [1, 2, 9], [1, 3, 3],\n    [2, 4, 5],\n    [3, 2, 4], [3, 4, 13], [3, 5, 15],\n    [4, 5, 4]\n]\n\n\nclass Edge:\n    def __init__(self, s, e, v):\n        self.s = s\n        self.e = e\n        self.w = w\n\n\nedges = []\nfor s, e, w in graph:\n    edges.append(Edge(s, e, w))\n\n\ndef bellmanFord(edges, start, node_sz):\n    dis = [float("inf") for _ in range(node_sz)]\n    dis[start] = 0\n    flag = False\n\n    for _ in range(node_sz):\n        pre = dis[:]  # \u6bcf\u6b21\u90fd\u4f7f\u7528\u4e0a\u4e00\u6b21\u8fed\u4ee3\u7684\u7ed3\u679c\uff0c\u6267\u884c\u677e\u5f1b\u64cd\u4f5c\n        flag = False\n\n        for edge in edges:\n            if pre[edge.s]+edge.w < dis[edge.e]:\n                dis[edge.e] = pre[edge.s]+edge.w\n                flag = True\n\n        # \u82e5\u68c0\u6d4b\u4e00\u8f6e\u540e\uff0c\u6ca1\u6709\u53ef\u4ee5\u677e\u5f1b\u7684\u8fb9\u65f6\u5c31\u505c\u6b62\u7b97\u6cd5\n        if flag == False:\n            break\n\n    print(dis)  # [0, 1, 8, 4, 13, 17]\n\n    # \u7b2c n \u8f6e\u5faa\u73af\u4ecd\u7136\u53ef\u4ee5\u677e\u5f1b\u65f6\u8bf4\u660e s \u70b9\u53ef\u4ee5\u62b5\u8fbe\u4e00\u4e2a\u8d1f\u73af\uff0cflag=True \u8868\u793a\u6709\u8d1f\u73af\n    return flag\n\n\nbellmanFord(edges, 0, 6)\n')),(0,a.kt)("h3",{id:"\u961f\u5217\u4f18\u5316spfa"},"\u961f\u5217\u4f18\u5316\uff1aSPFA"),(0,a.kt)("p",null,"\u5373 Shortest Path Faster Algorithm\u3002"),(0,a.kt)("p",null,"\u5f88\u591a\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u90a3\u4e48\u591a\u65e0\u7528\u7684\u677e\u5f1b\u64cd\u4f5c\u3002\u5f88\u663e\u7136\uff0c",(0,a.kt)("strong",{parentName:"p"},"\u53ea\u6709\u4e0a\u4e00\u6b21\u88ab\u677e\u5f1b\u7684\u7ed3\u70b9\uff0c\u6240\u8fde\u63a5\u7684\u8fb9\uff0c\u624d\u6709\u53ef\u80fd\u5f15\u8d77\u4e0b\u4e00\u6b21\u7684\u677e\u5f1b\u64cd\u4f5c"),"\u3002"),(0,a.kt)("p",null,"\u90a3\u4e48\u6211\u4eec",(0,a.kt)("strong",{parentName:"p"},"\u7528\u961f\u5217\u6765\u7ef4\u62a4\u201c\u54ea\u4e9b\u7ed3\u70b9\u53ef\u80fd\u4f1a\u5f15\u8d77\u677e\u5f1b\u64cd\u4f5c\u201d"),"\uff0c\u5c31\u80fd\u53ea\u8bbf\u95ee\u5fc5\u8981\u7684\u8fb9\u4e86\u3002"),(0,a.kt)("p",null,"SPFA \u4e5f\u53ef\u4ee5\u7528\u4e8e\u5224\u65ad ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," \u70b9\u662f\u5426\u80fd\u62b5\u8fbe\u4e00\u4e2a\u8d1f\u73af\uff0c\u53ea\u9700\u8bb0\u5f55\u6700\u77ed\u8def\u7ecf\u8fc7\u4e86\u591a\u5c11\u6761\u8fb9\uff0c\u5f53\u7ecf\u8fc7\u4e86\u81f3\u5c11 ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," \u6761\u8fb9\u65f6\uff0c\u8bf4\u660e ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," \u70b9\u53ef\u4ee5\u62b5\u8fbe\u4e00\u4e2a\u8d1f\u73af\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# \u90bb\u63a5\u8868\uff0c(\u5230\u8fbe\u70b9\uff0c\u6743\u503c)\nadj = [\n    [(0, 0), (1, 1), (2, 12)],\n    [(1, 0), (2, 9), (3, 3)],\n    [(2, 0), (4, 5)],\n    [(2, 4), (3, 0), (4, 13), (5, 15)],\n    [(4, 0), (5, 4)],\n    [(5, 0)]\n]\n\n\ndef bellmanFord(adj, start):\n    node_sz = len(adj)\n    dis = [float("inf") for _ in range(node_sz)]\n    dis[start] = 0\n    visited = [False for _ in range(node_sz)]\n    visited[start] = True\n    queue = [start]\n\n    while queue:\n        # \u6bcf\u6b21\u4ece\u300c\u53cc\u7aef\u961f\u5217\u300d\u4e2d\u53d6\u51fa\uff0c\u5e76\u6807\u8bb0\u300c\u672a\u5165\u961f\u300d\n        cur = queue.pop(0)\n        visited[cur] = False\n        # \u5c1d\u8bd5\u4f7f\u7528\u8be5\u70b9 cur \u505a\u4e2d\u8f6c\u70b9\uff0c\u66f4\u65b0\u5230\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\n        # \u5982\u679c\u66f4\u65b0\u7684\u70b9\uff0c\u672c\u8eab\u300c\u672a\u5165\u961f\u300d\u5219\u52a0\u5165\u961f\u5217\u4e2d\uff0c\u5e76\u6807\u8bb0\u300c\u5df2\u5165\u961f\u300d\n        for n_node, w in adj[cur]:\n            if dis[cur] + w < dis[n_node]:\n                dis[n_node] = dis[cur] + w\n                if visited[n_node]:\n                    continue\n                queue.append(n_node)\n                visited[n_node] = True\n    print(dis)  # [0, 1, 8, 4, 13, 17]\n\n\nbellmanFord(adj, 0)\n')),(0,a.kt)("p",null,"\u867d\u7136\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b SPFA \u8dd1\u5f97\u5f88\u5feb\uff0c\u4f46\u5176\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"O(nm)"),"\uff0c\u5c06\u5176\u5361\u5230\u8fd9\u4e2a\u590d\u6742\u5ea6\u4e5f\u662f\u4e0d\u96be\u7684\uff0c\u6240\u4ee5\u8003\u8bd5\u65f6\u8981\u8c28\u614e\u4f7f\u7528\uff08\u5728\u6ca1\u6709\u8d1f\u6743\u8fb9\u65f6\u6700\u597d\u4f7f\u7528 Dijkstra \u7b97\u6cd5\uff0c\u5728\u6709\u8d1f\u6743\u8fb9\u4e14\u9898\u76ee\u4e2d\u7684\u56fe\u6ca1\u6709\u7279\u6b8a\u6027\u8d28\u65f6\uff0c\u82e5 SPFA \u662f\u6807\u7b97\u7684\u4e00\u90e8\u5206\uff0c\u9898\u76ee\u4e0d\u5e94\u5f53\u7ed9\u51fa Bellman-Ford \u7b97\u6cd5\u65e0\u6cd5\u901a\u8fc7\u7684\u6570\u636e\u8303\u56f4\uff09\u3002"),(0,a.kt)("h3",{id:"\u5176\u4ed6\u4f18\u5316"},"\u5176\u4ed6\u4f18\u5316"),(0,a.kt)("p",null,"\u9664\u4e86\u961f\u5217\u4f18\u5316\uff08SPFA\uff09\u4e4b\u5916\uff0cBellman-Ford \u8fd8\u6709\u5176\u4ed6\u5f62\u5f0f\u7684\u4f18\u5316\uff0c\u8fd9\u4e9b\u4f18\u5316\u5728\u90e8\u5206\u56fe\u4e0a\u6548\u679c\u660e\u663e\uff0c\u4f46\u5728\u67d0\u4e9b\u7279\u6b8a\u56fe\u4e0a\uff0c\u6700\u574f\u590d\u6742\u5ea6\u53ef\u80fd\u8fbe\u5230\u6307\u6570\u7ea7\u3002"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5806\u4f18\u5316\uff1a\u5c06\u961f\u5217\u6362\u6210\u5806\uff0c\u4e0e Dijkstra \u7684\u533a\u522b\u662f\u5141\u8bb8\u4e00\u4e2a\u70b9\u591a\u6b21\u5165\u961f\u3002\u5728\u6709\u8d1f\u6743\u8fb9\u7684\u56fe\u53ef\u80fd\u88ab\u5361\u6210\u6307\u6570\u7ea7\u590d\u6742\u5ea6\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u6808\u4f18\u5316\uff1a\u5c06\u961f\u5217\u6362\u6210\u6808\uff08\u5373\u5c06\u539f\u6765\u7684 BFS \u8fc7\u7a0b\u53d8\u6210 DFS\uff09\uff0c\u5728\u5bfb\u627e\u8d1f\u73af\u65f6\u53ef\u80fd\u5177\u6709\u66f4\u9ad8\u6548\u7387\uff0c\u4f46\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u7136\u4e3a\u6307\u6570\u7ea7\u3002"),(0,a.kt)("li",{parentName:"ul"},"LLL \u4f18\u5316\uff1a\u5c06\u666e\u901a\u961f\u5217\u6362\u6210\u53cc\u7aef\u961f\u5217\uff0c\u6bcf\u6b21\u5c06\u5165\u961f\u7ed3\u70b9\u8ddd\u79bb\u548c\u961f\u5185\u8ddd\u79bb\u5e73\u5747\u503c\u6bd4\u8f83\uff0c\u5982\u679c\u66f4\u5927\u5219\u63d2\u5165\u81f3\u961f\u5c3e\uff0c\u5426\u5219\u63d2\u5165\u961f\u9996\u3002"),(0,a.kt)("li",{parentName:"ul"},"SLF \u4f18\u5316\uff1a\u5c06\u666e\u901a\u961f\u5217\u6362\u6210\u53cc\u7aef\u961f\u5217\uff0c\u6bcf\u6b21\u5c06\u5165\u961f\u7ed3\u70b9\u8ddd\u79bb\u548c\u961f\u9996\u6bd4\u8f83\uff0c\u5982\u679c\u66f4\u5927\u5219\u63d2\u5165\u81f3\u961f\u5c3e\uff0c\u5426\u5219\u63d2\u5165\u961f\u9996\u3002"),(0,a.kt)("li",{parentName:"ul"},"D\xb4Esopo-Pape \u7b97\u6cd5\uff1a\u5c06\u666e\u901a\u961f\u5217\u6362\u6210\u53cc\u7aef\u961f\u5217\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u4e4b\u524d\u6ca1\u6709\u5165\u961f\uff0c\u5219\u5c06\u5176\u63d2\u5165\u961f\u5c3e\uff0c\u5426\u5219\u63d2\u5165\u961f\u9996\u3002")),(0,a.kt)("p",null,"\u66f4\u591a\u4f18\u5316\u4ee5\u53ca\u9488\u5bf9\u8fd9\u4e9b\u4f18\u5316\u7684 Hack \u65b9\u6cd5\uff0c\u53ef\u4ee5\u770b ",(0,a.kt)("a",{parentName:"p",href:"https://www.zhihu.com/question/292283275/answer/484871888"},"fstqwq \u5728\u77e5\u4e4e\u4e0a\u7684\u56de\u7b54"),"\u3002"))}u.isMDXComponent=!0},5045:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/\u677e\u5f1b-37a5ebd3d7784e25f5f2e4f5d9f28720.png"}}]);