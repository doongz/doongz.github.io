"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[13142],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,h=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},69652:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const i={},o=void 0,l={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/<\u7ffb\u8f6c\u94fe\u8868>-K\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/<\u7ffb\u8f6c\u94fe\u8868>-K\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868",title:"<\u7ffb\u8f6c\u94fe\u8868>-K\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868",description:"25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/25-<\u7ffb\u8f6c\u94fe\u8868>-K\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/<\u7ffb\u8f6c\u94fe\u8868>-K\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/<\u7ffb\u8f6c\u94fe\u8868>-K\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868",draft:!1,tags:[],version:"current",sidebarPosition:25,frontMatter:{},sidebar:"docsSidebar",previous:{title:"\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9"},next:{title:"<\u63a5\u94fe\u6210\u73af>-\u65cb\u8f6c\u94fe\u8868",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/<\u63a5\u94fe\u6210\u73af>-\u65cb\u8f6c\u94fe\u8868"}},p={},s=[],c={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/reverse-nodes-in-k-group/"},"25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868")),(0,a.kt)("p",null,"\u7ed9\u4f60\u94fe\u8868\u7684\u5934\u8282\u70b9 head \uff0c\u6bcf k \u4e2a\u8282\u70b9\u4e00\u7ec4\u8fdb\u884c\u7ffb\u8f6c\uff0c\u8bf7\u4f60\u8fd4\u56de\u4fee\u6539\u540e\u7684\u94fe\u8868\u3002"),(0,a.kt)("p",null,"k \u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5b83\u7684\u503c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\u3002\u5982\u679c\u8282\u70b9\u603b\u6570\u4e0d\u662f k \u7684\u6574\u6570\u500d\uff0c\u90a3\u4e48\u8bf7\u5c06\u6700\u540e\u5269\u4f59\u7684\u8282\u70b9\u4fdd\u6301\u539f\u6709\u987a\u5e8f\u3002"),(0,a.kt)("p",null,"\u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1\uff1a")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg",alt:"img"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1ahead = [1,2,3,4,5], k = 2\n\u8f93\u51fa\uff1a[2,1,4,3,5]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u793a\u4f8b 2\uff1a")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg",alt:"img"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1ahead = [1,2,3,4,5], k = 3\n\u8f93\u51fa\uff1a[3,2,1,4,5]\n")),(0,a.kt)("p",null,"\u63d0\u793a\uff1a\n\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u6570\u76ee\u4e3a n\n1 <= k <= n <= 5000\n0 <= Node.val <= 1000"),(0,a.kt)("p",null,"\u8fdb\u9636\uff1a\u4f60\u53ef\u4ee5\u8bbe\u8ba1\u4e00\u4e2a\u53ea\u7528 O(1) \u989d\u5916\u5185\u5b58\u7a7a\u95f4\u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u5417\uff1f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    int len;\n    // \u7ffb\u8f6c\u4e00\u4e2a\u5b50\u94fe\u8868\uff0c\u5e76\u4e14\u8fd4\u56de\u65b0\u7684\u5934\u4e0e\u5c3e\uff0c\u5982\u679c\u77e5\u9053\u5b50\u94fe\u8868\u957f\u5ea6\u7684\u8bdd\u8fd9\u79cd\u5199\u6cd5\u6613\u61c2\n    // \u65b0\u7684\u5934\u5c31\u662f\u539f\u6765\u7684\u5c3e\uff0c\u65b0\u7684\u5c3e\u5c31\u662f\u539f\u6765\u7684\u5934\uff0c\u65b0\u5c3e\u90e8\u63a5\u7740\u539f\u5c3e\u90e8\u540e\u9762\u7684\u8282\u70b9\n    pair<ListNode *, ListNode *> reverseSub(ListNode *head, ListNode *tail) {\n        ListNode *headNext = tail->next;  // \u8bb0\u5f55\u65b0\u5934\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\n        ListNode *cur = head;             // \u8bb0\u5f55\u6b63\u5728\u7ffb\u8f6c\u7684\u90a3\u4e2a\u8282\u70b9\n        for (int i = 0; i < this->len; i++) {\n            ListNode *tmp = cur->next;  // \u5148\u4fdd\u5b58\u4e0b\u4e0b\u6b21\u7684 cur\n            cur->next = headNext;\n            headNext = cur;\n            cur = tmp;\n        }\n        return {tail, head};\n    }\n\n    ListNode *reverseKGroup(ListNode *head, int k) {\n        this->len = k;\n        ListNode *hair = new ListNode(0, head);\n        ListNode *pre = hair;  // \u8bb0\u5f55\u5b50\u94fe\u8868\u524d\u9762\u7684\u8282\u70b9\n\n        while (head) {             // head \u8bb0\u5f55\u5b50\u94fe\u8868\u7684\u9996\u8282\u70b9\n            ListNode *tail = pre;  // tail \u8bb0\u5f55\u5b50\u94fe\u8868\u7684\u5c3e\u8282\u70b9\n\n            // \u904d\u5386\u957f\u5ea6\u4e3a k \u7684\u5b50\u94fe\u8868\uff0c\u7ed3\u675f\u540e tail \u4e3a\u5b50\u94fe\u8868\u7684\u5c3e\u8282\u70b9\n            // \u5982\u679c\u8fd8\u6ca1\u904d\u5386\u5b8c\u5c31\u7ed3\u675f\u4e86\uff0c\u76f4\u63a5\u8fd4\u56de\u7b54\u6848\n            for (int i = 0; i < k; i++) {\n                tail = tail->next;\n                if (tail == nullptr) return hair->next;\n            }\n\n            // \u5b50\u94fe\u8868\u5185\u7ffb\u8f6c\n            pair<ListNode *, ListNode *> res = reverseSub(head, tail);\n            head = res.first;   // \u5b50\u94fe\u8868\u65b0\u7684\u5934\n            tail = res.second;  // \u5b50\u94fe\u8868\u65b0\u7684\u5c3e\u8282\u70b9\n\n            pre->next = head;   // \u5c06\u5b50\u94fe\u8868\u63a5\u56de\u539f\u94fe\u8868\n            head = tail->next;  // \u5c06\u4e0b\u5b50\u94fe\u8868\u7684\u5934\u8282\u70b9\u5b9a\u4f4d\u5230 \u5f53\u524d\u5c3e\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\n            pre = tail;         // \u5c06\u4e0b\u5b50\u94fe\u8868\u524d\u9762\u7684\u8282\u70b9\u5b9a\u4f4d\u5230 \u5f53\u524d\u5c3e\u8282\u70b9\n        }\n        return hair->next;  // \u6b63\u597d\u7ed3\u675f\uff0c\u8fd9\u91cc\u8fd4\u56de\n    }\n};\n")),(0,a.kt)("p",null,"\u5982\u679c\u4e0d\u77e5\u9053\u5b50\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u66ff\u6362\u6210\u4e0b\u9762\u7684\u5199\u6cd5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"// \u7ffb\u8f6c\u4e00\u4e2a\u5b50\u94fe\u8868\uff0c\u5e76\u4e14\u8fd4\u56de\u65b0\u7684\u5934\u4e0e\u5c3e\n// \u65b0\u7684\u5934\u5c31\u662f\u539f\u6765\u7684\u5c3e\uff0c\u65b0\u7684\u5c3e\u5c31\u662f\u539f\u6765\u7684\u5934\uff0c\u65b0\u5c3e\u90e8\u63a5\u7740\u539f\u5c3e\u90e8\u540e\u9762\u7684\u8282\u70b9\npair<ListNode *, ListNode *> reverseSub(ListNode *head, ListNode *tail) {\n    ListNode *headNext = tail->next; // \u8bb0\u5f55\u65b0\u5934\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\n    ListNode *cur = head; // \u8bb0\u5f55\u6b63\u5728\u7ffb\u8f6c\u7684\u90a3\u4e2a\u8282\u70b9\n    while (headNext != tail){ // \u5f53 \u65b0\u5934\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a \u7b49\u4e8e \u65b0\u5934\u8282\u70b9\u65f6\uff0c\u8df3\u51fa\u5faa\u73af\n        ListNode *tmp = cur->next;\n        cur->next = headNext;\n        headNext = cur;\n        cur = tmp; // \u66f4\u65b0\u4e0b\u4e00\u6b21\u8981\u7ffb\u8f6c\u7684\u70b9\n    }\n    return {tail, head};\n}\n")))}u.isMDXComponent=!0}}]);