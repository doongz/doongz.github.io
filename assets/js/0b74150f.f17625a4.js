"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8455],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):d(d({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),c=s(t),m=i,f=c["".concat(l,".").concat(m)]||c[m]||u[m]||o;return t?r.createElement(f,d(d({ref:n},p),{},{components:t})):r.createElement(f,d({ref:n},p))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,d=new Array(o);d[0]=m;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a[c]="string"==typeof e?e:i,d[1]=a;for(var s=2;s<o;s++)d[s]=t[s];return r.createElement.apply(null,d)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},80969:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>c,frontMatter:()=>o,metadata:()=>a,toc:()=>s});var r=t(87462),i=(t(67294),t(3905));const o={},d=void 0,a={unversionedId:"Algorithm/\u6570\u5b66/\u4f8b\u9898-\u6570\u5b66\u8fd0\u7b97/<\u500d\u589e>-\u4e24\u6570\u76f8\u9664",id:"Algorithm/\u6570\u5b66/\u4f8b\u9898-\u6570\u5b66\u8fd0\u7b97/<\u500d\u589e>-\u4e24\u6570\u76f8\u9664",title:"<\u500d\u589e>-\u4e24\u6570\u76f8\u9664",description:"29. \u4e24\u6570\u76f8\u9664",source:"@site/docs/Algorithm/5-\u6570\u5b66/\u4f8b\u9898-\u6570\u5b66\u8fd0\u7b97/29-<\u500d\u589e>-\u4e24\u6570\u76f8\u9664.md",sourceDirName:"Algorithm/5-\u6570\u5b66/\u4f8b\u9898-\u6570\u5b66\u8fd0\u7b97",slug:"/Algorithm/\u6570\u5b66/\u4f8b\u9898-\u6570\u5b66\u8fd0\u7b97/<\u500d\u589e>-\u4e24\u6570\u76f8\u9664",permalink:"/docs/Algorithm/\u6570\u5b66/\u4f8b\u9898-\u6570\u5b66\u8fd0\u7b97/<\u500d\u589e>-\u4e24\u6570\u76f8\u9664",draft:!1,tags:[],version:"current",sidebarPosition:29,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<\u627e\u96f6\u95ee\u9898>-\u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570",permalink:"/docs/Algorithm/\u6570\u5b66/\u4f8b\u9898-\u6570\u5b66\u8fd0\u7b97/<\u627e\u96f6\u95ee\u9898>-\u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570"},next:{title:"\u4e0b\u4e00\u4e2a\u6392\u5217",permalink:"/docs/Algorithm/\u6570\u5b66/\u4f8b\u9898-\u6570\u5b66\u8fd0\u7b97/\u4e0b\u4e00\u4e2a\u6392\u5217"}},l={},s=[{value:"29. \u4e24\u6570\u76f8\u9664",id:"29-\u4e24\u6570\u76f8\u9664",level:4}],p={toc:s};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"29-\u4e24\u6570\u76f8\u9664"},(0,i.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/divide-two-integers/"},"29. \u4e24\u6570\u76f8\u9664")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/divide-two-integers/solution/po-su-de-xiang-fa-mei-you-wei-yun-suan-mei-you-yi-/"},"\u9898\u89e3")),(0,i.kt)("p",null,"\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\uff0c\u88ab\u9664\u6570 ",(0,i.kt)("inlineCode",{parentName:"p"},"dividend")," \u548c\u9664\u6570 ",(0,i.kt)("inlineCode",{parentName:"p"},"divisor"),"\u3002\u5c06\u4e24\u6570\u76f8\u9664\uff0c\u8981\u6c42\u4e0d\u4f7f\u7528\u4e58\u6cd5\u3001\u9664\u6cd5\u548c mod \u8fd0\u7b97\u7b26\u3002"),(0,i.kt)("p",null,"\u8fd4\u56de\u88ab\u9664\u6570 ",(0,i.kt)("inlineCode",{parentName:"p"},"dividend")," \u9664\u4ee5\u9664\u6570 ",(0,i.kt)("inlineCode",{parentName:"p"},"divisor")," \u5f97\u5230\u7684\u5546\u3002"),(0,i.kt)("p",null,"\u6574\u6570\u9664\u6cd5\u7684\u7ed3\u679c\u5e94\u5f53\u622a\u53bb\uff08",(0,i.kt)("inlineCode",{parentName:"p"},"truncate"),"\uff09\u5176\u5c0f\u6570\u90e8\u5206\uff0c\u4f8b\u5982\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},"truncate(8.345) = 8")," \u4ee5\u53ca ",(0,i.kt)("inlineCode",{parentName:"p"},"truncate(-2.7335) = -2")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u793a\u4f8b\xa01:\n\n\u8f93\u5165: dividend = 10, divisor = 3\n\u8f93\u51fa: 3\n\u89e3\u91ca: 10/3 = truncate(3.33333..) = truncate(3) = 3\n\n\u793a\u4f8b\xa02:\n\n\u8f93\u5165: dividend = 7, divisor = -3\n\u8f93\u51fa: -2\n\u89e3\u91ca: 7/-3 = truncate(-2.33333..) = -2\n")),(0,i.kt)("p",null,"\u63d0\u793a\uff1a"),(0,i.kt)("p",null,"\u88ab\u9664\u6570\u548c\u9664\u6570\u5747\u4e3a 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u3002\n\u9664\u6570\u4e0d\u4e3a 0\u3002\n\u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f ","[\u2212231,  231 \u2212 1]","\u3002\u672c\u9898\u4e2d\uff0c\u5982\u679c\u9664\u6cd5\u7ed3\u679c\u6ea2\u51fa\uff0c\u5219\u8fd4\u56de 231 \u2212 1\u3002"),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u5173\u4e8e\u5982\u4f55\u63d0\u9ad8\u6548\u7387\u5feb\u901f\u903c\u8fd1\u7ed3\u679c")),(0,i.kt)("p",null,"\u4e3e\u4e2a\u4f8b\u5b50\uff1a11 \u9664\u4ee5 3 \u3002\n\u9996\u514811\u6bd43\u5927\uff0c\u7ed3\u679c\u81f3\u5c11\u662f1\uff0c \u7136\u540e\u6211\u8ba93\u7ffb\u500d\uff0c\u5c31\u662f6\uff0c\u53d1\u73b011\u6bd43\u7ffb\u500d\u540e\u8fd8\u8981\u5927\uff0c\u90a3\u4e48\u7ed3\u679c\u5c31\u81f3\u5c11\u662f2\u4e86\uff0c\u90a3\u6211\u8ba9\u8fd9\u4e2a6\u518d\u7ffb\u500d\uff0c\u5f9712\uff0c11\u4e0d\u6bd412\u5927\uff0c\u5413\u6b7b\u6211\u4e86\uff0c\u5dee\u70b9\u8ba9\u5c31\u8ba9\u521a\u624d\u7684\u6700\u5c0f\u89e32\u4e5f\u7ffb\u500d\u5f97\u52304\u4e86\u3002\u4f46\u662f\u6211\u77e5\u9053\u6700\u7ec8\u7ed3\u679c\u80af\u5b9a\u57282\u548c4\u4e4b\u95f4\u3002"),(0,i.kt)("p",null,"\u4e5f\u5c31\u662f\u8bf42\u518d\u52a0\u4e0a\u67d0\u4e2a\u6570\uff0c\u8fd9\u4e2a\u6570\u662f\u591a\u5c11\u5462\uff1f",(0,i.kt)("strong",{parentName:"p"},"\u6211\u8ba911\u51cf\u53bb\u521a\u624d\u6700\u540e\u4e00\u6b21\u7684\u7ed3\u679c6\uff0c\u5269\u4e0b5\uff0c\u6211\u4eec\u8ba1\u7b975\u662f3\u7684\u51e0\u500d\uff0c\u4e5f\u5c31\u662f\u9664\u6cd5\uff0c\u770b\uff0c\u9012\u5f52\u51fa\u73b0\u4e86")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def divide(self, dividend: int, divisor: int) -> int:\n        MAX = 2**31 - 1\n        MIN = -2**31\n        if dividend == 0: return 0\n        if divisor == 1: return dividend\n        if divisor == -1: return MAX if dividend <= MIN else -1 * dividend\n\n        if (dividend < 0 and divisor < 0) or (dividend > 0 and divisor > 0):\n            flag = True\n        else:\n            flag = False\n        dividend = dividend if dividend > 0 else -1 * dividend\n        divisor = divisor if divisor > 0 else -1 * divisor\n        \n        ans = self.dfs(dividend, divisor)\n        if flag:\n            return ans\n        else:\n            return -1 * ans\n\n    def dfs(self, dividend, divisor):\n        if dividend < divisor:\n            return 0\n        cnt = 1\n        _sum = divisor\n        while _sum + _sum <= dividend:  # \u82e5\u662f\u4e0b\u6b21\u7d2f\u79ef\u503c\u7ffb\u500d\u8d85\u8fc7\u88ab\u9664\u6570\u65f6\uff0c\u4e0d\u5faa\u73af\n            _sum = _sum + _sum  # \u7d2f\u79ef\u7684\u503c\u6bd4\u524d\u4e00\u6b21\u7ffb\u500d\n            cnt = cnt + cnt     # \u7d2f\u79ef\u7684\u8ba1\u6570\u6bd4\u524d\u4e00\u6b21\u7ffb\u500d\n        return cnt + self.dfs(dividend - _sum, divisor)\n\n")))}c.isMDXComponent=!0}}]);