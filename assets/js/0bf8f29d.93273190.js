"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[27731],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>d});var i=t(67294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function s(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function l(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,i,r=function(n,e){if(null==n)return{};var t,i,r={},s=Object.keys(n);for(i=0;i<s.length;i++)t=s[i],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(i=0;i<s.length;i++)t=s[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var u=i.createContext({}),o=function(n){var e=i.useContext(u),t=e;return n&&(t="function"==typeof n?n(e):l(l({},e),n)),t},p=function(n){var e=o(n.components);return i.createElement(u.Provider,{value:e},n.children)},m="mdxType",c={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},k=i.forwardRef((function(n,e){var t=n.components,r=n.mdxType,s=n.originalType,u=n.parentName,p=a(n,["components","mdxType","originalType","parentName"]),m=o(t),k=r,d=m["".concat(u,".").concat(k)]||m[k]||c[k]||s;return t?i.createElement(d,l(l({ref:e},p),{},{components:t})):i.createElement(d,l({ref:e},p))}));function d(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var s=t.length,l=new Array(s);l[0]=k;var a={};for(var u in e)hasOwnProperty.call(e,u)&&(a[u]=e[u]);a.originalType=n,a[m]="string"==typeof n?n:r,l[1]=a;for(var o=2;o<s;o++)l[o]=t[o];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}k.displayName="MDXCreateElement"},33095:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>o});var i=t(87462),r=(t(67294),t(3905));const s={},l=void 0,a={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<\u591a\u8def\u5f52\u5e76>-\u67e5\u627e\u548c\u6700\u5c0f\u7684K\u5bf9\u6570\u5b57",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<\u591a\u8def\u5f52\u5e76>-\u67e5\u627e\u548c\u6700\u5c0f\u7684K\u5bf9\u6570\u5b57",title:"<\u591a\u8def\u5f52\u5e76>-\u67e5\u627e\u548c\u6700\u5c0f\u7684K\u5bf9\u6570\u5b57",description:"373. \u67e5\u627e\u548c\u6700\u5c0f\u7684 K \u5bf9\u6570\u5b57",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/373-<\u591a\u8def\u5f52\u5e76>-\u67e5\u627e\u548c\u6700\u5c0f\u7684K\u5bf9\u6570\u5b57.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<\u591a\u8def\u5f52\u5e76>-\u67e5\u627e\u548c\u6700\u5c0f\u7684K\u5bf9\u6570\u5b57",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<\u591a\u8def\u5f52\u5e76>-\u67e5\u627e\u548c\u6700\u5c0f\u7684K\u5bf9\u6570\u5b57",draft:!1,tags:[],version:"current",sidebarPosition:373,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<TopK>-\u524dK\u4e2a\u9ad8\u9891\u5143\u7d20",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<TopK>-\u524dK\u4e2a\u9ad8\u9891\u5143\u7d20"},next:{title:"<\u591a\u8def\u5f52\u5e76>-\u6709\u5e8f\u77e9\u9635\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<\u591a\u8def\u5f52\u5e76>-\u6709\u5e8f\u77e9\u9635\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20"}},u={},o=[{value:"\u65b9\u6cd5\u4e00\uff1a\u591a\u8def\u5f52\u5e76",id:"\u65b9\u6cd5\u4e00\u591a\u8def\u5f52\u5e76",level:2},{value:"\u7b56\u7565",id:"\u7b56\u7565",level:3},{value:"\u65b9\u6cd5\u4e8c\uff1a\u66b4\u529b-\u6709\u5e8f\u96c6\u5408\uff08\u8d85\u65f6\uff09",id:"\u65b9\u6cd5\u4e8c\u66b4\u529b-\u6709\u5e8f\u96c6\u5408\u8d85\u65f6",level:2},{value:"\u65b9\u6cd5\u4e09\uff1a\u66b4\u529b-\u5927\u6839\u5806\uff08\u8d85\u65f6\uff09",id:"\u65b9\u6cd5\u4e09\u66b4\u529b-\u5927\u6839\u5806\u8d85\u65f6",level:2}],p={toc:o};function m(n){let{components:e,...s}=n;return(0,r.kt)("wrapper",(0,i.Z)({},p,s,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums/"},"373. \u67e5\u627e\u548c\u6700\u5c0f\u7684 K \u5bf9\u6570\u5b57")),(0,r.kt)("p",null,"\u7ed9\u5b9a\u4e24\u4e2a\u4ee5 ",(0,r.kt)("strong",{parentName:"p"},"\u5347\u5e8f\u6392\u5217")," \u7684\u6574\u6570\u6570\u7ec4 ",(0,r.kt)("inlineCode",{parentName:"p"},"nums1")," \u548c ",(0,r.kt)("inlineCode",{parentName:"p"},"nums2")," , \u4ee5\u53ca\u4e00\u4e2a\u6574\u6570 ",(0,r.kt)("inlineCode",{parentName:"p"},"k")," \u3002"),(0,r.kt)("p",null,"\u5b9a\u4e49\u4e00\u5bf9\u503c ",(0,r.kt)("inlineCode",{parentName:"p"},"(u,v)"),"\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u6765\u81ea ",(0,r.kt)("inlineCode",{parentName:"p"},"nums1"),"\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u6765\u81ea ",(0,r.kt)("inlineCode",{parentName:"p"},"nums2")," \u3002"),(0,r.kt)("p",null,"\u8bf7\u627e\u5230\u548c\u6700\u5c0f\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"k")," \u4e2a\u6570\u5bf9 ",(0,r.kt)("inlineCode",{parentName:"p"},"(u1,v1)"),", ",(0,r.kt)("inlineCode",{parentName:"p"}," (u2,v2)")," ...  ",(0,r.kt)("inlineCode",{parentName:"p"},"(uk,vk)")," \u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u793a\u4f8b 1:\n\n\u8f93\u5165: nums1 = [1,7,11], nums2 = [2,4,6], k = 3\n\u8f93\u51fa: [1,2],[1,4],[1,6]\n\u89e3\u91ca: \u8fd4\u56de\u5e8f\u5217\u4e2d\u7684\u524d 3 \u5bf9\u6570\uff1a\n     [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]\n     \n\u793a\u4f8b 2:\n\n\u8f93\u5165: nums1 = [1,1,2], nums2 = [1,2,3], k = 2\n\u8f93\u51fa: [1,1],[1,1]\n\u89e3\u91ca: \u8fd4\u56de\u5e8f\u5217\u4e2d\u7684\u524d 2 \u5bf9\u6570\uff1a\n\xa0    [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]\n\n\u793a\u4f8b 3:\n\n\u8f93\u5165: nums1 = [1,2], nums2 = [3], k = 3 \n\u8f93\u51fa: [1,3],[2,3]\n\u89e3\u91ca: \u4e5f\u53ef\u80fd\u5e8f\u5217\u4e2d\u6240\u6709\u7684\u6570\u5bf9\u90fd\u88ab\u8fd4\u56de:[1,3],[2,3]\n")),(0,r.kt)("p",null,"\u63d0\u793a:"),(0,r.kt)("p",null,"1 <= nums1.length, nums2.length <= 105\n-109 <= nums1","[i]",", nums2","[i]"," <= 109\nnums1 \u548c nums2 \u5747\u4e3a\u5347\u5e8f\u6392\u5217\n1 <= k <= 1000"),(0,r.kt)("h2",{id:"\u65b9\u6cd5\u4e00\u591a\u8def\u5f52\u5e76"},"\u65b9\u6cd5\u4e00\uff1a\u591a\u8def\u5f52\u5e76"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums/solution/gong-shui-san-xie-duo-lu-gui-bing-yun-yo-pgw5/"},"\u9898\u89e3")),(0,r.kt)("p",null,"\u4ee4 nums1 \u7684\u957f\u5ea6\u4e3a n\uff0cnums2 \u7684\u957f\u5ea6\u4e3a m\uff0c\u6240\u6709\u7684\u70b9\u5bf9\u6570\u91cf\u4e3a n * m"),(0,r.kt)("p",null,"\u5176\u4e2d\u6bcf\u4e2a nums1","[i]"," \u53c2\u4e0e\u6240\u7ec4\u6210\u7684\u70b9\u5e8f\u5217\u4e3a\uff1a"),(0,r.kt)("p",null,"[(nums1","[0]",", nums2","[0]","), (nums1","[0]",", nums2","[1]","), ... , (nums1","[0]",",nums2","[m\u22121]",")]\n[(nums1","[1]",", nums2","[0]","), (nums1","[1]",", nums2","[1]","), ... , (nums1","[1]",", nums2","[m\u22121]",")]\n...\n[(nums1","[n\u22121]",", nums2","[0]","), (nums1","[n\u22121]",", nums2","[1]","), ... , (nums1","[n\u22121]",", nums2","[m\u22121]",")]"),(0,r.kt)("p",null,"\u7531\u4e8e nums1 \u548c nums2 \u5747\u5df2\u6309\u5347\u5e8f\u6392\u5e8f\uff0c\u56e0\u6b64\u6bcf\u4e2a nums1","[i]"," \u53c2\u4e0e\u6784\u6210\u7684\u70b9\u5e8f\u5217\u4e5f\u4e3a\u5347\u5e8f\u6392\u5e8f\uff0c\u8fd9\u5f15\u5bfc\u6211\u4eec\u4f7f\u7528\u300c\u591a\u8def\u5f52\u5e76\u300d\u6765\u8fdb\u884c\u6c42\u89e3\u3002"),(0,r.kt)("p",null,"\u5177\u4f53\u7684\uff0c\u8d77\u59cb\u6211\u4eec\u5c06\u8fd9 n \u4e2a\u5e8f\u5217\u7684\u9996\u4f4d\u5143\u7d20\uff08\u70b9\u5bf9\uff09\u4ee5\u4e8c\u5143\u7ec4 (i,j) \u653e\u5165\u4f18\u5148\u961f\u5217\uff08\u5c0f\u6839\u5806\uff09\uff0c\u5176\u4e2d i \u4e3a\u8be5\u70b9\u5bf9\u4e2d nums1","[i]"," \u7684\u4e0b\u6807\uff0cj \u4e3a\u8be5\u70b9\u5bf9\u4e2d nums2","[j]"," \u7684\u4e0b\u6807\uff0c\u8fd9\u6b65\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u4e3a O(nlogn)\u3002\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u5c0f\u4f18\u5316\u662f\uff1a\u6211\u4eec\u59cb\u7ec8\u786e\u4fdd nums1 \u4e3a\u4e24\u6570\u7ec4\u4e2d\u957f\u5ea6\u8f83\u5c11\u7684\u90a3\u4e2a\uff0c\u7136\u540e\u901a\u8fc7\u6807\u8bc6\u4f4d\u6765\u8bb0\u5f55\u662f\u5426\u53d1\u751f\u8fc7\u4ea4\u6362\uff0c\u786e\u4fdd\u7b54\u6848\u7684\u70b9\u987a\u5e8f\u7684\u6b63\u786e\u6027\u3002"),(0,r.kt)("p",null,"\u6bcf\u6b21\u4ece\u4f18\u5148\u961f\u5217\uff08\u5806\uff09\u4e2d\u53d6\u51fa\u5806\u9876\u5143\u7d20\uff08\u542b\u4e49\u4e3a\u5f53\u524d\u672a\u88ab\u52a0\u5165\u5230\u7b54\u6848\u7684\u6240\u6709\u70b9\u5bf9\u4e2d\u7684\u6700\u5c0f\u503c\uff09\uff0c\u52a0\u5165\u7b54\u6848\uff0c\u5e76\u5c06\u8be5\u70b9\u5bf9\u6240\u5728\u5e8f\u5217\u7684\u4e0b\u4e00\u4f4d\uff08\u5982\u679c\u6709\uff09\u52a0\u5165\u4f18\u5148\u961f\u5217\u4e2d\u3002"),(0,r.kt)("p",null,"\u4e3e\u4e2a \ud83c\udf30\uff0c\u9996\u6b21\u53d6\u51fa\u7684\u4e8c\u5143\u7ec4\u4e3a (0, 0)\uff0c\u5373\u70b9\u5bf9 (nums1","[0]",", nums2","[0]",")\uff0c\u53d6\u5b8c\u540e\u5c06\u5e8f\u5217\u7684\u4e0b\u4e00\u4f4d\u70b9\u5bf9 (nums1","[0]",", nums2","[1]",") \u4ee5\u4e8c\u5143\u7ec4 (0, 1) \u5f62\u5f0f\u653e\u5165\u4f18\u5148\u961f\u5217\u3002"),(0,r.kt)("p",null,"\u53ef\u901a\u8fc7\u300c\u53cd\u8bc1\u6cd5\u300d\u8bc1\u660e\uff0c\u6bcf\u6b21\u8fd9\u6837\u7684\u300c\u53d6\u5f53\u524d\uff0c\u653e\u5165\u4e0b\u4e00\u4f4d\u300d\u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u786e\u4fdd\u5f53\u524d\u672a\u88ab\u52a0\u5165\u7b54\u6848\u7684\u6240\u6709\u70b9\u5bf9\u7684\u6700\u5c0f\u503c\u5fc5\u7136\u5728\u4f18\u5148\u961f\u5217\uff08\u5806\uff09\u4e2d\uff0c\u5373\u524d k \u4e2a\u51fa\u5806\u7684\u5143\u7d20\u5fc5\u7136\u662f\u6240\u6709\u70b9\u5bf9\u7684\u524d k \u5c0f\u7684\u503c\u3002"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"373",src:t(47522).Z,width:"655",height:"407"})),(0,r.kt)("h3",{id:"\u7b56\u7565"},"\u7b56\u7565"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5b9a\u4e49\u5c0f\u6839\u5806\uff0c\u81ea\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219"),(0,r.kt)("li",{parentName:"ul"},"\u8d77\u59cb\uff0c\u5c06\u8fd9 n \u4e2a\u5e8f\u5217\u7684\u9996\u4f4d\u5143\u7d20\u4ee5\u4e8c\u5143\u7ec4 (i, j) \u653e\u5165\u5c0f\u6839\u5806\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u73b0\u5c06\u5404\u6761\u8def\u7684\u8d77\u70b9\u5165\u5806\uff0c(i, j)\u4ee3\u8868\u4e86\u6bcf\u6761\u8def\u7684\u4e0b\u6807\u6307\u9488"),(0,r.kt)("li",{parentName:"ul"},"\u5faa\u73af\u53d6 k \u4e2a\u5c0f\u6839\u5806\u300c\u5806\u9876\u300d\uff0c\u7136\u540e\u79fb\u9664\u3002\u5982\u679c\u53d6\u7684\u90a3\u6761\u8def\u8fd8\u6709\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u5c06\u5176\u653e\u5165\u5c0f\u6839\u5806\u91cc")),(0,r.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u4ee4 M \u4e3a n\u3001m \u548c k \u4e09\u8005\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u590d\u6742\u5ea6\u4e3a ",(0,r.kt)("inlineCode",{parentName:"p"},"O(M+k)\u2217logM)")),(0,r.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"O(M)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u672a\u4f18\u5316\u4ee3\u7801")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {\n        // \u5b9a\u4e49\u5c0f\u6839\u5806\uff0c\u81ea\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219\n        auto cmp = [&](const auto& a, const auto& b) {\n            return nums1[a.first] + nums2[a.second] > nums1[b.first] + nums2[b.second];\n        };\n        priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(cmp)> smallQ(cmp);\n        \n        int n = nums1.size();\n        int m = nums2.size();\n        // \u8d77\u59cb\u6211\u4eec\u5c06\u8fd9 n \u4e2a\u5e8f\u5217\u7684\u9996\u4f4d\u5143\u7d20\uff08\u70b9\u5bf9\uff09\u4ee5\u4e8c\u5143\u7ec4 (i,j) \u653e\u5165\u5c0f\u6839\u5806\n        // \u73b0\u5c06\u5404\u6761\u8def\u7684\u8d77\u70b9\u5165\u5806\uff0c(i,j)\u4ee3\u8868\u4e86\u6bcf\u6761\u8def\u7684\u4e0b\u6807\u6307\u9488\n        for (int i = 0; i < min(n, k); i++) {\n            smallQ.push({i, 0});\n        }\n\n        vector<vector<int>> ans;\n        while (ans.size() < k and !smallQ.empty()) {\n            int idx1 = smallQ.top().first;\n            int idx2 = smallQ.top().second;\n            smallQ.pop();\n            ans.push_back({nums1[idx1], nums2[idx2]});\n            if (idx2 + 1 < m) smallQ.push({idx1, idx2 + 1});\n        }\n        return ans;\n    }\n};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u4f18\u5316\u4ee3\u7801")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {\n        //\u59cb\u7ec8\u786e\u4fddnums1\u4e3a\u4e24\u6570\u7ec4\u4e2d\u957f\u5ea6\u8f83\u5c11\u7684\u90a3\u4e2a\n        bool flag = true;\n        int n = nums1.size(), m = nums2.size();\n        if (nums1.size() > nums2.size()) {\n            swap(nums1, nums2);\n            swap(n, m);\n            flag = false;\n        }\n\n        // \u5b9a\u4e49\u5c0f\u6839\u5806\uff0c\u81ea\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219\n        auto cmp = [&](const auto& a, const auto& b) {\n            return nums1[a.first] + nums2[a.second] > nums1[b.first] + nums2[b.second];\n        };\n        priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(cmp)> smallQ(cmp);\n\n        // \u8d77\u59cb\u6211\u4eec\u5c06\u8fd9 n \u4e2a\u5e8f\u5217\u7684\u9996\u4f4d\u5143\u7d20\uff08\u70b9\u5bf9\uff09\u4ee5\u4e8c\u5143\u7ec4 (i,j) \u653e\u5165\u5c0f\u6839\u5806\n        for (int i = 0; i < min(n, k); i++) {\n            smallQ.push({i, 0});\n        }\n\n        vector<vector<int>> ans;\n        while (ans.size() < k and !smallQ.empty()) {\n            int idx1 = smallQ.top().first;\n            int idx2 = smallQ.top().second;\n\n            smallQ.pop();\n            if (flag) {\n                ans.push_back({nums1[idx1], nums2[idx2]});\n            } else {\n                ans.push_back({nums2[idx2], nums1[idx1]});\n            }\n\n            if (idx2 + 1 < nums2.size()) smallQ.push({idx1, idx2 + 1});\n        }\n        return ans;\n    }\n};\n")),(0,r.kt)("h2",{id:"\u65b9\u6cd5\u4e8c\u66b4\u529b-\u6709\u5e8f\u96c6\u5408\u8d85\u65f6"},"\u65b9\u6cd5\u4e8c\uff1a\u66b4\u529b-\u6709\u5e8f\u96c6\u5408\uff08\u8d85\u65f6\uff09"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u63a7\u5236\u6709\u5e8f\u96c6\u5408\u7684\u5927\u5c0f\u4e3a k \u4e2a"),(0,r.kt)("li",{parentName:"ul"},"\u6709\u5e8f\u96c6\u5408 \u7531\u5c0f\u5230\u5927\u6392\u5e8f"),(0,r.kt)("li",{parentName:"ul"},"\u6bd4\u96c6\u5408\u4e2d\u6700\u5927\u7684\u8981\u5c0f\uff0c\u8fdb\u5165\u96c6\u5408\uff0c\u7136\u540e\u79fb\u9664\u6700\u5927\u7684\u5143\u7d20")),(0,r.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"O(nlogk)")),(0,r.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"O(k)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"25 / 31")," \u4e2a\u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sortedcontainers import SortedList\nclass Solution:\n    def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n        sl = SortedList(key = lambda x : x[0]+x[1]) # \u7531\u5c0f\u5230\u5927\n        for n1 in nums1:\n            for n2 in nums2:\n                if len(sl) < k:\n                    sl.add([n1, n2])\n                else:\n                    if n1 + n2 < sl[-1][0] + sl[-1][1]:\n                        sl.add([n1, n2])\n                        sl.pop()\n        return sl[:]\n")),(0,r.kt)("h2",{id:"\u65b9\u6cd5\u4e09\u66b4\u529b-\u5927\u6839\u5806\u8d85\u65f6"},"\u65b9\u6cd5\u4e09\uff1a\u66b4\u529b-\u5927\u6839\u5806\uff08\u8d85\u65f6\uff09"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u63a7\u5236\u5927\u6839\u5806\u7684\u5927\u5c0f\u4e3a k \u4e2a"),(0,r.kt)("li",{parentName:"ul"},"\u5c0f\u4e8e\u5927\u6839\u5806\u7684\u5806\u9876\uff0c\u5165\u5806\uff0c\u7136\u540e\u79fb\u9664\u5806\u9876"),(0,r.kt)("li",{parentName:"ul"},"\u6700\u540e\u53d6\u51fa\u5927\u6839\u5806\u4e2d\u7684\u5143\u7d20")),(0,r.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"O(nlogk)")),(0,r.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"O(k)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"27 / 31")," \u4e2a\u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'class Solution {\npublic:\n    struct cmp {\n        bool operator()(pair<int, int> p1, pair<int, int> p2) {\n            return p1.first + p1.second < p2.first + p2.second;\n        }\n    };\n    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {\n        priority_queue<pair<int, int>, vector<pair<int, int>>, cmp> bigQ;\n        for (int n1 : nums1) {\n            for (int n2 : nums2) {\n                if (bigQ.size() < k) {\n                    bigQ.push({n1, n2});\n                } else {\n                    if (n1 + n2 < bigQ.top().first + bigQ.top().second) {\n                        bigQ.push({n1, n2});\n                        bigQ.pop();\n                    }\n                }\n            }\n        }\n\n        vector<vector<int>> ans;\n        while (!bigQ.empty()) {\n            // cout << bigQ.top().first << ", " << bigQ.top().second << endl;\n            ans.push_back({bigQ.top().first, bigQ.top().second});\n            bigQ.pop();\n        }\n\n        return ans;\n    }\n};\n')))}m.isMDXComponent=!0},47522:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/373-99177cc02b2b60482b2fc45eb1fcde48.png"}}]);