"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[84591],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>g});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),o=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=o(e.components);return r.createElement(p.Provider,{value:n},e.children)},l="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,c=e.originalType,p=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),l=o(t),f=a,g=l["".concat(p,".").concat(f)]||l[f]||y[f]||c;return t?r.createElement(g,i(i({ref:n},s),{},{components:t})):r.createElement(g,i({ref:n},s))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var c=t.length,i=new Array(c);i[0]=f;var u={};for(var p in n)hasOwnProperty.call(n,p)&&(u[p]=n[p]);u.originalType=e,u[l]="string"==typeof e?e:a,i[1]=u;for(var o=2;o<c;o++)i[o]=t[o];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},55996:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>l,frontMatter:()=>c,metadata:()=>u,toc:()=>o});var r=t(87462),a=(t(67294),t(3905));const c={},i=void 0,u={unversionedId:"Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<bfs\u505a\u51b3\u7b56>-\u6c34\u58f6\u95ee\u9898",id:"Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<bfs\u505a\u51b3\u7b56>-\u6c34\u58f6\u95ee\u9898",title:"<bfs\u505a\u51b3\u7b56>-\u6c34\u58f6\u95ee\u9898",description:"\u9898\u76ee\uff1a365. \u6c34\u58f6\u95ee\u9898",source:"@site/docs/Algorithm/4-\u56fe\u8bba/\u4f8b\u9898-BFS/365-<bfs\u505a\u51b3\u7b56>-\u6c34\u58f6\u95ee\u9898.md",sourceDirName:"Algorithm/4-\u56fe\u8bba/\u4f8b\u9898-BFS",slug:"/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<bfs\u505a\u51b3\u7b56>-\u6c34\u58f6\u95ee\u9898",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<bfs\u505a\u51b3\u7b56>-\u6c34\u58f6\u95ee\u9898",draft:!1,tags:[],version:"current",sidebarPosition:365,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<\u53cc\u5411bfs>-\u5355\u8bcd\u63a5\u9f99",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u53cc\u5411bfs>-\u5355\u8bcd\u63a5\u9f99"},next:{title:"<\u9006\u5411\u8d70>-\u592a\u5e73\u6d0b\u5927\u897f\u6d0b\u6c34\u6d41\u95ee\u9898",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u9006\u5411\u8d70>-\u592a\u5e73\u6d0b\u5927\u897f\u6d0b\u6c34\u6d41\u95ee\u9898"}},p={},o=[],s={toc:o};function l(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"\u9898\u76ee\uff1a",(0,a.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/water-and-jug-problem/"},"365. \u6c34\u58f6\u95ee\u9898")),(0,a.kt)("p",null,"\u6709\u4e24\u4e2a\u6c34\u58f6\uff0c\u5bb9\u91cf\u5206\u522b\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"jug1Capacity")," \u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"jug2Capacity")," \u5347\u3002\u6c34\u7684\u4f9b\u5e94\u662f\u65e0\u9650\u7684\u3002\u786e\u5b9a\u662f\u5426\u6709\u53ef\u80fd\u4f7f\u7528\u8fd9\u4e24\u4e2a\u58f6\u51c6\u786e\u5f97\u5230 ",(0,a.kt)("inlineCode",{parentName:"p"},"targetCapacity")," \u5347\u3002"),(0,a.kt)("p",null,"\u5982\u679c\u53ef\u4ee5\u5f97\u5230 ",(0,a.kt)("inlineCode",{parentName:"p"},"targetCapacity")," \u5347\u6c34\uff0c\u6700\u540e\u8bf7\u7528\u4ee5\u4e0a\u6c34\u58f6\u4e2d\u7684\u4e00\u6216\u4e24\u4e2a\u6765\u76db\u653e\u53d6\u5f97\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"targetCapacity")," \u5347\u6c34\u3002"),(0,a.kt)("p",null,"\u4f60\u53ef\u4ee5\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u88c5\u6ee1\u4efb\u610f\u4e00\u4e2a\u6c34\u58f6"),(0,a.kt)("li",{parentName:"ul"},"\u6e05\u7a7a\u4efb\u610f\u4e00\u4e2a\u6c34\u58f6"),(0,a.kt)("li",{parentName:"ul"},"\u4ece\u4e00\u4e2a\u6c34\u58f6\u5411\u53e6\u5916\u4e00\u4e2a\u6c34\u58f6\u5012\u6c34\uff0c\u76f4\u5230\u88c5\u6ee1\u6216\u8005\u5012\u7a7a")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'\u793a\u4f8b 1:\xa0\n\n\u8f93\u5165: jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4\n\u8f93\u51fa: true\n\u89e3\u91ca\uff1a\u6765\u81ea\u8457\u540d\u7684\xa0"Die Hard"\n\n\u793a\u4f8b 2:\n\n\u8f93\u5165: jug1Capacity = 2, jug2Capacity = 6, targetCapacity = 5\n\u8f93\u51fa: false\n\n\u793a\u4f8b 3:\n\n\u8f93\u5165: jug1Capacity = 1, jug2Capacity = 2, targetCapacity = 3\n\u8f93\u51fa: true\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u63d0\u793a:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= jug1Capacity, jug2Capacity, targetCapacity <= 106"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},"struct pair_hash {\n    template <class T1, class T2>\n    std::size_t operator()(std::pair<T1, T2> const &pair) const {\n        std::size_t h1 = std::hash<T1>()(pair.first);\n        std::size_t h2 = std::hash<T2>()(pair.second);\n\n        return h1 ^ h2;\n    }\n};\n\nclass Solution {\npublic:\n    bool canMeasureWater(int jug1Capacity, int jug2Capacity, int targetCapacity) {\n        queue<pair<int, int>> que;\n        unordered_set<pair<int, int>, pair_hash> vis;\n\n        que.push({0, 0});\n        vis.insert({0, 0});\n        while (!que.empty()) {\n            int c1 = que.front().first;\n            int c2 = que.front().second;\n            que.pop();\n            if (c1 == targetCapacity || c2 == targetCapacity || c1 + c2 == targetCapacity) {\n                return true;\n            }\n\n            // \u88c5\u6ee1\u4efb\u610f\u4e00\u4e2a\u6c34\u58f6\n            if (!vis.count({jug1Capacity, c2})) {\n                que.push({jug1Capacity, c2});\n                vis.insert({jug1Capacity, c2});\n            }\n            if (!vis.count({c1, jug2Capacity})) {\n                que.push({c1, jug2Capacity});\n                vis.insert({c1, jug2Capacity});\n            }\n            // \u6e05\u7a7a\u4efb\u610f\u4e00\u4e2a\u6c34\u58f6\n            if (!vis.count({0, c2})) {\n                que.push({0, c2});\n                vis.insert({0, c2});\n            }\n            if (!vis.count({c1, 0})) {\n                que.push({c1, 0});\n                vis.insert({c1, 0});\n            }\n\n            // \u4ece\u4e00\u4e2a\u6c34\u58f6\u5411\u53e6\u5916\u4e00\u4e2a\u6c34\u58f6\u5012\u6c34\uff0c\u76f4\u5230\u88c5\u6ee1\u6216\u8005\u5012\u7a7a\n            int c1_next, c2_next;\n            // c1 \u5f80 c2 \u5012\n            if (c1 + c2 > jug2Capacity) {\n                c1_next = c1 - (jug2Capacity - c2);\n                c2_next = jug2Capacity;\n            } else {\n                c1_next = 0;\n                c2_next = c1 + c2;\n            }\n            if (!vis.count({c1_next, c2_next})) {\n                que.push({c1_next, c2_next});\n                vis.insert({c1_next, c2_next});\n            }\n            // c2 \u5f80 c1 \u5012\n            if (c1 + c2 > jug1Capacity) {\n                c1_next = jug1Capacity;\n                c2_next = c2 - (jug1Capacity - c1);\n            } else {\n                c1_next = c1 + c2;\n                c2_next = 0;\n            }\n            if (!vis.count({c1_next, c2_next})) {\n                que.push({c1_next, c2_next});\n                vis.insert({c1_next, c2_next});\n            }\n        }\n\n        return false;\n    }\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def main(self, x, y, z):\n        queue = [(0, 0)]\n        seen = set()\n        while queue:\n            cur_x, cur_y = queue.pop(0)\n            if cur_x == z or cur_y == z or cur_x + cur_y == z:\n                return True\n            if (cur_x, cur_y) in seen:\n                continue\n            seen.add((cur_x, cur_y))\n            queue.append((x, cur_y))  # x\u58f6\u88c5\u6ee1\n            queue.append((cur_x, y))  # y\u58f6\u88c5\u6ee1\n            queue.append((0, cur_y))  # x\u58f6\u6e05\u7a7a\n            queue.append((cur_x, 0))  # y\u58f6\u6e05\u7a7a\n            if cur_x > y - cur_y:\n                # x\u58f6\u5f80y\u58f6\u5230\u8fd8\u6709\u5269\u4f59\n                queue.append((cur_x - y + cur_y, y))\n            else:\n                # x\u58f6\u5f80y\u58f6\u5230\n                queue.append((0, cur_y + cur_x))\n            if cur_y > x - cur_x:\n                # y\u58f6\u5f80x\u58f6\u5230\u8fd8\u6709\u5269\u4f59\n                queue.append((x, cur_y - x + cur_x))\n            else:\n                # y\u58f6\u5f80x\u58f6\u5230\n                queue.append((cur_x + cur_y, 0))\n        return False\n")))}l.isMDXComponent=!0}}]);