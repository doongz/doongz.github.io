"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[14207],{3905:(t,e,a)=>{a.d(e,{Zo:()=>p,kt:()=>g});var r=a(67294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function d(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},l=Object.keys(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var s=r.createContext({}),o=function(t){var e=r.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},p=function(t){var e=o(t.components);return r.createElement(s.Provider,{value:e},t.children)},m="mdxType",k={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(t,e){var a=t.components,n=t.mdxType,l=t.originalType,s=t.parentName,p=d(t,["components","mdxType","originalType","parentName"]),m=o(a),f=n,g=m["".concat(s,".").concat(f)]||m[f]||k[f]||l;return a?r.createElement(g,i(i({ref:e},p),{},{components:a})):r.createElement(g,i({ref:e},p))}));function g(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var l=a.length,i=new Array(l);i[0]=f;var d={};for(var s in e)hasOwnProperty.call(e,s)&&(d[s]=e[s]);d.originalType=t,d[m]="string"==typeof t?t:n,i[1]=d;for(var o=2;o<l;o++)i[o]=a[o];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}f.displayName="MDXCreateElement"},67737:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>d,toc:()=>o});var r=a(87462),n=(a(67294),a(3905));const l={},i="RISC-V Assembly Programmer's Manual",d={unversionedId:"Skill/ASM/RISC-V/riscv-asm-manual",id:"Skill/ASM/RISC-V/riscv-asm-manual",title:"RISC-V Assembly Programmer's Manual",description:"Reference//github.com/riscv-non-isa/riscv-asm-manual/blob/master/riscv-asm.md",source:"@site/docs/Skill/ASM/RISC-V/riscv-asm-manual.md",sourceDirName:"Skill/ASM/RISC-V",slug:"/Skill/ASM/RISC-V/riscv-asm-manual",permalink:"/docs/Skill/ASM/RISC-V/riscv-asm-manual",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"RISC-V \u5b9a\u65f6\u5668\u53ca\u4e2d\u65ad",permalink:"/docs/Skill/ASM/RISC-V/RISC-V\u5b9a\u65f6\u5668\u53ca\u4e2d\u65ad"},next:{title:"X86-64 \u6c47\u7f16",permalink:"/docs/Skill/ASM/x86/X86-64\u6c47\u7f16"}},s={},o=[{value:"General registers",id:"general-registers",level:2},{value:"Control registers",id:"control-registers",level:2},{value:"Floating Point registers (RV32F)",id:"floating-point-registers-rv32f",level:2},{value:"Vector registers (RV32V)",id:"vector-registers-rv32v",level:2},{value:"Instructions",id:"instructions",level:2},{value:"Instruction Aliases",id:"instruction-aliases",level:2},{value:"Pseudo Ops",id:"pseudo-ops",level:2},{value:"<code>&lt;a name=.option&gt;&lt;/a&gt;.option</code>",id:"a-nameoptionaoption",level:3},{value:"<code>rvc</code>/<code>norvc</code>",id:"rvcnorvc",level:4},{value:"<code>pic</code>/<code>nopic</code>",id:"picnopic",level:4},{value:"<code>relax</code>/<code>norelax</code>",id:"relaxnorelax",level:4},{value:"<code>push</code>/<code>pop</code>",id:"pushpop",level:4},{value:"Assembler Relocation Functions",id:"assembler-relocation-functions",level:2},{value:"Labels",id:"labels",level:2},{value:"Absolute addressing",id:"absolute-addressing",level:2},{value:"Relative addressing",id:"relative-addressing",level:2},{value:"GOT-indirect addressing",id:"got-indirect-addressing",level:2},{value:"Load Immediate",id:"load-immediate",level:2},{value:"Load Upper Immediate&#39;s Immediate",id:"load-upper-immediates-immediate",level:2},{value:"Load Address",id:"load-address",level:2},{value:"Load Local Address",id:"load-local-address",level:2},{value:"Load Global Address",id:"load-global-address",level:2},{value:"Load and Store Global",id:"load-and-store-global",level:2},{value:"Constants",id:"constants",level:2},{value:"Function Calls",id:"function-calls",level:2},{value:"Floating-point rounding modes",id:"floating-point-rounding-modes",level:2},{value:"Control and Status Registers",id:"control-and-status-registers",level:2},{value:"<code>&lt;a name=pseudoinstructions&gt;&lt;/a&gt;</code> A listing of standard RISC-V pseudoinstructions",id:"a-namepseudoinstructionsa-a-listing-of-standard-risc-v-pseudoinstructions",level:2},{value:"Pseudoinstructions for accessing control and status registers",id:"pseudoinstructions-for-accessing-control-and-status-registers",level:2}],p={toc:o};function m(t){let{components:e,...a}=t;return(0,n.kt)("wrapper",(0,r.Z)({},p,a,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"risc-v-assembly-programmers-manual"},"RISC-V Assembly Programmer's Manual"),(0,n.kt)("p",null,"Reference: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/riscv-non-isa/riscv-asm-manual/blob/master/riscv-asm.md"},"https://github.com/riscv-non-isa/riscv-asm-manual/blob/master/riscv-asm.md")),(0,n.kt)("h1",{id:"copyright-and-license-information"},"Copyright and License Information"),(0,n.kt)("p",null,"The RISC-V Assembly Programmer's Manual is"),(0,n.kt)("p",null,"  ","\xa9"," 2017 Palmer Dabbelt ",(0,n.kt)("a",{parentName:"p",href:"mailto:palmer@dabbelt.com"},"palmer@dabbelt.com"),"\n","\xa9"," 2017 Michael Clark ",(0,n.kt)("a",{parentName:"p",href:"mailto:michaeljclark@mac.com"},"michaeljclark@mac.com"),"\n","\xa9"," 2017 Alex Bradbury ",(0,n.kt)("a",{parentName:"p",href:"mailto:asb@lowrisc.org"},"asb@lowrisc.org")),(0,n.kt)("p",null,"It is licensed under the Creative Commons Attribution 4.0 International License\n(CC-BY 4.0). The full license text is available at\n",(0,n.kt)("a",{parentName:"p",href:"https://creativecommons.org/licenses/by/4.0/"},"https://creativecommons.org/licenses/by/4.0/"),"."),(0,n.kt)("h1",{id:"command-line-arguments"},"Command-Line Arguments"),(0,n.kt)("p",null,"I think it's probably better to beef up the binutils documentation rather than\nduplicating it here."),(0,n.kt)("h1",{id:"registers"},"Registers"),(0,n.kt)("p",null,"Registers are the most important part of any processor. RISC-V defines various\ntypes, depending on which extensions are included: The general registers (with\nthe program counter), control registers, floating point registers (F extension),\nand vector registers (V extension)."),(0,n.kt)("h2",{id:"general-registers"},"General registers"),(0,n.kt)("p",null,"The RV32I base integer ISA includes 32 registers, named ",(0,n.kt)("inlineCode",{parentName:"p"},"x0")," to ",(0,n.kt)("inlineCode",{parentName:"p"},"x31"),". The\nprogram counter ",(0,n.kt)("inlineCode",{parentName:"p"},"PC")," is separate from these registers, in contrast to other\nprocessors such as the ARM-32. The first register, ",(0,n.kt)("inlineCode",{parentName:"p"},"x0"),", has a special function:\nReading it always returns 0 and writes to it are ignored. As we will see later,\nthis allows various tricks and simplifications."),(0,n.kt)("p",null,"In practice, the programmer doesn't use this notation for the registers. Though\n",(0,n.kt)("inlineCode",{parentName:"p"},"x1")," to ",(0,n.kt)("inlineCode",{parentName:"p"},"x31")," are all equally general-use registers as far as the processor is\nconcerned, by convention certain registers are used for special tasks. In\nassembler, they are given standardized names as part of the RISC-V ",(0,n.kt)("strong",{parentName:"p"},"application\nbinary interface")," (ABI). This is what you will usually see in code listings. If\nyou really want to see the numeric register names, the ",(0,n.kt)("inlineCode",{parentName:"p"},"-M")," argument to objdump\nwill provide them."),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Register"),(0,n.kt)("th",{parentName:"tr",align:"left"},"ABI"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Use by convention"),(0,n.kt)("th",{parentName:"tr",align:null},"Preserved?"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x0"),(0,n.kt)("td",{parentName:"tr",align:"left"},"zero"),(0,n.kt)("td",{parentName:"tr",align:"left"},"hardwired to 0, ignores writes"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("em",{parentName:"td"},"n/a"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x1"),(0,n.kt)("td",{parentName:"tr",align:"left"},"ra"),(0,n.kt)("td",{parentName:"tr",align:"left"},"return address for jumps"),(0,n.kt)("td",{parentName:"tr",align:null},"no")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x2"),(0,n.kt)("td",{parentName:"tr",align:"left"},"sp"),(0,n.kt)("td",{parentName:"tr",align:"left"},"stack pointer"),(0,n.kt)("td",{parentName:"tr",align:null},"yes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x3"),(0,n.kt)("td",{parentName:"tr",align:"left"},"gp"),(0,n.kt)("td",{parentName:"tr",align:"left"},"global pointer"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("em",{parentName:"td"},"n/a"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x4"),(0,n.kt)("td",{parentName:"tr",align:"left"},"tp"),(0,n.kt)("td",{parentName:"tr",align:"left"},"thread pointer"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("em",{parentName:"td"},"n/a"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x5"),(0,n.kt)("td",{parentName:"tr",align:"left"},"t0"),(0,n.kt)("td",{parentName:"tr",align:"left"},"temporary register 0"),(0,n.kt)("td",{parentName:"tr",align:null},"no")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x6"),(0,n.kt)("td",{parentName:"tr",align:"left"},"t1"),(0,n.kt)("td",{parentName:"tr",align:"left"},"temporary register 1"),(0,n.kt)("td",{parentName:"tr",align:null},"no")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x7"),(0,n.kt)("td",{parentName:"tr",align:"left"},"t2"),(0,n.kt)("td",{parentName:"tr",align:"left"},"temporary register 2"),(0,n.kt)("td",{parentName:"tr",align:null},"no")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x8"),(0,n.kt)("td",{parentName:"tr",align:"left"},"s0 ",(0,n.kt)("em",{parentName:"td"},"or")," fp"),(0,n.kt)("td",{parentName:"tr",align:"left"},"saved register 0 ",(0,n.kt)("em",{parentName:"td"},"or")," frame pointer"),(0,n.kt)("td",{parentName:"tr",align:null},"yes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x9"),(0,n.kt)("td",{parentName:"tr",align:"left"},"s1"),(0,n.kt)("td",{parentName:"tr",align:"left"},"saved register 1"),(0,n.kt)("td",{parentName:"tr",align:null},"yes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x10"),(0,n.kt)("td",{parentName:"tr",align:"left"},"a0"),(0,n.kt)("td",{parentName:"tr",align:"left"},"return value ",(0,n.kt)("em",{parentName:"td"},"or")," function argument 0"),(0,n.kt)("td",{parentName:"tr",align:null},"no")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x11"),(0,n.kt)("td",{parentName:"tr",align:"left"},"a1"),(0,n.kt)("td",{parentName:"tr",align:"left"},"return value ",(0,n.kt)("em",{parentName:"td"},"or")," function argument 1"),(0,n.kt)("td",{parentName:"tr",align:null},"no")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x12"),(0,n.kt)("td",{parentName:"tr",align:"left"},"a2"),(0,n.kt)("td",{parentName:"tr",align:"left"},"function argument 2"),(0,n.kt)("td",{parentName:"tr",align:null},"no")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x13"),(0,n.kt)("td",{parentName:"tr",align:"left"},"a3"),(0,n.kt)("td",{parentName:"tr",align:"left"},"function argument 3"),(0,n.kt)("td",{parentName:"tr",align:null},"no")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x14"),(0,n.kt)("td",{parentName:"tr",align:"left"},"a4"),(0,n.kt)("td",{parentName:"tr",align:"left"},"function argument 4"),(0,n.kt)("td",{parentName:"tr",align:null},"no")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x15"),(0,n.kt)("td",{parentName:"tr",align:"left"},"a5"),(0,n.kt)("td",{parentName:"tr",align:"left"},"function argument 5"),(0,n.kt)("td",{parentName:"tr",align:null},"no")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x16"),(0,n.kt)("td",{parentName:"tr",align:"left"},"a6"),(0,n.kt)("td",{parentName:"tr",align:"left"},"function argument 6"),(0,n.kt)("td",{parentName:"tr",align:null},"no")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x17"),(0,n.kt)("td",{parentName:"tr",align:"left"},"a7"),(0,n.kt)("td",{parentName:"tr",align:"left"},"function argument 7"),(0,n.kt)("td",{parentName:"tr",align:null},"no")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x18"),(0,n.kt)("td",{parentName:"tr",align:"left"},"s2"),(0,n.kt)("td",{parentName:"tr",align:"left"},"saved register 2"),(0,n.kt)("td",{parentName:"tr",align:null},"yes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x19"),(0,n.kt)("td",{parentName:"tr",align:"left"},"s3"),(0,n.kt)("td",{parentName:"tr",align:"left"},"saved register 3"),(0,n.kt)("td",{parentName:"tr",align:null},"yes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x20"),(0,n.kt)("td",{parentName:"tr",align:"left"},"s4"),(0,n.kt)("td",{parentName:"tr",align:"left"},"saved register 4"),(0,n.kt)("td",{parentName:"tr",align:null},"yes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x21"),(0,n.kt)("td",{parentName:"tr",align:"left"},"s5"),(0,n.kt)("td",{parentName:"tr",align:"left"},"saved register 5"),(0,n.kt)("td",{parentName:"tr",align:null},"yes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x22"),(0,n.kt)("td",{parentName:"tr",align:"left"},"s6"),(0,n.kt)("td",{parentName:"tr",align:"left"},"saved register 6"),(0,n.kt)("td",{parentName:"tr",align:null},"yes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x23"),(0,n.kt)("td",{parentName:"tr",align:"left"},"s7"),(0,n.kt)("td",{parentName:"tr",align:"left"},"saved register 7"),(0,n.kt)("td",{parentName:"tr",align:null},"yes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x24"),(0,n.kt)("td",{parentName:"tr",align:"left"},"s8"),(0,n.kt)("td",{parentName:"tr",align:"left"},"saved register 8"),(0,n.kt)("td",{parentName:"tr",align:null},"yes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x25"),(0,n.kt)("td",{parentName:"tr",align:"left"},"s9"),(0,n.kt)("td",{parentName:"tr",align:"left"},"saved register 9"),(0,n.kt)("td",{parentName:"tr",align:null},"yes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x26"),(0,n.kt)("td",{parentName:"tr",align:"left"},"s10"),(0,n.kt)("td",{parentName:"tr",align:"left"},"saved register 10"),(0,n.kt)("td",{parentName:"tr",align:null},"yes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x27"),(0,n.kt)("td",{parentName:"tr",align:"left"},"s11"),(0,n.kt)("td",{parentName:"tr",align:"left"},"saved register 11"),(0,n.kt)("td",{parentName:"tr",align:null},"yes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x28"),(0,n.kt)("td",{parentName:"tr",align:"left"},"t3"),(0,n.kt)("td",{parentName:"tr",align:"left"},"temporary register 3"),(0,n.kt)("td",{parentName:"tr",align:null},"no")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x29"),(0,n.kt)("td",{parentName:"tr",align:"left"},"t4"),(0,n.kt)("td",{parentName:"tr",align:"left"},"temporary register 4"),(0,n.kt)("td",{parentName:"tr",align:null},"no")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x30"),(0,n.kt)("td",{parentName:"tr",align:"left"},"t5"),(0,n.kt)("td",{parentName:"tr",align:"left"},"temporary register 5"),(0,n.kt)("td",{parentName:"tr",align:null},"no")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"x31"),(0,n.kt)("td",{parentName:"tr",align:"left"},"t6"),(0,n.kt)("td",{parentName:"tr",align:"left"},"temporary register 6"),(0,n.kt)("td",{parentName:"tr",align:null},"no")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"pc"),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"(none)")),(0,n.kt)("td",{parentName:"tr",align:"left"},"program counter"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("em",{parentName:"td"},"n/a"))))),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},'Registers of the RV32I. Based on RISC-V documentation and Patterson and\nWaterman "The RISC-V Reader" (2017)')),(0,n.kt)("p",null,"As a general rule, the ",(0,n.kt)("strong",{parentName:"p"},"saved registers")," ",(0,n.kt)("inlineCode",{parentName:"p"},"s0")," to ",(0,n.kt)("inlineCode",{parentName:"p"},"s11")," are preserved across\nfunction calls, while the ",(0,n.kt)("strong",{parentName:"p"},"argument registers")," ",(0,n.kt)("inlineCode",{parentName:"p"},"a0")," to ",(0,n.kt)("inlineCode",{parentName:"p"},"a7")," and the\n",(0,n.kt)("strong",{parentName:"p"},"temporary registers")," ",(0,n.kt)("inlineCode",{parentName:"p"},"t0")," to ",(0,n.kt)("inlineCode",{parentName:"p"},"t6")," are not.  The use of the various\nspecialized registers such as ",(0,n.kt)("inlineCode",{parentName:"p"},"sp")," by convention will be discussed later in more\ndetail."),(0,n.kt)("h2",{id:"control-registers"},"Control registers"),(0,n.kt)("p",null,"(TBA)"),(0,n.kt)("h2",{id:"floating-point-registers-rv32f"},"Floating Point registers (RV32F)"),(0,n.kt)("p",null,"(TBA)"),(0,n.kt)("h2",{id:"vector-registers-rv32v"},"Vector registers (RV32V)"),(0,n.kt)("p",null,"(TBA)"),(0,n.kt)("h1",{id:"addressing"},"Addressing"),(0,n.kt)("p",null,"Addressing formats like %pcrel_lo().  We can just link to the RISC-V PS ABI\ndocument to describe what the relocations actually do."),(0,n.kt)("h1",{id:"instruction-set"},"Instruction Set"),(0,n.kt)("p",null,"Official Specifications webpage:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://riscv.org/specifications/"},"https://riscv.org/specifications/"))),(0,n.kt)("p",null,"Latest Specifications draft repository:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/riscv/riscv-isa-manual"},"https://github.com/riscv/riscv-isa-manual"))),(0,n.kt)("h2",{id:"instructions"},"Instructions"),(0,n.kt)("h1",{id:"risc-v-isa-specifications"},"RISC-V ISA Specifications"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://riscv.org/specifications/"},"https://riscv.org/specifications/")),(0,n.kt)("h2",{id:"instruction-aliases"},"Instruction Aliases"),(0,n.kt)("p",null,"ALIAS line from opcodes/riscv-opc.c"),(0,n.kt)("p",null,"To better diagnose situations where the program flow reaches an unexpected\nlocation, you might want to emit there an instruction that's known to trap. You\ncan use an ",(0,n.kt)("inlineCode",{parentName:"p"},"UNIMP")," pseudo-instruction, which should trap in nearly all systems.\nThe ",(0,n.kt)("em",{parentName:"p"},"de facto")," standard implementation of this instruction is:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"C.UNIMP"),": ",(0,n.kt)("inlineCode",{parentName:"p"},"0000"),". The all-zeroes pattern is not a valid instruction. Any\nsystem which traps on invalid instructions will thus trap on this ",(0,n.kt)("inlineCode",{parentName:"p"},"UNIMP"),"\ninstruction form. Despite not being a valid instruction, it still fits the\n16-bit (compressed) instruction format, and so ",(0,n.kt)("inlineCode",{parentName:"p"},"0000 0000")," is interpreted as\nbeing two 16-bit ",(0,n.kt)("inlineCode",{parentName:"p"},"UNIMP")," instructions.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"UNIMP")," : ",(0,n.kt)("inlineCode",{parentName:"p"},"C0001073"),". This is an alias for ",(0,n.kt)("inlineCode",{parentName:"p"},"CSRRW x0, cycle, x0"),". Since\n",(0,n.kt)("inlineCode",{parentName:"p"},"cycle")," is a read-only CSR, then (whether this CSR exists or not) an attempt\nto write into it will generate an illegal instruction exception. This 32-bit\nform of ",(0,n.kt)("inlineCode",{parentName:"p"},"UNIMP")," is emitted when targeting a system without the C extension,\nor when the ",(0,n.kt)("inlineCode",{parentName:"p"},".option norvc")," directive is used."))),(0,n.kt)("h2",{id:"pseudo-ops"},"Pseudo Ops"),(0,n.kt)("p",null,"Both the RISC-V-specific and GNU .-prefixed options."),(0,n.kt)("p",null,"The following table lists assembler directives:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Directive"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Arguments"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".align"),(0,n.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,n.kt)("td",{parentName:"tr",align:"left"},"align to power of 2 (alias for .p2align)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".file"),(0,n.kt)("td",{parentName:"tr",align:"left"},'"filename"'),(0,n.kt)("td",{parentName:"tr",align:"left"},"emit filename FILE LOCAL symbol table")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".globl"),(0,n.kt)("td",{parentName:"tr",align:"left"},"symbol_name"),(0,n.kt)("td",{parentName:"tr",align:"left"},"emit symbol_name to symbol table (scope GLOBAL)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".local"),(0,n.kt)("td",{parentName:"tr",align:"left"},"symbol_name"),(0,n.kt)("td",{parentName:"tr",align:"left"},"emit symbol_name to symbol table (scope LOCAL)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".comm"),(0,n.kt)("td",{parentName:"tr",align:"left"},"symbol_name,size,align"),(0,n.kt)("td",{parentName:"tr",align:"left"},"emit common object to .bss section")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".common"),(0,n.kt)("td",{parentName:"tr",align:"left"},"symbol_name,size,align"),(0,n.kt)("td",{parentName:"tr",align:"left"},"emit common object to .bss section")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".ident"),(0,n.kt)("td",{parentName:"tr",align:"left"},'"string"'),(0,n.kt)("td",{parentName:"tr",align:"left"},"accepted for source compatibility")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".section"),(0,n.kt)("td",{parentName:"tr",align:"left"},"[{.text,.data,.rodata,.bss}]"),(0,n.kt)("td",{parentName:"tr",align:"left"},"emit section (if not present, default .text) and make current")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".size"),(0,n.kt)("td",{parentName:"tr",align:"left"},"symbol, symbol"),(0,n.kt)("td",{parentName:"tr",align:"left"},"accepted for source compatibility")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".text"),(0,n.kt)("td",{parentName:"tr",align:"left"}),(0,n.kt)("td",{parentName:"tr",align:"left"},"emit .text section (if not present) and make current")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".data"),(0,n.kt)("td",{parentName:"tr",align:"left"}),(0,n.kt)("td",{parentName:"tr",align:"left"},"emit .data section (if not present) and make current")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".rodata"),(0,n.kt)("td",{parentName:"tr",align:"left"}),(0,n.kt)("td",{parentName:"tr",align:"left"},"emit .rodata section (if not present) and make current")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".bss"),(0,n.kt)("td",{parentName:"tr",align:"left"}),(0,n.kt)("td",{parentName:"tr",align:"left"},"emit .bss section (if not present) and make current")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".string"),(0,n.kt)("td",{parentName:"tr",align:"left"},'"string"'),(0,n.kt)("td",{parentName:"tr",align:"left"},"emit string")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".asciz"),(0,n.kt)("td",{parentName:"tr",align:"left"},'"string"'),(0,n.kt)("td",{parentName:"tr",align:"left"},"emit string (alias for .string)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".equ"),(0,n.kt)("td",{parentName:"tr",align:"left"},"name, value"),(0,n.kt)("td",{parentName:"tr",align:"left"},"constant definition")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".macro"),(0,n.kt)("td",{parentName:"tr",align:"left"},"name arg1 ","[, argn]"),(0,n.kt)("td",{parentName:"tr",align:"left"},"begin macro definition \\argname to substitute")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".endm"),(0,n.kt)("td",{parentName:"tr",align:"left"}),(0,n.kt)("td",{parentName:"tr",align:"left"},"end macro definition")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".type"),(0,n.kt)("td",{parentName:"tr",align:"left"},"symbol, @function"),(0,n.kt)("td",{parentName:"tr",align:"left"},"accepted for source compatibility")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".option"),(0,n.kt)("td",{parentName:"tr",align:"left"},"{rvc,norvc,pic,nopic,relax,norelax,push,pop}"),(0,n.kt)("td",{parentName:"tr",align:"left"},"RISC-V options. Refer to ",(0,n.kt)("a",{parentName:"td",href:"#.option"},".option")," for a more detailed description.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".byte"),(0,n.kt)("td",{parentName:"tr",align:"left"},"expression ","[, expression]","*"),(0,n.kt)("td",{parentName:"tr",align:"left"},"8-bit comma separated words")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".2byte"),(0,n.kt)("td",{parentName:"tr",align:"left"},"expression ","[, expression]","*"),(0,n.kt)("td",{parentName:"tr",align:"left"},"16-bit comma separated words")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".half"),(0,n.kt)("td",{parentName:"tr",align:"left"},"expression ","[, expression]","*"),(0,n.kt)("td",{parentName:"tr",align:"left"},"16-bit comma separated words")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".short"),(0,n.kt)("td",{parentName:"tr",align:"left"},"expression ","[, expression]","*"),(0,n.kt)("td",{parentName:"tr",align:"left"},"16-bit comma separated words")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".4byte"),(0,n.kt)("td",{parentName:"tr",align:"left"},"expression ","[, expression]","*"),(0,n.kt)("td",{parentName:"tr",align:"left"},"32-bit comma separated words")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".word"),(0,n.kt)("td",{parentName:"tr",align:"left"},"expression ","[, expression]","*"),(0,n.kt)("td",{parentName:"tr",align:"left"},"32-bit comma separated words")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".long"),(0,n.kt)("td",{parentName:"tr",align:"left"},"expression ","[, expression]","*"),(0,n.kt)("td",{parentName:"tr",align:"left"},"32-bit comma separated words")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".8byte"),(0,n.kt)("td",{parentName:"tr",align:"left"},"expression ","[, expression]","*"),(0,n.kt)("td",{parentName:"tr",align:"left"},"64-bit comma separated words")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".dword"),(0,n.kt)("td",{parentName:"tr",align:"left"},"expression ","[, expression]","*"),(0,n.kt)("td",{parentName:"tr",align:"left"},"64-bit comma separated words")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".quad"),(0,n.kt)("td",{parentName:"tr",align:"left"},"expression ","[, expression]","*"),(0,n.kt)("td",{parentName:"tr",align:"left"},"64-bit comma separated words")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".dtprelword"),(0,n.kt)("td",{parentName:"tr",align:"left"},"expression ","[, expression]","*"),(0,n.kt)("td",{parentName:"tr",align:"left"},"32-bit thread local word")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".dtpreldword"),(0,n.kt)("td",{parentName:"tr",align:"left"},"expression ","[, expression]","*"),(0,n.kt)("td",{parentName:"tr",align:"left"},"64-bit thread local word")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".sleb128"),(0,n.kt)("td",{parentName:"tr",align:"left"},"expression"),(0,n.kt)("td",{parentName:"tr",align:"left"},"signed little endian base 128, DWARF")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".uleb128"),(0,n.kt)("td",{parentName:"tr",align:"left"},"expression"),(0,n.kt)("td",{parentName:"tr",align:"left"},"unsigned little endian base 128, DWARF")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".p2align"),(0,n.kt)("td",{parentName:"tr",align:"left"},"p2,","[pad_val=0]",",max"),(0,n.kt)("td",{parentName:"tr",align:"left"},"align to power of 2")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".balign"),(0,n.kt)("td",{parentName:"tr",align:"left"},"b,","[pad_val=0]"),(0,n.kt)("td",{parentName:"tr",align:"left"},"byte align")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".zero"),(0,n.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,n.kt)("td",{parentName:"tr",align:"left"},"zero bytes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},".variant_cc"),(0,n.kt)("td",{parentName:"tr",align:"left"},"symbol_name"),(0,n.kt)("td",{parentName:"tr",align:"left"},"annotate the symbol with variant calling convention")))),(0,n.kt)("h3",{id:"a-nameoptionaoption"},(0,n.kt)("inlineCode",{parentName:"h3"},"<a name=.option></a>.option")),(0,n.kt)("h4",{id:"rvcnorvc"},(0,n.kt)("inlineCode",{parentName:"h4"},"rvc"),"/",(0,n.kt)("inlineCode",{parentName:"h4"},"norvc")),(0,n.kt)("p",null,"Enable/disable the C-extension for the following code region."),(0,n.kt)("h4",{id:"picnopic"},(0,n.kt)("inlineCode",{parentName:"h4"},"pic"),"/",(0,n.kt)("inlineCode",{parentName:"h4"},"nopic")),(0,n.kt)("p",null,"Set the code model to PIC (position independent code) or non-PIC. This will\naffect the expansion of the ",(0,n.kt)("inlineCode",{parentName:"p"},"la")," pseudoinstruction, refer to\n",(0,n.kt)("a",{parentName:"p",href:"#pseudoinstructions"},"listing of standard RISC-V pseudoinstructions"),"."),(0,n.kt)("h4",{id:"relaxnorelax"},(0,n.kt)("inlineCode",{parentName:"h4"},"relax"),"/",(0,n.kt)("inlineCode",{parentName:"h4"},"norelax")),(0,n.kt)("p",null,"Enable/disable linker relaxation for the following code region."),(0,n.kt)("p",null,"NOTE: Code region follows by ",(0,n.kt)("inlineCode",{parentName:"p"},".option relax")," will emit\n",(0,n.kt)("inlineCode",{parentName:"p"},"R_RISCV_RELAX"),"/",(0,n.kt)("inlineCode",{parentName:"p"},"R_RISCV_ALIGN")," even linker unsupport relaxation, suggested\nusage is using ",(0,n.kt)("inlineCode",{parentName:"p"},".option norelax")," with ",(0,n.kt)("inlineCode",{parentName:"p"},".option push"),"/",(0,n.kt)("inlineCode",{parentName:"p"},".option pop")," if\nyou want to disable linker relaxation on specific code region."),(0,n.kt)("p",null,"NOTE: Recommended way to disable linker relaxation of specific code region is\nuse ",(0,n.kt)("inlineCode",{parentName:"p"},".option push"),", ",(0,n.kt)("inlineCode",{parentName:"p"},".option norelax")," and ",(0,n.kt)("inlineCode",{parentName:"p"},".option pop"),", that prevent enabled\nlinker relaxation accidentally if user already disable linker relaxation."),(0,n.kt)("h4",{id:"pushpop"},(0,n.kt)("inlineCode",{parentName:"h4"},"push"),"/",(0,n.kt)("inlineCode",{parentName:"h4"},"pop")),(0,n.kt)("p",null,"Push/pop current options to/from the options stack."),(0,n.kt)("h2",{id:"assembler-relocation-functions"},"Assembler Relocation Functions"),(0,n.kt)("p",null,"The following table lists assembler relocation expansions:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Assembler Notation"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Instruction / Macro"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"%hi(symbol)"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Absolute (HI20)"),(0,n.kt)("td",{parentName:"tr",align:"left"},"lui")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"%lo(symbol)"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Absolute (LO12)"),(0,n.kt)("td",{parentName:"tr",align:"left"},"load, store, add")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"%pcrel_hi(symbol)"),(0,n.kt)("td",{parentName:"tr",align:"left"},"PC-relative (HI20)"),(0,n.kt)("td",{parentName:"tr",align:"left"},"auipc")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"%pcrel_lo(label)"),(0,n.kt)("td",{parentName:"tr",align:"left"},"PC-relative (LO12)"),(0,n.kt)("td",{parentName:"tr",align:"left"},"load, store, add")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"%tprel_hi(symbol)"),(0,n.kt)("td",{parentName:"tr",align:"left"},'TLS LE "Local Exec"'),(0,n.kt)("td",{parentName:"tr",align:"left"},"lui")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"%tprel_lo(symbol)"),(0,n.kt)("td",{parentName:"tr",align:"left"},'TLS LE "Local Exec"'),(0,n.kt)("td",{parentName:"tr",align:"left"},"load, store, add")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"%tprel_add(symbol)"),(0,n.kt)("td",{parentName:"tr",align:"left"},'TLS LE "Local Exec"'),(0,n.kt)("td",{parentName:"tr",align:"left"},"add")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"%tls_ie_pcrel_hi(symbol) ","*"),(0,n.kt)("td",{parentName:"tr",align:"left"},'TLS IE "Initial Exec" (HI20)'),(0,n.kt)("td",{parentName:"tr",align:"left"},"auipc")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"%tls_gd_pcrel_hi(symbol) ","*"),(0,n.kt)("td",{parentName:"tr",align:"left"},'TLS GD "Global Dynamic" (HI20)'),(0,n.kt)("td",{parentName:"tr",align:"left"},"auipc")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"%got_pcrel_hi(symbol) ","*"),(0,n.kt)("td",{parentName:"tr",align:"left"},"GOT PC-relative (HI20)"),(0,n.kt)("td",{parentName:"tr",align:"left"},"auipc")))),(0,n.kt)("p",null,"*"," These reuse %pcrel_lo(label) for their lower half"),(0,n.kt)("h2",{id:"labels"},"Labels"),(0,n.kt)("p",null,"Text labels are used as branch, unconditional jump targets and symbol offsets.\nText labels are added to the symbol table of the compiled module."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-assembly"},"loop:\n        j loop\n")),(0,n.kt)("p",null,"Numeric labels are used for local references. References to local labels are\nsuffixed with 'f' for a forward reference or 'b' for a backwards reference."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-assembly"},"1:\n        j 1b\n")),(0,n.kt)("h2",{id:"absolute-addressing"},"Absolute addressing"),(0,n.kt)("p",null,"The following example shows how to load an absolute address:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-assembly"},"    lui a0, %hi(msg + 1)\n    addi    a0, a0, %lo(msg + 1)\n")),(0,n.kt)("p",null,"Which generates the following assembler output and relocations\nas seen by ",(0,n.kt)("inlineCode",{parentName:"p"},"objdump"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-assembly"},"0000000000000000 <.text>:\n   0:   00000537            lui a0,0x0\n            0: R_RISCV_HI20 msg+0x1\n   4:   00150513            addi    a0,a0,1 # 0x1\n            4: R_RISCV_LO12_I   msg+0x1\n")),(0,n.kt)("h2",{id:"relative-addressing"},"Relative addressing"),(0,n.kt)("p",null,"The following example shows how to load a PC-relative address:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-assembly"},"1:\n    auipc   a0, %pcrel_hi(msg + 1)\n    addi    a0, a0, %pcrel_lo(1b)\n")),(0,n.kt)("p",null,"Which generates the following assembler output and relocations\nas seen by ",(0,n.kt)("inlineCode",{parentName:"p"},"objdump"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-assembly"},"0000000000000000 <.text>:\n   0:   00000517            auipc   a0,0x0\n            0: R_RISCV_PCREL_HI20   msg+0x1\n   4:   00050513            mv  a0,a0\n            4: R_RISCV_PCREL_LO12_I .L1\n")),(0,n.kt)("h2",{id:"got-indirect-addressing"},"GOT-indirect addressing"),(0,n.kt)("p",null,"The following example shows how to load an address from the GOT:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-assembly"},"1:\n    auipc   a0, %got_pcrel_hi(msg + 1)\n    ld  a0, %pcrel_lo(1b)(a0)\n")),(0,n.kt)("p",null,"Which generates the following assembler output and relocations\nas seen by ",(0,n.kt)("inlineCode",{parentName:"p"},"objdump"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-assembly"},"0000000000000000 <.text>:\n   0:   00000517            auipc   a0,0x0\n            0: R_RISCV_GOT_HI20 msg+0x1\n   4:   00050513            mv  a0,a0\n            4: R_RISCV_PCREL_LO12_I .L1\n")),(0,n.kt)("h2",{id:"load-immediate"},"Load Immediate"),(0,n.kt)("p",null,"The following example shows the ",(0,n.kt)("inlineCode",{parentName:"p"},"li")," pseudo instruction which\nis used to load immediate values:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-assembly"},"    .equ    CONSTANT, 0xdeadbeef\n\n    li  a0, CONSTANT\n")),(0,n.kt)("p",null,"Which, for RV32I, generates the following assembler output, as seen by ",(0,n.kt)("inlineCode",{parentName:"p"},"objdump"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-assembly"},"00000000 <.text>:\n   0:   deadc537            lui a0,0xdeadc\n   4:   eef50513            addi    a0,a0,-273 # deadbeef <CONSTANT+0x0>\n")),(0,n.kt)("h2",{id:"load-upper-immediates-immediate"},"Load Upper Immediate's Immediate"),(0,n.kt)("p",null,"The immediate argument to ",(0,n.kt)("inlineCode",{parentName:"p"},"lui")," is an integer in the interval ","[0x0, 0xfffff]",".\nIts compressed form, ",(0,n.kt)("inlineCode",{parentName:"p"},"c.lui"),", accepts only those in the subintervals ","[0x1, 0x1f]"," and ","[0xfffe0, 0xfffff]",". "),(0,n.kt)("h2",{id:"load-address"},"Load Address"),(0,n.kt)("p",null,"The following example shows the ",(0,n.kt)("inlineCode",{parentName:"p"},"la")," pseudo instruction which is used to load\nsymbol addresses using the correct sequence based on whether the code is being\nassembled as PIC:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-assembly"},"    la  a0, msg + 1\n")),(0,n.kt)("p",null,"For non-PIC this is an alias for the ",(0,n.kt)("inlineCode",{parentName:"p"},"lla")," pseudo instruction documented below."),(0,n.kt)("p",null,"For PIC this is an alias for the ",(0,n.kt)("inlineCode",{parentName:"p"},"lga")," pseudo instruction documented below."),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"la")," pseudo instruction is the preferred way for getting the address of\nvariables in assembly unless explicit control over PC-relative or GOT-indirect\naddressing is required."),(0,n.kt)("h2",{id:"load-local-address"},"Load Local Address"),(0,n.kt)("p",null,"The following example shows the ",(0,n.kt)("inlineCode",{parentName:"p"},"lla")," pseudo instruction which is used to load\nlocal symbol addresses:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-assembly"},"    lla a0, msg + 1\n")),(0,n.kt)("p",null,"This generates the following instructions and relocations as seen by ",(0,n.kt)("inlineCode",{parentName:"p"},"objdump"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-assembly"},"0000000000000000 <.text>:\n   0:   00000517            auipc   a0,0x0\n            0: R_RISCV_PCREL_HI20   msg+0x1\n   4:   00050513            mv  a0,a0\n            4: R_RISCV_PCREL_LO12_I .L0\n")),(0,n.kt)("h2",{id:"load-global-address"},"Load Global Address"),(0,n.kt)("p",null,"The following example shows the ",(0,n.kt)("inlineCode",{parentName:"p"},"lga")," pseudo instruction which is used to load\nglobal symbol addresses:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-assembly"},"    lga a0, msg + 1\n")),(0,n.kt)("p",null,"This generates the following instructions and relocations as seen by ",(0,n.kt)("inlineCode",{parentName:"p"},"objdump"),"\n(for RV64; RV32 will use ",(0,n.kt)("inlineCode",{parentName:"p"},"lw")," instead of ",(0,n.kt)("inlineCode",{parentName:"p"},"ld"),"):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-assembly"},"0000000000000000 <.text>:\n   0:   00000517            auipc   a0,0x0\n            0: R_RISCV_GOT_HI20 msg+0x1\n   4:   00053503            ld  a0,0(a0) # 0 <.text>\n            4: R_RISCV_PCREL_LO12_I .L0\n")),(0,n.kt)("h2",{id:"load-and-store-global"},"Load and Store Global"),(0,n.kt)("p",null,"The following pseudo instructions are available to load from and store to\nglobal objects:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"l{b|h|w|d} <rd>, <symbol>"),": load byte, half word, word or double word from global",(0,n.kt)("sup",{parentName:"li",id:"fnref-1"},(0,n.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"s{b|h|w|d} <rd>, <symbol>, <rt>"),": store byte, half word, word or double word to global",(0,n.kt)("sup",{parentName:"li",id:"fnref-2"},(0,n.kt)("a",{parentName:"sup",href:"#fn-2",className:"footnote-ref"},"2"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"fl{h|w|d|q} <rd>, <symbol>, <rt>"),": load half, float, double or quad precision from global",(0,n.kt)("sup",{parentName:"li",id:"fnref-2"},(0,n.kt)("a",{parentName:"sup",href:"#fn-2",className:"footnote-ref"},"2"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"fs{h|w|d|q} <rd>, <symbol>, <rt>"),": store half, float, double or quad precision to global",(0,n.kt)("sup",{parentName:"li",id:"fnref-2"},(0,n.kt)("a",{parentName:"sup",href:"#fn-2",className:"footnote-ref"},"2")))),(0,n.kt)("p",null,"The following example shows how these pseudo instructions are used:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-assembly"},"    lw  a0, var1\n    fld fa0, var2, t0\n    sw  a0, var3, t0\n    fsd fa0, var4, t0\n")),(0,n.kt)("p",null,"Which generates the following assembler output and relocations\nas seen by ",(0,n.kt)("inlineCode",{parentName:"p"},"objdump"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"0000000000000000 <.text>:\n   0:   00000517            auipc   a0,0x0\n            0: R_RISCV_PCREL_HI20   var1\n   4:   00052503            lw  a0,0(a0) # 0 <.text>\n            4: R_RISCV_PCREL_LO12_I .L0\n   8:   00000297            auipc   t0,0x0\n            8: R_RISCV_PCREL_HI20   var2\n   c:   0002b507            fld fa0,0(t0) # 8 <.text+0x8>\n            c: R_RISCV_PCREL_LO12_I .L0\n  10:   00000297            auipc   t0,0x0\n            10: R_RISCV_PCREL_HI20  var3\n  14:   00a2a023            sw  a0,0(t0) # 10 <.text+0x10>\n            14: R_RISCV_PCREL_LO12_S    .L0\n  18:   00000297            auipc   t0,0x0\n            18: R_RISCV_PCREL_HI20  var4\n  1c:   00a2b027            fsd fa0,0(t0) # 18 <.text+0x18>\n            1c: R_RISCV_PCREL_LO12_S    .L0\n")),(0,n.kt)("h2",{id:"constants"},"Constants"),(0,n.kt)("p",null,"The following example shows loading a constant using the ",(0,n.kt)("inlineCode",{parentName:"p"},"%hi")," and\n",(0,n.kt)("inlineCode",{parentName:"p"},"%lo")," assembler functions."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-assembly"},"    .equ    UART_BASE, 0x40003080\n\n    lui a0, %hi(UART_BASE)\n    addi    a0, a0, %lo(UART_BASE)\n")),(0,n.kt)("p",null,"Which generates the following assembler output\nas seen by ",(0,n.kt)("inlineCode",{parentName:"p"},"objdump"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-assembly"},"0000000000000000 <.text>:\n   0:   40003537            lui a0,0x40003\n   4:   08050513            addi    a0,a0,128 # 40003080 <UART_BASE>\n")),(0,n.kt)("h2",{id:"function-calls"},"Function Calls"),(0,n.kt)("p",null,"The following pseudo instructions are available to call subroutines far from\nthe current position:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"call\t<symbol>"),": call away subroutine",(0,n.kt)("sup",{parentName:"li",id:"fnref-1"},(0,n.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"call\t<rd>, <symbol>"),": call away subroutine",(0,n.kt)("sup",{parentName:"li",id:"fnref-2"},(0,n.kt)("a",{parentName:"sup",href:"#fn-2",className:"footnote-ref"},"2"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"tail\t<symbol>"),": tail call away subroutine",(0,n.kt)("sup",{parentName:"li",id:"fnref-3"},(0,n.kt)("a",{parentName:"sup",href:"#fn-3",className:"footnote-ref"},"3"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"jump\t<symbol>, <rt>"),": jump to away routine",(0,n.kt)("sup",{parentName:"li",id:"fnref-4"},(0,n.kt)("a",{parentName:"sup",href:"#fn-4",className:"footnote-ref"},"4")))),(0,n.kt)("p",null,"The following example shows how these pseudo instructions are used:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-assembly"},"    call    func1\n    tail    func2\n    jump    func3, t0\n")),(0,n.kt)("p",null,"Which generates the following assembler output and relocations\nas seen by ",(0,n.kt)("inlineCode",{parentName:"p"},"objdump"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"0000000000000000 <.text>:\n   0:   00000097            auipc   ra,0x0\n            0: R_RISCV_CALL func1\n   4:   000080e7            jalr    ra # 0x0\n   8:   00000317            auipc   t1,0x0\n            8: R_RISCV_CALL func2\n   c:   00030067            jr  t1 # 0x8\n  10:   00000297            auipc   t0,0x0\n            10: R_RISCV_CALL    func3\n  14:   00028067            jr  t0 # 0x10\n")),(0,n.kt)("h2",{id:"floating-point-rounding-modes"},"Floating-point rounding modes"),(0,n.kt)("p",null,"For floating-point instructions with a rounding mode field, the rounding mode\ncan be specified by adding an additional operand. e.g. ",(0,n.kt)("inlineCode",{parentName:"p"},"fcvt.w.s")," with\nround-to-zero can be written as ",(0,n.kt)("inlineCode",{parentName:"p"},"fcvt.w.s a0, fa0, rtz"),". If unspecified, the\ndefault ",(0,n.kt)("inlineCode",{parentName:"p"},"dyn")," rounding mode will be used."),(0,n.kt)("p",null,"Supported rounding modes are as follows (must be specified in lowercase):"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"rne"),": round to nearest, ties to even"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"rtz"),": round towards zero"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"rdn"),": round down"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"rup"),": round up"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"rmm"),": round to nearest, ties to max magnitude"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"dyn"),": dynamic rounding mode (the rounding mode specified in the ",(0,n.kt)("inlineCode",{parentName:"li"},"frm")," field\nof the ",(0,n.kt)("inlineCode",{parentName:"li"},"fcsr")," register is used)")),(0,n.kt)("h2",{id:"control-and-status-registers"},"Control and Status Registers"),(0,n.kt)("p",null,"The following code sample shows how to enable timer interrupts,\nset and wait for a timer interrupt to occur:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-assembly"},'.equ RTC_BASE,      0x40000000\n.equ TIMER_BASE,    0x40004000\n\n# setup machine trap vector\n1:      auipc   t0, %pcrel_hi(mtvec)        # load mtvec(hi)\n        addi    t0, t0, %pcrel_lo(1b)       # load mtvec(lo)\n        csrrw   zero, mtvec, t0\n\n# set mstatus.MIE=1 (enable M mode interrupt)\n        li      t0, 8\n        csrrs   zero, mstatus, t0\n\n# set mie.MTIE=1 (enable M mode timer interrupts)\n        li      t0, 128\n        csrrs   zero, mie, t0\n\n# read from mtime\n        li      a0, RTC_BASE\n        ld      a1, 0(a0)\n\n# write to mtimecmp\n        li      a0, TIMER_BASE\n        li      t0, 1000000000\n        add     a1, a1, t0\n        sd      a1, 0(a0)\n\n# loop\nloop:\n        wfi\n        j loop\n\n# break on interrupt\nmtvec:\n        csrrc  t0, mcause, zero\n        bgez t0, fail       # interrupt causes are less than zero\n        slli t0, t0, 1      # shift off high bit\n        srli t0, t0, 1\n        li t1, 7            # check this is an m_timer interrupt\n        bne t0, t1, fail\n        j pass\n\npass:\n        la a0, pass_msg\n        jal puts\n        j shutdown\n\nfail:\n        la a0, fail_msg\n        jal puts\n        j shutdown\n\n.section .rodata\n\npass_msg:\n        .string "PASS\\n"\n\nfail_msg:\n        .string "FAIL\\n"\n')),(0,n.kt)("h2",{id:"a-namepseudoinstructionsa-a-listing-of-standard-risc-v-pseudoinstructions"},(0,n.kt)("inlineCode",{parentName:"h2"},"<a name=pseudoinstructions></a>")," A listing of standard RISC-V pseudoinstructions"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Pseudoinstruction"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Base Instruction(s)"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Meaning"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Comment"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"la rd, symbol"),(0,n.kt)("td",{parentName:"tr",align:"left"},"auipc rd, symbol","[31:12]","; addi rd, rd, symbol","[11:0]"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Load address"),(0,n.kt)("td",{parentName:"tr",align:"left"},"With ",(0,n.kt)("inlineCode",{parentName:"td"},".option nopic")," (Default)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"la rd, symbol"),(0,n.kt)("td",{parentName:"tr",align:"left"},"auipc rd, symbol@GOT","[31:12]","; l{w","|","d} rd, symbol@GOT","[11:0]","(","rd",")"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Load address"),(0,n.kt)("td",{parentName:"tr",align:"left"},"With ",(0,n.kt)("inlineCode",{parentName:"td"},".option pic"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"lla rd, symbol"),(0,n.kt)("td",{parentName:"tr",align:"left"},"auipc rd, symbol","[31:12]","; addi rd, rd, symbol","[11:0]"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Load local address"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"lga rd, symbol"),(0,n.kt)("td",{parentName:"tr",align:"left"},"auipc rd, symbol@GOT","[31:12]","; l{w","|","d} rd, symbol@GOT","[11:0]","(","rd",")"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Load global address"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"l{b","|","h","|","w","|","d} rd, symbol"),(0,n.kt)("td",{parentName:"tr",align:"left"},"auipc rd, symbol","[31:12]","; l{b","|","h","|","w","|","d} rd, symbol","[11:0]","(","rd",")"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Load global"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"s{b","|","h","|","w","|","d} rd, symbol, rt"),(0,n.kt)("td",{parentName:"tr",align:"left"},"auipc rt, symbol","[31:12]","; s{b","|","h","|","w","|","d} rd, symbol","[11:0]","(","rt",")"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Store global"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"fl{w","|","d} rd, symbol, rt"),(0,n.kt)("td",{parentName:"tr",align:"left"},"auipc rt, symbol","[31:12]","; fl{w","|","d} rd, symbol","[11:0]","(","rt",")"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Floating-point load global"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"fs{w","|","d} rd, symbol, rt"),(0,n.kt)("td",{parentName:"tr",align:"left"},"auipc rt, symbol","[31:12]","; fs{w","|","d} rd, symbol","[11:0]","(","rt",")"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Floating-point store global"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"nop"),(0,n.kt)("td",{parentName:"tr",align:"left"},"addi x0, x0, 0"),(0,n.kt)("td",{parentName:"tr",align:"left"},"No operation"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"li rd, immediate"),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"Myriad sequences")),(0,n.kt)("td",{parentName:"tr",align:"left"},"Load immediate"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"mv rd, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"addi rd, rs, 0"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Copy register"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"not rd, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"xori rd, rs, -1"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Ones\u2019 complement"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"neg rd, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"sub rd, x0, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Two\u2019s complement"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"negw rd, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"subw rd, x0, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Two\u2019s complement word"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"sext.b rd, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"slli rd, rs, XLEN - 8; srai rd, rd, XLEN - 8"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Sign extend byte"),(0,n.kt)("td",{parentName:"tr",align:"left"},"It will expand to another instruction sequence when B extension is available*","[1]")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"sext.h rd, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"slli rd, rs, XLEN - 16; srai rd, rd, XLEN - 16"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Sign extend half word"),(0,n.kt)("td",{parentName:"tr",align:"left"},"It will expand to another instruction sequence when B extension is available*","[1]")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"sext.w rd, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"addiw rd, rs, 0"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Sign extend word"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"zext.b rd, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"andi rd, rs, 255"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Zero extend byte"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"zext.h rd, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"slli rd, rs, XLEN - 16; srli rd, rd, XLEN - 16"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Zero extend half word"),(0,n.kt)("td",{parentName:"tr",align:"left"},"It will expand to another instruction sequence when B extension is available*","[1]")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"zext.w rd, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"slli rd, rs, XLEN - 32; srli rd, rd, XLEN - 32"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Zero extend word"),(0,n.kt)("td",{parentName:"tr",align:"left"},"It will expand to another instruction sequence when B extension is available*","[1]")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"seqz rd, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"sltiu rd, rs, 1"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Set if = zero"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"snez rd, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"sltu rd, x0, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Set if != zero"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"sltz rd, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"slt rd, rs, x0"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Set if < zero"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"sgtz rd, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"slt rd, x0, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Set if > zero"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"fmv.s rd, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"fsgnj.s rd, rs, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Copy single-precision register"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"fabs.s rd, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"fsgnjx.s rd, rs, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Single-precision absolute value"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"fneg.s rd, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"fsgnjn.s rd, rs, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Single-precision negate"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"fmv.d rd, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"fsgnj.d rd, rs, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Copy double-precision register"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"fabs.d rd, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"fsgnjx.d rd, rs, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Double-precision absolute value"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"fneg.d rd, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"fsgnjn.d rd, rs, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Double-precision negate"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"beqz rs, offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"beq rs, x0, offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Branch if = zero"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"bnez rs, offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"bne rs, x0, offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Branch if != zero"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"blez rs, offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"bge x0, rs, offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Branch if \u2264 zero"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"bgez rs, offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"bge rs, x0, offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Branch if \u2265 zero"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"bltz rs, offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"blt rs, x0, offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Branch if < zero"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"bgtz rs, offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"blt x0, rs, offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Branch if > zero"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"bgt rs, rt, offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"blt rt, rs, offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Branch if >"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"ble rs, rt, offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"bge rt, rs, offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Branch if \u2264"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"bgtu rs, rt, offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"bltu rt, rs, offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Branch if >, unsigned"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"bleu rs, rt, offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"bgeu rt, rs, offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Branch if \u2264, unsigned"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"j offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"jal x0, offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Jump"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"jal offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"jal x1, offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Jump and link"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"jr rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"jalr x0, rs, 0"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Jump register"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"jalr rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"jalr x1, rs, 0"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Jump and link register"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"ret"),(0,n.kt)("td",{parentName:"tr",align:"left"},"jalr x0, x1, 0"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Return from subroutine"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"call offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"auipc x6, offset","[31:12]","; jalr x1, x6, offset","[11:0]"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Call far-away subroutine"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"tail offset"),(0,n.kt)("td",{parentName:"tr",align:"left"},"auipc x6, offset","[31:12]","; jalr x0, x6, offset","[11:0]"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Tail call far-away subroutine"),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"fence"),(0,n.kt)("td",{parentName:"tr",align:"left"},"fence iorw, iorw"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Fence on all memory and I/O"),(0,n.kt)("td",{parentName:"tr",align:"left"})))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"[1]"," We don't specify the code sequence when the B-extension is present, since B-extension still not ratified or frozen. We will specify the expansion sequence once it's frozen.")),(0,n.kt)("h2",{id:"pseudoinstructions-for-accessing-control-and-status-registers"},"Pseudoinstructions for accessing control and status registers"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Pseudoinstruction"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Base Instruction(s)"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Meaning"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"rdinstret","[h]"," rd"),(0,n.kt)("td",{parentName:"tr",align:"left"},"csrrs rd, instret","[h]",", x0"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Read instructions-retired counter")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"rdcycle","[h]"," rd"),(0,n.kt)("td",{parentName:"tr",align:"left"},"csrrs rd, cycle","[h]",", x0"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Read cycle counter")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"rdtime","[h]"," rd"),(0,n.kt)("td",{parentName:"tr",align:"left"},"csrrs rd, time","[h]",", x0"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Read real-time clock")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"csrr rd, csr"),(0,n.kt)("td",{parentName:"tr",align:"left"},"csrrs rd, csr, x0"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Read CSR")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"csrw csr, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"csrrw x0, csr, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Write CSR")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"csrs csr, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"csrrs x0, csr, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Set bits in CSR")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"csrc csr, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"csrrc x0, csr, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Clear bits in CSR")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"csrwi csr, imm"),(0,n.kt)("td",{parentName:"tr",align:"left"},"csrrwi x0, csr, imm"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Write CSR, immediate")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"csrsi csr, imm"),(0,n.kt)("td",{parentName:"tr",align:"left"},"csrrsi x0, csr, imm"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Set bits in CSR, immediate")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"csrci csr, imm"),(0,n.kt)("td",{parentName:"tr",align:"left"},"csrrci x0, csr, imm"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Clear bits in CSR, immediate")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"frcsr rd"),(0,n.kt)("td",{parentName:"tr",align:"left"},"csrrs rd, fcsr, x0"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Read FP control/status register")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"fscsr rd, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"csrrw rd, fcsr, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Swap FP control/status register")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"fscsr rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"csrrw x0, fcsr, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Write FP control/status register")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"frrm rd"),(0,n.kt)("td",{parentName:"tr",align:"left"},"csrrs rd, frm, x0"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Read FP rounding mode")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"fsrm rd, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"csrrw rd, frm, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Swap FP rounding mode")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"fsrm rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"csrrw x0, frm, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Write FP rounding mode")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"fsrmi rd, imm"),(0,n.kt)("td",{parentName:"tr",align:"left"},"csrrwi rd, frm, imm"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Swap FP rounding mode, immediate")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"fsrmi imm"),(0,n.kt)("td",{parentName:"tr",align:"left"},"csrrwi x0, frm, imm"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Write FP rounding mode, immediate")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"frflags rd"),(0,n.kt)("td",{parentName:"tr",align:"left"},"csrrs rd, fflags, x0"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Read FP exception flags")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"fsflags rd, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"csrrw rd, fflags, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Swap FP exception flags")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"fsflags rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"csrrw x0, fflags, rs"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Write FP exception flags")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"fsflagsi rd, imm"),(0,n.kt)("td",{parentName:"tr",align:"left"},"csrrwi rd, fflags, imm"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Swap FP exception flags, immediate")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"fsflagsi imm"),(0,n.kt)("td",{parentName:"tr",align:"left"},"csrrwi x0, fflags, imm"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Write FP exception flags, immediate")))),(0,n.kt)("div",{className:"footnotes"},(0,n.kt)("hr",{parentName:"div"}),(0,n.kt)("ol",{parentName:"div"},(0,n.kt)("li",{parentName:"ol",id:"fn-1"},"the first operand is implicitly used as a scratch register.",(0,n.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-2"},"the last operand specifies the scratch register to be used.",(0,n.kt)("a",{parentName:"li",href:"#fnref-2",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-3"},(0,n.kt)("inlineCode",{parentName:"li"},"t1")," is implicitly used as a scratch register.",(0,n.kt)("a",{parentName:"li",href:"#fnref-3",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-4"},"similar to ",(0,n.kt)("inlineCode",{parentName:"li"},"tail <symbol>"),", but ",(0,n.kt)("inlineCode",{parentName:"li"},"<rt>")," is used as the scratch register instead.",(0,n.kt)("a",{parentName:"li",href:"#fnref-4",className:"footnote-backref"},"\u21a9")))))}m.isMDXComponent=!0}}]);