"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[50385],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>d});var r=t(67294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var o=r.createContext({}),u=function(n){var e=r.useContext(o),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},p=function(n){var e=u(n.components);return r.createElement(o.Provider,{value:e},n.children)},f="mdxType",c={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,a=n.originalType,o=n.parentName,p=l(n,["components","mdxType","originalType","parentName"]),f=u(t),m=i,d=f["".concat(o,".").concat(m)]||f[m]||c[m]||a;return t?r.createElement(d,s(s({ref:e},p),{},{components:t})):r.createElement(d,s({ref:e},p))}));function d(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var a=t.length,s=new Array(a);s[0]=m;var l={};for(var o in e)hasOwnProperty.call(e,o)&&(l[o]=e[o]);l.originalType=n,l[f]="string"==typeof n?n:i,s[1]=l;for(var u=2;u<a;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6969:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>s,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=t(87462),i=(t(67294),t(3905));const a={},s=void 0,l={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6709\u5e8f\u5e8f\u5217/\u6ee1\u8db3\u4e0d\u7b49\u5f0f\u7684\u6570\u5bf9\u6570\u76ee",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6709\u5e8f\u5e8f\u5217/\u6ee1\u8db3\u4e0d\u7b49\u5f0f\u7684\u6570\u5bf9\u6570\u76ee",title:"\u6ee1\u8db3\u4e0d\u7b49\u5f0f\u7684\u6570\u5bf9\u6570\u76ee",description:"\u9898\u76ee\uff1a2426 \u6ee1\u8db3\u4e0d\u7b49\u5f0f\u7684\u6570\u5bf9\u6570\u76ee",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6709\u5e8f\u5e8f\u5217/2426-\u6ee1\u8db3\u4e0d\u7b49\u5f0f\u7684\u6570\u5bf9\u6570\u76ee.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6709\u5e8f\u5e8f\u5217",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6709\u5e8f\u5e8f\u5217/\u6ee1\u8db3\u4e0d\u7b49\u5f0f\u7684\u6570\u5bf9\u6570\u76ee",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6709\u5e8f\u5e8f\u5217/\u6ee1\u8db3\u4e0d\u7b49\u5f0f\u7684\u6570\u5bf9\u6570\u76ee",draft:!1,tags:[],version:"current",sidebarPosition:2426,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<\u6709\u5e8f\u5e8f\u5217-\u5927\u5c0f\u5806-\u91cd\u8f7d\u8fd0\u7b97\u7b26>-\u5e8f\u5217\u987a\u5e8f\u67e5\u8be2",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6709\u5e8f\u5e8f\u5217/<\u6709\u5e8f\u5e8f\u5217-\u5927\u5c0f\u5806-\u91cd\u8f7d\u8fd0\u7b97\u7b26>-\u5e8f\u5217\u987a\u5e8f\u67e5\u8be2"},next:{title:"<\u5355\u8c03\u6808>-\u67f1\u72b6\u56fe\u4e2d\u6700\u5927\u7684\u77e9\u5f62",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6808/<\u5355\u8c03\u6808>-\u67f1\u72b6\u56fe\u4e2d\u6700\u5927\u7684\u77e9\u5f62"}},o={},u=[],p={toc:u};function f(n){let{components:e,...t}=n;return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"\u9898\u76ee\uff1a",(0,i.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/number-of-pairs-satisfying-inequality/"},"2426 \u6ee1\u8db3\u4e0d\u7b49\u5f0f\u7684\u6570\u5bf9\u6570\u76ee")),(0,i.kt)("p",null,"\u7ed9\u4f60\u4e24\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u6574\u6570\u6570\u7ec4 nums1 \u548c nums2 \uff0c\u4e24\u4e2a\u6570\u7ec4\u7684\u5927\u5c0f\u90fd\u4e3a n \uff0c\u540c\u65f6\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 diff \uff0c\u7edf\u8ba1\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684 \u6570\u5bf9 (i, j) \uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0 <= i < j <= n - 1")," ",(0,i.kt)("strong",{parentName:"li"},"\u4e14")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nums1[i] - nums1[j] <= nums2[i] - nums2[j] + diff"),".")),(0,i.kt)("p",null,"\u8bf7\u4f60\u8fd4\u56de\u6ee1\u8db3\u6761\u4ef6\u7684 ",(0,i.kt)("strong",{parentName:"p"},"\u6570\u5bf9\u6570\u76ee")," \u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u793a\u4f8b 1\uff1a\n\n\u8f93\u5165\uff1anums1 = [3,2,5], nums2 = [2,2,1], diff = 1\n\u8f93\u51fa\uff1a3\n\u89e3\u91ca\uff1a\n\u603b\u5171\u6709 3 \u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5bf9\uff1a\n1. i = 0, j = 1\uff1a3 - 2 <= 2 - 2 + 1 \u3002\u56e0\u4e3a i < j \u4e14 1 <= 1 \uff0c\u8fd9\u4e2a\u6570\u5bf9\u6ee1\u8db3\u6761\u4ef6\u3002\n2. i = 0, j = 2\uff1a3 - 5 <= 2 - 1 + 1 \u3002\u56e0\u4e3a i < j \u4e14 -2 <= 2 \uff0c\u8fd9\u4e2a\u6570\u5bf9\u6ee1\u8db3\u6761\u4ef6\u3002\n3. i = 1, j = 2\uff1a2 - 5 <= 2 - 1 + 1 \u3002\u56e0\u4e3a i < j \u4e14 -3 <= 2 \uff0c\u8fd9\u4e2a\u6570\u5bf9\u6ee1\u8db3\u6761\u4ef6\u3002\n\u6240\u4ee5\uff0c\u6211\u4eec\u8fd4\u56de 3 \u3002\n\n\u793a\u4f8b 2\uff1a\n\n\u8f93\u5165\uff1anums1 = [3,-1], nums2 = [-2,2], diff = -1\n\u8f93\u51fa\uff1a0\n\u89e3\u91ca\uff1a\n\u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u4efb\u4f55\u6570\u5bf9\uff0c\u6240\u4ee5\u6211\u4eec\u8fd4\u56de 0 \u3002\n")),(0,i.kt)("p",null,"\u63d0\u793a\uff1a"),(0,i.kt)("p",null,"n == nums1.length == nums2.length\n2 <= n <= 105\n-104 <= nums1","[i]",", nums2","[i]"," <= 104\n-104 <= diff <= 104"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"\u672c\u9898\u7528\u5230\u7684\u6280\u5de7\u662f\uff0c\u5408\u5e76\u4e0b\u6807\u76f8\u540c\u7684\u5143\u7d20\u3002"),(0,i.kt)("p",null,"\u5f0f\u5b50\u53d8\u5f62\u5f97\n$$\nnums_1","[i]","-nums_2","[i]"," \\leq nums_1","[j]","-nums_2","[j]"," + diff\n$$\n\u8bb0 $a","[i]"," = nums_1","[i]"," - nums_2","[i]","$\uff0c\u4e0a\u5f0f\u4e3a\n$$\na","[i]"," \\leq a","[j]"," + diff\n$$\n\u56e0\u6b64\u672c\u9898\u548c ",(0,i.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/"},"\u5251\u6307 Offer 51. \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9"),"\u3001",(0,i.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/count-of-smaller-numbers-after-self/"},"315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570")," \u7b49\u9898\u76ee\u5b9e\u8d28\u4e0a\u662f\u540c\u4e00\u7c7b\u9898\uff0c\u7528",(0,i.kt)("strong",{parentName:"p"},"\u5f52\u5e76\u6392\u5e8f"),"\u6216\u8005",(0,i.kt)("strong",{parentName:"p"},"\u6811\u72b6\u6570\u7ec4"),"\u7b49\u5747\u53ef\u4ee5\u901a\u8fc7\u3002"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"\u6bd4\u8d5b\u7684\u65f6\u5019\u4e0d\u592a\u4f1a\u7528\u6811\u72b6\u6570\u7ec4\uff0c\u7528python \u4e2d\u7684 SortedList() \u548c bisect_right()\uff0c\u4e5f\u53ef\u5f97\u5230",(0,i.kt)("strong",{parentName:"p"},"\u5de6\u4fa7\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from sortedcontainers import SortedList\nclass Solution:\n    def numberOfPairs(self, nums1: List[int], nums2: List[int], diff: int) -> int:\n        a = []\n        n = len(nums1)\n        for i in range(n):\n            a.append(nums1[i] - nums2[i])\n        b = a[:]\n        for i in range(n):\n            b[i] += diff\n        \n        ans = 0\n        sl = SortedList()\n        for j in range(1, n):\n            sl.add(a[j-1])\n            idx = sl.bisect_right(b[j]) # \u8fd4\u56de s1 \u4e2d\u7684\u5de6\u4fa7\u5c0f\u4e8e\u7b49\u4e8e b[j] \u7684\u6709\u591a\u5c11\u4e2a\n            ans += idx\n        return ans\n\n")),(0,i.kt)("p",null,"\u6811\u72b6\u6570\u7ec4\u7684\u5199\u6cd5"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def numberOfPairs(self, a: List[int], nums2: List[int], diff: int) -> int:\n        for i, x in enumerate(nums2):\n            a[i] -= x\n        b = a.copy()\n        b.sort()  # \u914d\u5408\u4e0b\u9762\u7684\u4e8c\u5206\uff0c\u79bb\u6563\u5316\n\n        ans = 0\n        t = BIT(len(a) + 1)\n        for x in a:\n            ans += t.query(bisect_right(b, x + diff))\n            t.add(bisect_left(b, x) + 1)\n        return ans\n\nclass BIT:\n    def __init__(self, n):\n        self.tree = [0] * n\n\n    def add(self, x):\n        while x < len(self.tree):\n            self.tree[x] += 1\n            x += x & -x\n\n    def query(self, x):\n        res = 0\n        while x > 0:\n            res += self.tree[x]\n            x &= x - 1\n        return res\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"class BIT {\nprivate:\n    vector<int> tree;\n\npublic:\n    BIT(int n) : tree(n) {}\n\n    void add(int x) {\n        while (x < tree.size()) {\n            ++tree[x];\n            x += x & -x;\n        }\n    }\n\n    int query(int x) {\n        int res = 0;\n        while (x > 0) {\n            res += tree[x];\n            x &= x - 1;\n        }\n        return res;\n    }\n};\n\nclass Solution {\npublic:\n    long long numberOfPairs(vector<int> &a, vector<int> &nums2, int diff) {\n        int n = a.size();\n        for (int i = 0; i < n; ++i)\n            a[i] -= nums2[i];\n        auto b = a;\n        sort(b.begin(), b.end()); // \u914d\u5408\u4e0b\u9762\u7684\u4e8c\u5206\uff0c\u79bb\u6563\u5316\n\n        long ans = 0L;\n        auto t = new BIT(n + 1);\n        for (int x : a) {\n            ans += t->query(upper_bound(b.begin(), b.end(), x + diff) - b.begin());\n            t->add(lower_bound(b.begin(), b.end(), x) - b.begin() + 1);\n        }\n        return ans;\n    }\n};\n")))}f.isMDXComponent=!0}}]);