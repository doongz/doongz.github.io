"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9514],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},p=Object.keys(e);for(r=0;r<p.length;r++)t=p[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)t=p[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},m="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,p=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(t),d=o,f=m["".concat(l,".").concat(d)]||m[d]||s[d]||p;return t?r.createElement(f,a(a({ref:n},c),{},{components:t})):r.createElement(f,a({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var p=t.length,a=new Array(p);a[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[m]="string"==typeof e?e:o,a[1]=i;for(var u=2;u<p;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},85970:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>p,metadata:()=>i,toc:()=>u});var r=t(87462),o=(t(67294),t(3905));const p={},a=void 0,i={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<TopK>-\u524dK\u4e2a\u9ad8\u9891\u5143\u7d20",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<TopK>-\u524dK\u4e2a\u9ad8\u9891\u5143\u7d20",title:"<TopK>-\u524dK\u4e2a\u9ad8\u9891\u5143\u7d20",description:"347. \u524d K \u4e2a\u9ad8\u9891\u5143\u7d20",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/347-<TopK>-\u524dK\u4e2a\u9ad8\u9891\u5143\u7d20.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<TopK>-\u524dK\u4e2a\u9ad8\u9891\u5143\u7d20",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<TopK>-\u524dK\u4e2a\u9ad8\u9891\u5143\u7d20",draft:!1,tags:[],version:"current",sidebarPosition:347,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<\u5927\u5c0f\u6839\u5806>-\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<\u5927\u5c0f\u6839\u5806>-\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570"},next:{title:"<\u591a\u8def\u5f52\u5e76>-\u67e5\u627e\u548c\u6700\u5c0f\u7684K\u5bf9\u6570\u5b57",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<\u591a\u8def\u5f52\u5e76>-\u67e5\u627e\u548c\u6700\u5c0f\u7684K\u5bf9\u6570\u5b57"}},l={},u=[{value:"\u65b9\u6cd5\uff1a\u63a7\u5236\u5806\u7684\u5927\u5c0f",id:"\u65b9\u6cd5\u63a7\u5236\u5806\u7684\u5927\u5c0f",level:2}],c={toc:u};function m(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/top-k-frequent-elements/"},"347. \u524d K \u4e2a\u9ad8\u9891\u5143\u7d20")),(0,o.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 ",(0,o.kt)("inlineCode",{parentName:"p"},"nums")," \u548c\u4e00\u4e2a\u6574\u6570 ",(0,o.kt)("inlineCode",{parentName:"p"},"k")," \uff0c\u8bf7\u4f60\u8fd4\u56de\u5176\u4e2d\u51fa\u73b0\u9891\u7387\u524d ",(0,o.kt)("inlineCode",{parentName:"p"},"k")," \u9ad8\u7684\u5143\u7d20\u3002\u4f60\u53ef\u4ee5\u6309 ",(0,o.kt)("strong",{parentName:"p"},"\u4efb\u610f\u987a\u5e8f")," \u8fd4\u56de\u7b54\u6848\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u8f93\u5165: nums = [1,1,1,2,2,3], k = 2\n\u8f93\u51fa: [1,2]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u8f93\u5165: nums = [1], k = 1\n\u8f93\u51fa: [1]\n")),(0,o.kt)("p",null,"\u63d0\u793a\uff1a"),(0,o.kt)("p",null,"1 <= nums.length <= 105\nk \u7684\u53d6\u503c\u8303\u56f4\u662f ","[1, \u6570\u7ec4\u4e2d\u4e0d\u76f8\u540c\u7684\u5143\u7d20\u7684\u4e2a\u6570]","\n\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u7b54\u6848\u552f\u4e00\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u6570\u7ec4\u4e2d\u524d k \u4e2a\u9ad8\u9891\u5143\u7d20\u7684\u96c6\u5408\u662f\u552f\u4e00\u7684"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u8fdb\u9636\uff1a"),"\u4f60\u6240\u8bbe\u8ba1\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6 ",(0,o.kt)("strong",{parentName:"p"},"\u5fc5\u987b")," \u4f18\u4e8e ",(0,o.kt)("inlineCode",{parentName:"p"},"O(n log n)")," \uff0c\u5176\u4e2d ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," \u662f\u6570\u7ec4\u5927\u5c0f\u3002"),(0,o.kt)("h2",{id:"\u65b9\u6cd5\u63a7\u5236\u5806\u7684\u5927\u5c0f"},"\u65b9\u6cd5\uff1a\u63a7\u5236\u5806\u7684\u5927\u5c0f"),(0,o.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,o.kt)("inlineCode",{parentName:"p"},"O(nlogk)")),(0,o.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,o.kt)("inlineCode",{parentName:"p"},"O(n)"),"\uff0cunordered_map \u4e3a ",(0,o.kt)("inlineCode",{parentName:"p"},"O(n)"),"\uff0cpriority_queue \u4e3a ",(0,o.kt)("inlineCode",{parentName:"p"},"O(k)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    struct cmpSmall {\n        bool operator()(pair<int, int> &p1, pair<int, int> &p2) {\n            return p1.second > p2.second;\n        }\n    };\n    vector<int> topKFrequent(vector<int> &nums, int k) {\n        unordered_map<int, int> um;\n        for (int num : nums) {\n            um[num]++;\n        }\n\n        priority_queue<pair<int, int>, vector<pair<int, int>>, cmpSmall> smallQ;\n        for (auto it = um.begin(); it != um.end(); it++) {  // \u6ce8\u610f\uff1aunordered_map\u7684\u8fed\u4ee3\u5668\u4e3a\u5411\u524d\u8fed\u4ee3\u5668\n            if (smallQ.size() < k) {\n                smallQ.push(*it);\n            } else {\n                if (it->second > smallQ.top().second) {\n                    smallQ.pop();\n                    smallQ.push(*it);\n                }\n            }\n        }\n\n        vector<int> ans;\n        while (!smallQ.empty()) {\n            ans.push_back(smallQ.top().first);\n            smallQ.pop();\n        }\n        return ans;\n    }\n};\n")))}m.isMDXComponent=!0}}]);