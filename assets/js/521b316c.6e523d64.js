"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[83283],{3905:(e,r,n)=>{n.d(r,{Zo:()=>c,kt:()=>m});var t=n(67294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function d(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=t.createContext({}),p=function(e){var r=t.useContext(a),n=r;return e&&(n="function"==typeof e?e(r):d(d({},r),e)),n},c=function(e){var r=p(e.components);return t.createElement(a.Provider,{value:r},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},f=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=p(n),f=o,m=s["".concat(a,".").concat(f)]||s[f]||u[f]||i;return n?t.createElement(m,d(d({ref:r},c),{},{components:n})):t.createElement(m,d({ref:r},c))}));function m(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=n.length,d=new Array(i);d[0]=f;var l={};for(var a in r)hasOwnProperty.call(r,a)&&(l[a]=r[a]);l.originalType=e,l[s]="string"==typeof e?e:o,d[1]=l;for(var p=2;p<i;p++)d[p]=n[p];return t.createElement.apply(null,d)}return t.createElement.apply(null,n)}f.displayName="MDXCreateElement"},90923:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>d,default:()=>s,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var t=n(87462),o=(n(67294),n(3905));const i={},d=void 0,l={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<\u91cd\u5efa\u6811>-\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<\u91cd\u5efa\u6811>-\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",title:"<\u91cd\u5efa\u6811>-\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",description:"\u9898\u76ee\uff1a105. \u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/105-<\u91cd\u5efa\u6811>-\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<\u91cd\u5efa\u6811>-\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<\u91cd\u5efa\u6811>-\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",draft:!1,tags:[],version:"current",sidebarPosition:105,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<bfs>-\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<bfs>-\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6"},next:{title:"<\u91cd\u5efa\u6811>-\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<\u91cd\u5efa\u6811>-\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"}},a={},p=[],c={toc:p};function s(e){let{components:r,...n}=e;return(0,o.kt)("wrapper",(0,t.Z)({},c,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u9898\u76ee\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/"},"105. \u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811")),(0,o.kt)("p",null,"\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\u6570\u7ec4 preorder \u548c inorder \uff0c\u5176\u4e2d preorder \u662f\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u904d\u5386\uff0c inorder \u662f\u540c\u4e00\u68f5\u6811\u7684\u4e2d\u5e8f\u904d\u5386\uff0c\u8bf7\u6784\u9020\u4e8c\u53c9\u6811\u5e76\u8fd4\u56de\u5176\u6839\u8282\u70b9\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1:")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/02/19/tree.jpg",alt:"img"})),(0,o.kt)("p",null,"\u8f93\u5165: preorder = ","[3,9,20,15,7]",", inorder = ","[9,3,15,20,7]","\n\u8f93\u51fa: ","[3,9,20,null,null,15,7]"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u8f93\u5165: preorder = [-1], inorder = [-1]\n\u8f93\u51fa: [-1]\n")),(0,o.kt)("p",null,"\u63d0\u793a:"),(0,o.kt)("p",null,"1 <= preorder.length <= 3000\ninorder.length == preorder.length\n-3000 <= preorder","[i]",", inorder","[i]"," <= 3000\npreorder \u548c inorder \u5747 \u65e0\u91cd\u590d \u5143\u7d20\ninorder \u5747\u51fa\u73b0\u5728 preorder\npreorder \u4fdd\u8bc1 \u4e3a\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u5e8f\u5217\ninorder \u4fdd\u8bc1 \u4e3a\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"1\u3001\u9898\u76ee\u544a\u8bc9\u6211\u4eec\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u624d\u53ef\u4ee5\u7528 inorderIdx \u8bb0\u5f55\u5176\u4e2d\u8282\u70b9\u7684index"),(0,o.kt)("p",null,"2\u3001Input: preorder = ","[3,9,20,15,7]",", inorder = ","[9,3,15,20,7]"),(0,o.kt)("p",null," \t\u5982\u679c\u8f93\u5165\u4e2d\u6709 None \u6765\u6807\u8bb0\u6ca1\u6709\u8282\u70b9\u4e86\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u524d\u5e8f\u5c31\u80fd\u6062\u590d"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:\n        # \u5148\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u662f\u6839\u8282\u70b9\uff0c\u5de6\u5b50\u6811\uff0c\u53f3\u5b50\u6811\u3002\u4e2d\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u662f\u5de6\u5b50\u6811\uff0c\u6839\u8282\u70b9\uff0c\u53f3\u5b50\u6811\u3002\n        # \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u6839\u636e\u5148\u5e8f\u904d\u5386\u5f97\u5230\u6839\u8282\u70b9\uff0c\u7136\u540e\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u5230\u6839\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u5b83\u7684\u5de6\u8fb9\u5c31\u662f\u5de6\u5b50\u6811\u7684\u8282\u70b9\uff0c\u53f3\u8fb9\u5c31\u662f\u53f3\u5b50\u6811\u7684\u8282\u70b9\u3002\n        # \u751f\u6210\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u5c31\u53ef\u4ee5\u9012\u5f52\u7684\u8fdb\u884c\u4e86\u3002\n        inorderIdx = collections.defaultdict(int)\n        for i, v in enumerate(inorder):\n            inorderIdx[v] = i\n\n        def dfs(preStart, preEnd, inStart, inEnd):\n            # preStart  \u6307\u5411\u524d\u5e8f\u7684\u8d77\u70b9\n            # preEnd    \u6307\u5411\u524d\u5e8f\u7684\u7ec8\u70b9\n            # inStart   \u6307\u5411\u4e2d\u5e8f\u7684\u8d77\u70b9\n            # inEnd     \u6307\u5411\u4e2d\u5e8f\u7684\u7ec8\u70b9\n            if preStart > preEnd or inStart > inEnd:\n                return None\n\n            root_val = preorder[preStart]\n            root_in_idx = inorderIdx[root_val]\n            left_size = root_in_idx - inStart\n\n            node = TreeNode(root_val)\n            node.left = dfs(preStart+1, preStart+left_size, inStart, root_in_idx-1)\n            node.right = dfs(preStart+left_size+1, preEnd, root_in_idx+1, inEnd)\n            # \u5de6\u5b50\u6811\uff1a\u524d\u5e8f\u8d77\u70b9+1            \u524d\u5e8f\u8d77\u70b9+\u5de6\u5b50\u6811\u5bbd\u5ea6 \u4e2d\u5e8f\u8d77\u70b9    \u8282\u70b9\u4e2d\u5e8f-1\n            # \u53f3\u5b50\u6811\uff1a\u524d\u5e8f\u8d77\u70b9+\u5de6\u5b50\u6811\u5bbd\u5ea6+1 \u524d\u5e8f\u7ec8\u70b9            \u8282\u70b9\u4e2d\u5e8f+1  \u4e2d\u5e8f\u7ec8\u70b9\n            # \u8f85\u52a9\u8bb0\u5fc6\n            # \u524d\u5e8f\uff1a\u8282\u70b9 + \u524d\u5e8f\u8d77\u70b9+1 -> \u524d\u5e8f\u8d77\u70b9+\u5de6\u5b50\u6811\u5bbd\u5ea6 -> \u524d\u5e8f\u8d77\u70b9+\u5de6\u5b50\u6811\u5bbd\u5ea6+1 -> \u524d\u5e8f\u7ec8\u70b9\n            # \u4e2d\u5e8f\uff1a\u4e2d\u5e8f\u8d77\u70b9 -> \u8282\u70b9\u4e2d\u5e8f-1 + \u8282\u70b9 + \u8282\u70b9\u4e2d\u5e8f+1 -> \u4e2d\u5e8f\u7ec8\u70b9\n            \n            return node\n\n        return dfs(0, len(preorder) - 1, 0, len(inorder) - 1)\n")),(0,o.kt)("p",null,"c++"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c++"},"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int n;\n    unordered_map<int, int> inorderIdx;\n    vector<int> Preorder;\n    vector<int> Inorder;\n\n    TreeNode* dfs(int preStart, int preEnd, int inStart, int inEnd) {\n        if (preStart > preEnd || inStart > inEnd) {\n            return nullptr;\n        }\n\n        int root_val = Preorder[preStart];\n        int root_in_idx = inorderIdx[root_val];\n        int left_size = root_in_idx - inStart;\n\n        TreeNode* node = new TreeNode(root_val);\n        node->left = dfs(preStart + 1, preStart + left_size, inStart, root_in_idx - 1);\n        node->right = dfs(preStart + left_size + 1, preEnd, root_in_idx + 1, inEnd);\n\n        return node;\n    }\n\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        n = preorder.size();\n        Preorder = preorder;\n        Inorder = inorder;\n        for (int i = 0; i < n; i++) {\n            inorderIdx[inorder[i]] = i;\n        }\n\n        return dfs(0, n - 1, 0, n - 1);\n    }\n};\n")))}s.isMDXComponent=!0}}]);