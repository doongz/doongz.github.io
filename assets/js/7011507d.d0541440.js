"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[34712],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>f});var i=t(67294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,i,r=function(n,e){if(null==n)return{};var t,i,r={},a=Object.keys(n);for(i=0;i<a.length;i++)t=a[i],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(i=0;i<a.length;i++)t=a[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var s=i.createContext({}),u=function(n){var e=i.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},p=function(n){var e=u(n.components);return i.createElement(s.Provider,{value:e},n.children)},c="mdxType",m={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},d=i.forwardRef((function(n,e){var t=n.components,r=n.mdxType,a=n.originalType,s=n.parentName,p=l(n,["components","mdxType","originalType","parentName"]),c=u(t),d=r,f=c["".concat(s,".").concat(d)]||c[d]||m[d]||a;return t?i.createElement(f,o(o({ref:e},p),{},{components:t})):i.createElement(f,o({ref:e},p))}));function f(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var a=t.length,o=new Array(a);o[0]=d;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l[c]="string"==typeof n?n:r,o[1]=l;for(var u=2;u<a;u++)o[u]=t[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},97149:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var i=t(87462),r=(t(67294),t(3905));const a={},o="C++ \u8c03\u8bd5\u6a21\u7248",l={unversionedId:"Algorithm/\u524d\u8ff0/\u6a21\u7248",id:"Algorithm/\u524d\u8ff0/\u6a21\u7248",title:"C++ \u8c03\u8bd5\u6a21\u7248",description:"\u5904\u7406\u8f93\u5165",source:"@site/docs/Algorithm/0-\u524d\u8ff0/2-\u6a21\u7248.md",sourceDirName:"Algorithm/0-\u524d\u8ff0",slug:"/Algorithm/\u524d\u8ff0/\u6a21\u7248",permalink:"/docs/Algorithm/\u524d\u8ff0/\u6a21\u7248",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"docsSidebar",previous:{title:"\u9762\u8bd5\u65f6\u505a\u9898\u6280\u5de7",permalink:"/docs/Algorithm/\u524d\u8ff0/\u9762\u8bd5\u65f6\u505a\u9898\u6280\u5de7"},next:{title:"\u5e38\u89c1\u62a5\u9519",permalink:"/docs/Algorithm/\u524d\u8ff0/\u5e38\u89c1\u62a5\u9519"}},s={},u=[{value:"\u5904\u7406\u8f93\u5165",id:"\u5904\u7406\u8f93\u5165",level:2},{value:"C++ \u6a21\u7248",id:"c-\u6a21\u7248",level:2},{value:"python \u4f8b\u5b50",id:"python-\u4f8b\u5b50",level:2},{value:"Input",id:"input",level:3},{value:"Output",id:"output",level:3},{value:"Example",id:"example",level:3},{value:"Note",id:"note",level:3},{value:"Solu",id:"solu",level:3}],p={toc:u};function c(n){let{components:e,...t}=n;return(0,r.kt)("wrapper",(0,i.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"c-\u8c03\u8bd5\u6a21\u7248"},"C++ \u8c03\u8bd5\u6a21\u7248"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'#include <algorithm>  // *min_element() reverse() sort() lower_bound() upper_bound()\n#include <array>\n#include <climits>\n#include <cmath>  // abs() pow()\n#include <deque>\n#include <iostream>\n#include <map>      // map multimap\n#include <numeric>  // accumulate() iota()\n#include <queue>    // queue priority_queue\n#include <set>      // set multiset\n#include <stack>\n#include <string>\n#include <unordered_map>\n#include <unordered_set>\n#include <utility>  // pair\n#include <vector>\n// \u5185\u7f6e: swap() max()\n\nusing namespace std;\n\nvoid print_unordered_map(unordered_map<int, vector<int>> &umap) {\n    for (auto &[k, v] : umap) {\n        cout << k << " : ";\n        for (auto num : v) {\n            cout << num << " ";\n        }\n        cout << endl;\n    }\n}\n\nvoid print_priority_queue(priority_queue<int> queue) {\n    // \u4e0d\u53ef\u4f20\u5f15\u7528\n    while (!queue.empty()) {\n        cout << queue.top() << " ";\n        queue.pop();\n    }\n    cout << endl;\n}\n\nint main() {\n    return 0;\n}\n')),(0,r.kt)("h2",{id:"\u5904\u7406\u8f93\u5165"},"\u5904\u7406\u8f93\u5165"),(0,r.kt)("p",null,"\u534e\u4e3a\u597d\u50cf\u5c31\u597d\u8fd9\u53e3\u3002\u3002\u3002\u524d\u51e0\u5929\u6253\u534e\u4e3a\u8f6f\u6311\u4ed6\u4eec\u7684\u8f93\u5165\u683c\u5f0f\u662f(a, 1, 3, 100)\u8fd9\u79cd\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u3002\u3002\u3002"),(0,r.kt)("p",null,"C++\u53ef\u4ee5\u5229\u7528getline\u548cistringstream\u53ef\u4ee5\u83b7\u53d6\uff0c\u4ee5\u524d\u4e5f\u9047\u5230\u8fc7\u8fd9\u79cd\uff0c\u7814\u7a76\u4e86\u534a\u5929\u3002 \u8fd9\u4e2a\u53ef\u4ee5\u83b7\u53d6\u4e8c\u7ef4\u77e9\u9635\u578b\u6570\u636e\uff0c\u53ef\u4ee5\u53bb\u9017\u53f7\uff0c\u7a7a\u683c\u5565\u7684\u3002\u5982\u679c\u53ea\u6709\u4e00\u7ef4\u53ef\u4ee5\u628a\u5916\u9762\u5faa\u73af\u53bb\u6389\u3002\u5176\u4ed6\u8bed\u8a00\u6309\u9017\u53f7\u5207\u7247\u5c31\u597d\u3002"),(0,r.kt)("p",null,"\u56e0\u4e3a\u6211\u5faa\u73af\u6761\u4ef6\u91cc\u5199\u4e86!line.empty()\u7528\u4e8e\u68c0\u6d4b\u662f\u5426\u8bfb\u5230\u7a7a\u884c\uff0c\u6240\u4ee5\u5f00\u59cb\u5982\u679cline\u4e3a\u7a7a\u5c31\u76f4\u63a5\u8df3\u8fc7\u4e86\u3002\u4e0d\u8fc7\u5e94\u8be5\u662f\u591a\u4f59\u7684\uff0c\u5f00\u59cbgetline\u4f1a\u8bfb\u5230\u4e00\u884c\uff0c\u4fee\u6539line\u7684\u503c\u540eline\u5c31\u4e0d\u4e3a\u7a7a\u4e86\u3002\u4e3a\u4e86\u4fdd\u9669\u8fd8\u662f\u7f6e\u4e3a\u975e\u7a7a\u4e86\u3002\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"string line = ' s';  //\u5f00\u59cb\u9700\u8981\u975e\u7a7a\nvector<vector<int>> m;\nwhile (getline(cin, line, '\\n') && !line.empty()) {\n    istringstream iss(line);\n    vector<int> cur;\n    for (int i; iss >> i;) {\n        cur.emplace_back(i);\n        if (iss.peek() == ',') iss.ignore();  //\u5ffd\u7565\u8f93\u5165\u4e2d\u7684\u9017\u53f7\n    }\n    m.emplace_back(cur);\n}\n")),(0,r.kt)("h1",{id:"codeforces"},"Codeforces"),(0,r.kt)("h2",{id:"c-\u6a21\u7248"},"C++ \u6a21\u7248"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'///   ***   ---   |     In the name of chairman mao    |||   ---   ***   ///\n/* Author: DoDo */\n#include <bits/stdc++.h>  // It is basically a header file that includes every standard library.\nusing namespace std;\n\n// \u5173\u95edc++\u548cc\u7684io\u540c\u6b65\uff0c\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u80fd\u4f1a\u5feb\u5f97\u591a\n#define optimize()                \\\n    ios_base::sync_with_stdio(0); \\\n    cin.tie(0);                   \\\n    cout.tie(0);\n// cout.precision(4) \u8bbe\u5b9a\u540e\u7eed\u4ee5\u79d1\u5b66\u8ba1\u6570\u6cd5\u7684\u65b9\u5f0f\u8f93\u51fa\u6d6e\u70b9\u6570\uff0c\u7cbe\u5ea6\u4e3a 4\n#define fraction(a)               \\\n    cout.unsetf(ios::floatfield); \\\n    cout.precision(a);            \\\n    cout.setf(ios::fixed, ios::floatfield);\n// \u628a\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u540d filename \u4e0e\u7ed9\u5b9a\u7684\u6253\u5f00\u7684\u6d41 stream \u5173\u8054\uff0c\u540c\u65f6\u5173\u95ed\u6d41\u4e2d\u7684\u65e7\u6587\u4ef6\n#define file()                        \\\n    freopen("input.txt", "r", stdin); \\\n    freopen("output.txt", "w", stdout);\n\n#define endl \'\\n\'\n#define ll long long\n#define psb push_back\n#define ppb pop_back\n#define psf push_front\n#define ppf pop_front\n#define mem1(a) memset(a, -1, sizeof(a))\n#define mem0(a) memset(a, 0, sizeof(a))\n#define all(x) sort(x.begin(), x.end())\n#define armin(v) *min_element(all(v))\n#define armax(v) *max_element(all(v))\n#define lb lower_bound\n#define ub upper_bound\n#define digits(n) floor(log10(n)) + 1           // \u6574\u6570\u6709\u591a\u5c11\u6570\u4f4d 100->3 99->2\n#define binary_str_to_int_dec(s) stoi(s, 0, 2)  // "101" -> 5\n#define string_to_int(s) stoi(s)                // "101" -> 101\n#define int_to_string(x) to_string(x)           // 101 -> "101"\n#define ppc __builtin_popcount                  // count binary 1 __builtin_popcount(5) -> 2\n#define ppcll __builtin_popcountll              // for long long\n#define fctz __builtin_ctz                      // \u4ece\u540e\u5f80\u524d\u8fde\u7eed0\u7684\u4e2a\u6570  __builtin_ctz(4)->2 __builtin_ctz(5)->0\n#define pt(a, b) cout << a << " " << b << "\\n";\n#define REP(i, a, b) for (int it = a; it <= b; it++)\n\nconst int mod = 1e9 + 7;\nconst double PI = acos(-1);\nconst double eps = 1e-9;\n\nint dx[] = {0, 0, +1, -1};\nint dy[] = {+1, -1, 0, 0};\n// int dx[] = {+1, 0, -1, 0, +1, +1, -1, -1};\n// int dy[] = {0, +1, 0, -1, +1, -1, +1, -1};\n\n// debug\ntemplate <typename F, typename S>\nostream& operator<<(ostream& os, const pair<F, S>& p) { return os << "(" << p.first << ", " << p.second << ")"; }\ntemplate <typename T>\nostream& operator<<(ostream& os, const vector<T>& v) {\n    os << "{";\n    for (auto it = v.begin(); it != v.end(); ++it) {\n        if (it != v.begin()) os << ", ";\n        os << *it;\n    }\n    return os << "}";\n}\ntemplate <typename K, typename V>\nostream& operator<<(ostream& os, const unordered_map<K, V>& umap) {\n    os << "[";\n    for (auto it = umap.begin(); it != umap.end(); ++it) {\n        if (it != umap.begin()) os << ", ";\n        os << it->first << ":" << it->second;\n    }\n    return os << "]";\n}\ntemplate <typename T>\nostream& operator<<(ostream& os, const unordered_set<T>& v) {\n    os << "[";\n    for (auto it = v.begin(); it != v.end(); ++it) {\n        if (it != v.begin()) os << ", ";\n        os << *it;\n    }\n    return os << "]";\n}\ntemplate <typename T>\nostream& operator<<(ostream& os, const set<T>& v) {\n    os << "[";\n    for (auto it = v.begin(); it != v.end(); ++it) {\n        if (it != v.begin()) os << ", ";\n        os << *it;\n    }\n    return os << "]";\n}\ntemplate <typename T>\nostream& operator<<(ostream& os, const multiset<T>& v) {\n    os << "[";\n    for (auto it = v.begin(); it != v.end(); ++it) {\n        if (it != v.begin()) os << ", ";\n        os << *it;\n    }\n    return os << "]";\n}\ntemplate <typename F, typename S>\nostream& operator<<(ostream& os, const map<F, S>& v) {\n    os << "[";\n    for (auto it = v.begin(); it != v.end(); ++it) {\n        if (it != v.begin()) os << ", ";\n        os << it->first << " = " << it->second;\n    }\n    return os << "]";\n}\n#define dbg(args...)            \\\n    do {                        \\\n        cerr << #args << " : "; \\\n        faltu(args);            \\\n    } while (0)\nvoid faltu() { cerr << endl; }\ntemplate <typename T>\nvoid faltu(T a[], int n) {\n    for (int i = 0; i < n; ++i) cerr << a[i] << \' \';\n    cerr << endl;\n}\ntemplate <typename T, typename... hello>\nvoid faltu(T arg, const hello&... rest) {\n    cerr << arg << \' \';\n    faltu(rest...);\n}\n//#else\n//#define dbg(args...)\n\n/***********************************************************************************/\nll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }\nll lcm(ll a, ll b) { return (a / __gcd(a, b)) * b; }\nll min(ll a, ll b, ll c) { return min(a, min(b, c)); }\nll max(ll a, ll b, ll c) { return max(a, max(b, c)); }\nll mod_number(ll a, ll b) { return (a - b * (a / b)); }\nll mod_add(ll a, ll b, ll m) {\n    a = a % m;\n    b = b % m;\n    return (((a + b) % m) + m) % m;\n}\nll mod_mul(ll a, ll b, ll m) {\n    a = a % m;\n    b = b % m;\n    return (((a * b) % m) + m) % m;\n}\nll mod_sub(ll a, ll b, ll m) {\n    a = a % m;\n    b = b % m;\n    return (((a - b) % m) + m) % m;\n}\nll mod_pow(int a, int b, int m) {\n    ll ans = 1;\n    while (b) {\n        ans *= a;\n        b--;\n    }\n    return ans;\n}\nll mod_inverse(ll a, ll b) { return 1 < a ? b - mod_inverse(b % a, a) * b / a : 1; }\n\n/* Author: Sabbir(Mr.Smurf) */\n/***********************************************************************************/\nll fact[1000000];\nvoid factorial() {\n    fact[0] = fact[1] = 1;\n    for (ll i = 2; i < 1000000; i++) {\n        fact[i] = ((i % mod) * (fact[i - 1] % mod)) % mod;\n    }\n}\n\n// x = array of numbers\n// n = length of the array\n// k = search key\n// returns "true" if the key is found, "false" otherwise\nint binarySearch(int x[], int n, int k) {\n    int l = 0, r = n - 1;\n    while (l <= r) {\n        int m = (l + r) / 2;\n        if (x[m] == k) return 1;\n        if (x[m] < k)\n            l = m + 1;\n        else\n            r = m - 1;\n    }\n    return -1;\n}\nll bigmod(ll a, ll b, ll m) {\n    if (b == 0) return 1 % m;\n    ll x = bigmod(a, b / 2, m);\n    x = (x * x) % m;\n    if (b % 2 == 1) x = (x * a) % m;\n    return x;\n}\n\n// for(auto &x : a){cin >> x;tots += x;}\n// (condition) ? (variable = Expression2) : (variable = Expression3)\n\n/***********************************************************************************/\nvoid solution() {\n    int a[3];\n    for (int i = 0; i < 3; i++) {\n        cin >> a[i];\n    }\n    sort(a, a + 3);\n    cout << a[1] << endl;\n}\nint main() {\n    optimize();  // fraction(a);\n    ll prueba;\n    cin >> prueba;\n    while (prueba--) {\n        solution();\n    }\n    return 0;\n}\n/***********************************************************************************/\n')),(0,r.kt)("h2",{id:"python-\u4f8b\u5b50"},"python \u4f8b\u5b50"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://codeforces.com/contest/1760/problem/B"},"Problem - B - Codeforces")),(0,r.kt)("p",null,"time limit per test: 1 second"),(0,r.kt)("p",null,"memory limit per test: 256 megabytes"),(0,r.kt)("p",null,"input: standard input"),(0,r.kt)("p",null,"output: standard output"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"In order to write a string, Atilla needs to first learn all letters that are contained in the string."),(0,r.kt)("p",null,"Atilla needs to write a message which can be represented as a string s. He asks you what is the minimum alphabet size required so that one can write this message."),(0,r.kt)("p",null,"The alphabet of size x (1\u2264x\u226426) contains ",(0,r.kt)("strong",{parentName:"p"},"only the first")," x Latin letters. For example an alphabet of size 4 contains ",(0,r.kt)("strong",{parentName:"p"},"only")," the characters a, b, c and d."),(0,r.kt)("h3",{id:"input"},"Input"),(0,r.kt)("p",null,"The first line contains a single integer t (1\u2264t\u22641000) \u2014 the number of test cases."),(0,r.kt)("p",null,"The first line of each test case contains a single integer n (1\u2264n\u2264100) \u2014 the length of the string."),(0,r.kt)("p",null,"The second line of each test case contains a string s of length n, consisting of lowercase Latin letters."),(0,r.kt)("h3",{id:"output"},"Output"),(0,r.kt)("p",null,"For each test case, output a single integer \u2014 the minimum alphabet size required to so that Atilla can write his message s."),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"input")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"5\n1\na\n4\ndown\n10\ncodeforces\n3\nbcf\n5\nzzzzz\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1\n23\n19\n6\n26\n")),(0,r.kt)("h3",{id:"note"},"Note"),(0,r.kt)("p",null,"For the first test case, Atilla needs to know only the character a, so the alphabet of size 1 which only contains a is enough."),(0,r.kt)("p",null,"For the second test case, Atilla needs to know the characters d, o, w, n. The smallest alphabet size that contains all of them is 23 (such alphabet can be represented as the string abcdefghijklmnopqrstuvw)."),(0,r.kt)("h3",{id:"solu"},"Solu"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"t = int(input())        # \u7b2c\u4e00\u884c\u8f93\u5165\u591a\u5c11\u4e2a\u7528\u4f8b\nfor _ in range(t):      # \u6bcf\u6b21\u5904\u7406\u4e00\u4e2a\u7528\u4f8b\n    n = int(input())    # \u83b7\u53d6\u6bcf\u4e2a\u7528\u4f8b\u7684\u7b2c\u4e00\u4e2a\u8f93\u5165\n    s = str(input())    # \u83b7\u53d6\u6bcf\u4e2a\u7528\u4f8b\u7684\u7b2c\u4e8c\u4e2a\u8f93\u5165\n    r = ord(max(s))-96\n    print(r)    # \u8fd4\u56de\u6b64\u7528\u4f8b\u7684\u7ed3\u679c\n")))}c.isMDXComponent=!0}}]);