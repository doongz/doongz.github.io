"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[26980],{3905:(n,t,e)=>{e.d(t,{Zo:()=>u,kt:()=>k});var i=e(67294);function r(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function a(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,i)}return e}function l(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?a(Object(e),!0).forEach((function(t){r(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):a(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function p(n,t){if(null==n)return{};var e,i,r=function(n,t){if(null==n)return{};var e,i,r={},a=Object.keys(n);for(i=0;i<a.length;i++)e=a[i],t.indexOf(e)>=0||(r[e]=n[e]);return r}(n,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(i=0;i<a.length;i++)e=a[i],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(r[e]=n[e])}return r}var s=i.createContext({}),o=function(n){var t=i.useContext(s),e=t;return n&&(e="function"==typeof n?n(t):l(l({},t),n)),e},u=function(n){var t=o(n.components);return i.createElement(s.Provider,{value:t},n.children)},m="mdxType",c={inlineCode:"code",wrapper:function(n){var t=n.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(n,t){var e=n.components,r=n.mdxType,a=n.originalType,s=n.parentName,u=p(n,["components","mdxType","originalType","parentName"]),m=o(e),d=r,k=m["".concat(s,".").concat(d)]||m[d]||c[d]||a;return e?i.createElement(k,l(l({ref:t},u),{},{components:e})):i.createElement(k,l({ref:t},u))}));function k(n,t){var e=arguments,r=t&&t.mdxType;if("string"==typeof n||r){var a=e.length,l=new Array(a);l[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=n,p[m]="string"==typeof n?n:r,l[1]=p;for(var o=2;o<a;o++)l[o]=e[o];return i.createElement.apply(null,l)}return i.createElement.apply(null,e)}d.displayName="MDXCreateElement"},66948:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>p,toc:()=>o});var i=e(87462),r=(e(67294),e(3905));const a={},l=void 0,p={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<\u81ea\u5b9a\u4e49\u5806\u548c\u6392\u5e8f>-\u627e\u5230\u548c\u6700\u5927\u7684\u957f\u5ea6\u4e3aK\u7684\u5b50\u5e8f\u5217",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<\u81ea\u5b9a\u4e49\u5806\u548c\u6392\u5e8f>-\u627e\u5230\u548c\u6700\u5927\u7684\u957f\u5ea6\u4e3aK\u7684\u5b50\u5e8f\u5217",title:"<\u81ea\u5b9a\u4e49\u5806\u548c\u6392\u5e8f>-\u627e\u5230\u548c\u6700\u5927\u7684\u957f\u5ea6\u4e3aK\u7684\u5b50\u5e8f\u5217",description:"\u9898\u76ee\uff1a2099. \u627e\u5230\u548c\u6700\u5927\u7684\u957f\u5ea6\u4e3a K \u7684\u5b50\u5e8f\u5217",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/2099-<\u81ea\u5b9a\u4e49\u5806\u548c\u6392\u5e8f>-\u627e\u5230\u548c\u6700\u5927\u7684\u957f\u5ea6\u4e3aK\u7684\u5b50\u5e8f\u5217.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<\u81ea\u5b9a\u4e49\u5806\u548c\u6392\u5e8f>-\u627e\u5230\u548c\u6700\u5927\u7684\u957f\u5ea6\u4e3aK\u7684\u5b50\u5e8f\u5217",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<\u81ea\u5b9a\u4e49\u5806\u548c\u6392\u5e8f>-\u627e\u5230\u548c\u6700\u5927\u7684\u957f\u5ea6\u4e3aK\u7684\u5b50\u5e8f\u5217",draft:!1,tags:[],version:"current",sidebarPosition:2099,frontMatter:{},sidebar:"algorithmSidebar",previous:{title:"<\u6a21\u7248\u9898>-\u6570\u636e\u6d41\u4e2d\u7684\u7b2cK\u5927\u5143\u7d20",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<\u6a21\u7248\u9898>-\u6570\u636e\u6d41\u4e2d\u7684\u7b2cK\u5927\u5143\u7d20"},next:{title:"<\u8d2a\u5fc3-\u5806>-\u627e\u51fa\u6570\u7ec4\u7684\u7b2cK\u5927\u548c",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<\u8d2a\u5fc3-\u5806>-\u627e\u51fa\u6570\u7ec4\u7684\u7b2cK\u5927\u548c"}},s={},o=[{value:"\u601d\u8def\u4e00\uff1a\u9012\u5f52\uff08\u8d85\u65f6\uff09",id:"\u601d\u8def\u4e00\u9012\u5f52\u8d85\u65f6",level:2},{value:"\u601d\u8def\u4e8c\uff1a\u63a7\u5236\u5806\u7684\u5927\u5c0f",id:"\u601d\u8def\u4e8c\u63a7\u5236\u5806\u7684\u5927\u5c0f",level:2},{value:"\u601d\u8def\u4e09\uff1a\u6709\u5e8f\u96c6\u5408",id:"\u601d\u8def\u4e09\u6709\u5e8f\u96c6\u5408",level:2},{value:"python",id:"python",level:3},{value:"c++",id:"c",level:3}],u={toc:o};function m(n){let{components:t,...e}=n;return(0,r.kt)("wrapper",(0,i.Z)({},u,e,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"\u9898\u76ee\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/find-subsequence-of-length-k-with-the-largest-sum/"},"2099. \u627e\u5230\u548c\u6700\u5927\u7684\u957f\u5ea6\u4e3a K \u7684\u5b50\u5e8f\u5217")),(0,r.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 ",(0,r.kt)("inlineCode",{parentName:"p"},"nums")," \u548c\u4e00\u4e2a\u6574\u6570 ",(0,r.kt)("inlineCode",{parentName:"p"},"k")," \u3002\u4f60\u9700\u8981\u627e\u5230 ",(0,r.kt)("inlineCode",{parentName:"p"},"nums")," \u4e2d\u957f\u5ea6\u4e3a ",(0,r.kt)("inlineCode",{parentName:"p"},"k")," \u7684 ",(0,r.kt)("strong",{parentName:"p"},"\u5b50\u5e8f\u5217")," \uff0c\u4e14\u8fd9\u4e2a\u5b50\u5e8f\u5217\u7684 ",(0,r.kt)("strong",{parentName:"p"},"\u548c\u6700\u5927")," \u3002"),(0,r.kt)("p",null,"\u8bf7\u4f60\u8fd4\u56de ",(0,r.kt)("strong",{parentName:"p"},"\u4efb\u610f")," \u4e00\u4e2a\u957f\u5ea6\u4e3a ",(0,r.kt)("inlineCode",{parentName:"p"},"k")," \u7684\u6574\u6570\u5b50\u5e8f\u5217\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u5b50\u5e8f\u5217")," \u5b9a\u4e49\u4e3a\u4ece\u4e00\u4e2a\u6570\u7ec4\u91cc\u5220\u9664\u4e00\u4e9b\u5143\u7d20\u540e\uff0c\u4e0d\u6539\u53d8\u5269\u4e0b\u5143\u7d20\u7684\u987a\u5e8f\u5f97\u5230\u7684\u6570\u7ec4\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u793a\u4f8b 1\uff1a\n\n\u8f93\u5165\uff1anums = [2,1,3,3], k = 2\n\u8f93\u51fa\uff1a[3,3]\n\u89e3\u91ca\uff1a\n\u5b50\u5e8f\u5217\u6709\u6700\u5927\u548c\uff1a3 + 3 = 6 \u3002\n\n\u793a\u4f8b 2\uff1a\n\n\u8f93\u5165\uff1anums = [-1,-2,3,4], k = 3\n\u8f93\u51fa\uff1a[-1,3,4]\n\u89e3\u91ca\uff1a\n\u5b50\u5e8f\u5217\u6709\u6700\u5927\u548c\uff1a-1 + 3 + 4 = 6 \u3002\n\n\u793a\u4f8b 3\uff1a\n\n\u8f93\u5165\uff1anums = [3,4,3,3], k = 2\n\u8f93\u51fa\uff1a[3,4]\n\u89e3\u91ca\uff1a\n\u5b50\u5e8f\u5217\u6709\u6700\u5927\u548c\uff1a3 + 4 = 7 \u3002\n\u53e6\u4e00\u4e2a\u53ef\u884c\u7684\u5b50\u5e8f\u5217\u4e3a [4, 3] \u3002\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u63d0\u793a\uff1a")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 1000")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-105 <= nums[i] <= 105")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= k <= nums.length"))),(0,r.kt)("h2",{id:"\u601d\u8def\u4e00\u9012\u5f52\u8d85\u65f6"},"\u601d\u8def\u4e00\uff1a\u9012\u5f52\uff08\u8d85\u65f6\uff09"),(0,r.kt)("p",null,"\u9996\u5148\u60f3\u5230\u7684\u662f\u9012\u5f52\uff0c\u4f46\u662f\u4e0b\u9762\u7684\u63d0\u793a\uff0c",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"1 <= nums.length <= 1000"),"\uff0c\u5982\u679c\u4e0d\u4f7f\u7528\u526a\u679d\u7684\u9012\u5f52\u8bdd\uff0c\u80af\u5b9a\u8d85\u65f6"),"\u3002"),(0,r.kt)("p",null,"\u800c\u8fd9\u4e00\u9898\u4f3c\u4e4e\u6ca1\u6cd5\u526a\u679d"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def maxSubsequence(self, nums: List[int], k: int) -> List[int]:\n        sz = len(nums)\n        self.sub_sum = float('-inf')\n        self.ans = None\n        \n        def dfs(begin, path):\n            if len(path) == k:\n                tmp = sum(path)\n                if tmp > self.sub_sum:\n                    self.ans = path[:]\n                    self.sub_sum = tmp\n                return\n            for i in range(begin, sz):\n                path.append(nums[i])\n                dfs(i+1, path)\n                path.pop()\n        dfs(0, [])\n        return self.ans\n\n")),(0,r.kt)("h2",{id:"\u601d\u8def\u4e8c\u63a7\u5236\u5806\u7684\u5927\u5c0f"},"\u601d\u8def\u4e8c\uff1a\u63a7\u5236\u5806\u7684\u5927\u5c0f"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u7ef4\u6301 k \u4e2a\u5143\u7d20\u7684\u5c0f\u6839\u5806"),(0,r.kt)("li",{parentName:"ul"},"\u5982\u679c\u5f53\u524d\u904d\u5386\u5230\u7684 num \u5927\u4e8e\u5c0f\u6839\u5806\u7684\u5806\u9876\uff0c\u5165\u5806\uff0c\u7136\u540e\u79fb\u9664\u5806\u9876"),(0,r.kt)("li",{parentName:"ul"},"\u5c0f\u6839\u5806\u4e2d\u7684\u5143\u7d20\u4e3a pair<int, int> first\u5b58\u503c\uff0csecond\u5b58\u4e0b\u6807")),(0,r.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"O(n*log(k))")),(0,r.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"O(n)")," "),(0,r.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a4 ms, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8694.04%\u7684\u7528\u6237"),(0,r.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a9.4 MB, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8639.29%\u7684\u7528\u6237"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    struct cmpSmall {  // \u5c0f\u6839\u5806\n        bool operator()(pair<int, int> p1, pair<int, int> p2) {\n            return p1.first > p2.first;\n        }\n    };\n    struct cmpIdx {  // \u4e0b\u6807\u7531\u5c0f\u5230\u5927\n        bool operator()(pair<int, int> p1, pair<int, int> p2) {\n            return p1.second < p2.second;\n        }\n    };\n    vector<int> maxSubsequence(vector<int>& nums, int k) {\n        // pair<int, int> first\u5b58\u503c\uff0csecond\u5b58\u4e0b\u6807\n        priority_queue<pair<int, int>, vector<pair<int, int>>, cmpSmall> smallQ;\n        for (int i = 0; i < nums.size(); i++) {\n            if (smallQ.size() < k) {\n                smallQ.push({nums[i], i});\n            } else {\n                if (nums[i] > smallQ.top().first) {\n                    smallQ.push({nums[i], i});\n                    smallQ.pop();\n                }\n            }\n        }\n        // \u5168\u90e8\u53d6\u51fa\u6765\uff0c\u6309\u7167\u4e0b\u6807\u6392\u5e8f\n        vector<pair<int, int>> tmp;\n        while (!smallQ.empty()) {\n            tmp.push_back({smallQ.top().first, smallQ.top().second});\n            smallQ.pop();\n        }\n        sort(tmp.begin(), tmp.end(), cmpIdx()); // \u6392\u5e8f\u51fd\u6570\uff0ccmpIdx()\u8981\u52a0\u62ec\u53f7\n\n        // \u653e\u5165\u7b54\u6848\u4e2d\n        vector<int> ans;\n        for (int i = 0; i < k; i++) {\n            ans.push_back(tmp[i].first);\n        }\n        return ans;\n    }\n};\n")),(0,r.kt)("h2",{id:"\u601d\u8def\u4e09\u6709\u5e8f\u96c6\u5408"},"\u601d\u8def\u4e09\uff1a\u6709\u5e8f\u96c6\u5408"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u4f18\u5148\u6392\u5e8f\u300c\u5143\u7d20\u503c\u300d\u5927\u7684\u5728\u524d\uff0c\u5176\u6b21\u6392\u5e8f\u300c\u5143\u7d20\u4e0b\u6807\u300d\u5c0f\u7684\u5728\u524d")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u53d6\u51fa\u524d k \u4e2a\u503c"))),(0,r.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"O(n*log(n))")),(0,r.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"O(n)")," "),(0,r.kt)("h3",{id:"python"},"python"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sortedcontainers import SortedList\n\nclass Solution:\n    def maxSubsequence(self, nums: List[int], k: int) -> List[int]:\n        sl = SortedList(key=lambda x: -x[0])\n        for idx, val in enumerate(nums):\n            sl.add((val, idx))\n\n        tmp = []\n        for i in range(k):\n            tmp.append(sl[i])\n        tmp.sort(key=lambda x: x[1])\n\n        return [i[0] for i in tmp]\n")),(0,r.kt)("h3",{id:"c"},"c++"),(0,r.kt)("p",null,"\u672c\u5730\u53ef\u4ee5\uff0c\u4f46\u662f\u63d0\u4ea4\u4e0a\u53bb\uff0c ",(0,r.kt)("inlineCode",{parentName:"p"},"ms.insert({nums[i], i});")," \u4f1a\u62a5\u9519"),(0,r.kt)("p",null,"Char 16: note: in instantiation of member function 'std::multiset<std::pair<int, int>, Solution::cmp, std::allocator<std::pair<int, int>>>::insert' requested here"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <set>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    struct cmp {\n        bool operator()(pair<int, int> p1, pair<int, int> p2) {\n            if (p1.first != p2.first) {\n                return p1.first > p2.first;\n            } else {\n                return p1.second < p2.second;\n            }\n        }\n    };\n    vector<int> maxSubsequence(vector<int> &nums, int k) {\n        // pair<int, int> first\u5b58\u503c\uff0csecond\u5b58\u4e0b\u6807\n        multiset<pair<int, int>, cmp> ms;\n        for (int i = 0; i < nums.size(); i++) {\n            ms.insert({nums[i], i});\n        }\n        for (auto it = ms.begin(); it != ms.end(); it++) {\n            cout << it->first << ", " << it->second << endl;\n        }\n        // 3, 2\n        // 3, 3\n        // 2, 0\n        // 1, 1\n\n        vector<int> ans;\n        auto it = ms.begin();\n        for (int i = 0; i < k; i++) {\n            ans.push_back(it->first);\n            it++;\n        }\n        return ans;\n    }\n};\n\nint main() {\n    Solution sol;\n    vector<int> nums = {2, 1, 3, 3};\n    int k = 2;\n    vector<int> ans = sol.maxSubsequence(nums, k);\n    for (int i = 0; i < ans.size(); i++) {\n        cout << ans[i] << " ";\n    }\n    cout << endl;  // 3 3\n    return 0;\n}\n')))}m.isMDXComponent=!0}}]);