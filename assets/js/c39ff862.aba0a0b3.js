"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[17447],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=r.createContext({}),p=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(d.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=p(t),f=o,m=u["".concat(d,".").concat(f)]||u[f]||c[f]||a;return t?r.createElement(m,l(l({ref:n},s),{},{components:t})):r.createElement(m,l({ref:n},s))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=f;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=e,i[u]="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},26223:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=t(87462),o=(t(67294),t(3905));const a={},l=void 0,i={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<\u91cd\u5efa\u6811>-\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<\u91cd\u5efa\u6811>-\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316",title:"<\u91cd\u5efa\u6811>-\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316",description:"\u9898\u76ee\uff1a297. \u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/297-<\u91cd\u5efa\u6811>-\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<\u91cd\u5efa\u6811>-\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<\u91cd\u5efa\u6811>-\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316",draft:!1,tags:[],version:"current",sidebarPosition:297,frontMatter:{},sidebar:"algorithmSidebar",previous:{title:"\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"},next:{title:"<\u91cd\u5efa\u6811>-\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<\u91cd\u5efa\u6811>-\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811"}},d={},p=[{value:"dfs",id:"dfs",level:2},{value:"bfs",id:"bfs",level:2}],s={toc:p};function u(e){let{components:n,...a}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u9898\u76ee\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/"},"297. \u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316")),(0,o.kt)("p",null,"\u5e8f\u5217\u5316\u662f\u5c06\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6216\u8005\u5bf9\u8c61\u8f6c\u6362\u4e3a\u8fde\u7eed\u7684\u6bd4\u7279\u4f4d\u7684\u64cd\u4f5c\uff0c\u8fdb\u800c\u53ef\u4ee5\u5c06\u8f6c\u6362\u540e\u7684\u6570\u636e\u5b58\u50a8\u5728\u4e00\u4e2a\u6587\u4ef6\u6216\u8005\u5185\u5b58\u4e2d\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u5230\u53e6\u4e00\u4e2a\u8ba1\u7b97\u673a\u73af\u5883\uff0c\u91c7\u53d6\u76f8\u53cd\u65b9\u5f0f\u91cd\u6784\u5f97\u5230\u539f\u6570\u636e\u3002"),(0,o.kt)("p",null,"\u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u5b9e\u73b0\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u3002\u8fd9\u91cc\u4e0d\u9650\u5b9a\u4f60\u7684\u5e8f\u5217 / \u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u6267\u884c\u903b\u8f91\uff0c\u4f60\u53ea\u9700\u8981\u4fdd\u8bc1\u4e00\u4e2a\u4e8c\u53c9\u6811\u53ef\u4ee5\u88ab\u5e8f\u5217\u5316\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e76\u4e14\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a\u539f\u59cb\u7684\u6811\u7ed3\u6784\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u63d0\u793a:")," \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\u4e0e LeetCode \u76ee\u524d\u4f7f\u7528\u7684\u65b9\u5f0f\u4e00\u81f4\uff0c\u8be6\u60c5\u8bf7\u53c2\u9605 ",(0,o.kt)("a",{parentName:"p",href:"https://leetcode.cn/faq/#binary-tree"},"LeetCode \u5e8f\u5217\u5316\u4e8c\u53c9\u6811\u7684\u683c\u5f0f"),"\u3002"),(0,o.kt)("p",null,"\u4f60\u5e76\u975e\u5fc5\u987b\u91c7\u53d6\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u91c7\u7528\u5176\u4ed6\u7684\u65b9\u6cd5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1\uff1a")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"img",src:t(62001).Z,width:"442",height:"324"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1aroot = [1,2,3,null,null,4,5]\n\u8f93\u51fa\uff1a[1,2,3,null,null,4,5]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u63d0\u793a\uff1a")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u6811\u4e2d\u7ed3\u70b9\u6570\u5728\u8303\u56f4 ",(0,o.kt)("inlineCode",{parentName:"li"},"[0, 104]")," \u5185"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-1000 <= Node.val <= 1000"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u539f\u7406\uff1a\u53ef\u4ee5\u5728\u8f93\u5165\u4e2d\u901a\u8fc7 None \u6765\u6807\u8bb0\u6ca1\u6709\u8282\u70b9\u4e86\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u524d\u5e8f\uff08\u6216\u8005\u4e2d\u5e8f\u3001\u6216\u8005\u540e\u5e8f\uff09\u5c31\u80fd\u6062\u590d")),(0,o.kt)("h2",{id:"dfs"},"dfs"),(0,o.kt)("p",null,"dfs \u7528\u540c\u6837\u7684\u65b9\u6cd5\u653b\u7834 104 ms 19.6 MB \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class Codec:\n\n    def serialize(self, root):\n        """Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        """\n        def dfs(node):\n            if not node:\n                inOrder.append("None")\n                return \n            inOrder.append(str(node.val))\n            dfs(node.left)\n            dfs(node.right)\n\n        inOrder = collections.deque()\n        dfs(root)\n        return ",".join(inOrder)\n\n    def deserialize(self, data):\n        """Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        """\n        if data == "":\n            return None\n        \n        def dfs():\n            node_val = inOrder.popleft()\n            if node_val == "None":\n                return\n            node = TreeNode(node_val)\n            node.left = dfs()\n            node.right = dfs()\n            return node\n\n        inOrder = collections.deque([i for i in data.split(",")])\n        return dfs()\n')),(0,o.kt)("h2",{id:"bfs"},"bfs"),(0,o.kt)("p",null,"bfs: 100 ms 19.7 MB \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'class Codec {\npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        if ( root == nullptr ) return "";\n        ostringstream output;\n        queue<TreeNode*> que;\n        que.push(root);\n        while ( !que.empty() ) {\n            TreeNode* node = que.front();\n            que.pop();\n            if ( node == nullptr ) output << "# ";\n            else {\n                output << node->val << \' \';\n                que.push(node->left);\n                que.push(node->right);\n            }\n        }\n        return output.str();\n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        if ( data.empty() ) return nullptr;\n        vector<TreeNode*> nodes;\n        string val;\n        istringstream input(data);\n        while ( input >> val ) {\n            if ( val == "#" ) nodes.push_back(nullptr);\n            else nodes.push_back(new TreeNode(stoi(val)));\n        };\n        int pos = 1;\n        for ( int i = 0; i < nodes.size(); ++i ) {\n            if ( nodes[i] == nullptr ) continue;\n            nodes[i]->left = nodes[pos++];\n            nodes[i]->right = nodes[pos++];\n        }\n        return nodes[0];\n    }\n};\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class Codec:\n\n    def serialize(self, root):\n        """Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        """\n        if not root:\n            return ""\n        layerOrder = []\n        queue = collections.deque()\n        queue.append(root)\n\n        while queue:\n            node = queue.popleft()\n            if node:\n                queue.append(node.left)\n                queue.append(node.right)\n                layerOrder.append(str(node.val))\n            else:\n                layerOrder.append("None")\n        print(",".join(layerOrder))\n        return ",".join(layerOrder)\n        \n    def deserialize(self, data):\n        """Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        """\n        if data == "":\n            return None\n            \n        layerOrder = [i for i in data.split(",")]\n        queue = collections.deque()\n\n        root = TreeNode(layerOrder[0])\n        queue.append(root)\n        idx = 1\n        while queue:\n            node = queue.popleft()\n            if layerOrder[idx] != "None":\n                node.left = TreeNode(int(layerOrder[idx]))\n                queue.append(node.left)\n            idx += 1\n            if layerOrder[idx] != "None":\n                node.right = TreeNode(int(layerOrder[idx]))\n                queue.append(node.right)\n            idx += 1\n        return root\n')),(0,o.kt)("h3",{id:""}))}u.isMDXComponent=!0},62001:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/serdeser-62651618a9af6911d0c4bf322224131c.jpg"}}]);