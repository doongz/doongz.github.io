"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[90859],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>g});var r=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var o=r.createContext({}),s=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=s(e.components);return r.createElement(o.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),c=s(t),f=l,g=c["".concat(o,".").concat(f)]||c[f]||u[f]||a;return t?r.createElement(g,i(i({ref:n},m),{},{components:t})):r.createElement(g,i({ref:n},m))}));function g(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,i=new Array(a);i[0]=f;var p={};for(var o in n)hasOwnProperty.call(n,o)&&(p[o]=n[o]);p.originalType=e,p[c]="string"==typeof e?e:l,i[1]=p;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},67784:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var r=t(87462),l=(t(67294),t(3905));const a={},i=void 0,p={unversionedId:"Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6ed1\u52a8\u7a97\u53e3/<\u5806&\u5ef6\u8fdf\u5220\u9664>-\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570",id:"Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6ed1\u52a8\u7a97\u53e3/<\u5806&\u5ef6\u8fdf\u5220\u9664>-\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570",title:"<\u5806&\u5ef6\u8fdf\u5220\u9664>-\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570",description:"480. \u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570",source:"@site/docs/Algorithm/2-\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6ed1\u52a8\u7a97\u53e3/480-<\u5806&\u5ef6\u8fdf\u5220\u9664>-\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570.md",sourceDirName:"Algorithm/2-\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6ed1\u52a8\u7a97\u53e3",slug:"/Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6ed1\u52a8\u7a97\u53e3/<\u5806&\u5ef6\u8fdf\u5220\u9664>-\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570",permalink:"/docs/Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6ed1\u52a8\u7a97\u53e3/<\u5806&\u5ef6\u8fdf\u5220\u9664>-\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570",draft:!1,tags:[],version:"current",sidebarPosition:480,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<\u6a21\u7248\u9898>-\u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd",permalink:"/docs/Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6ed1\u52a8\u7a97\u53e3/<\u6a21\u7248\u9898>-\u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd"},next:{title:"<\u6a21\u7248\u9898>-\u5b57\u7b26\u4e32\u7684\u6392\u5217",permalink:"/docs/Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6ed1\u52a8\u7a97\u53e3/<\u6a21\u7248\u9898>-\u5b57\u7b26\u4e32\u7684\u6392\u5217"}},o={},s=[{value:"\u65b9\u6cd5\uff1a\u6ed1\u52a8\u7a97\u53e3+\u5806+\u5ef6\u65f6\u5220\u9664",id:"\u65b9\u6cd5\u6ed1\u52a8\u7a97\u53e3\u5806\u5ef6\u65f6\u5220\u9664",level:2}],m={toc:s};function c(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/sliding-window-median/"},"480. \u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570")),(0,l.kt)("p",null,"\u4e2d\u4f4d\u6570\u662f\u6709\u5e8f\u5e8f\u5217\u6700\u4e2d\u95f4\u7684\u90a3\u4e2a\u6570\u3002\u5982\u679c\u5e8f\u5217\u7684\u957f\u5ea6\u662f\u5076\u6570\uff0c\u5219\u6ca1\u6709\u6700\u4e2d\u95f4\u7684\u6570\uff1b\u6b64\u65f6\u4e2d\u4f4d\u6570\u662f\u6700\u4e2d\u95f4\u7684\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u6570\u3002"),(0,l.kt)("p",null,"\u4f8b\u5982\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[2,3,4]"),"\uff0c\u4e2d\u4f4d\u6570\u662f ",(0,l.kt)("inlineCode",{parentName:"li"},"3")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[2,3]"),"\uff0c\u4e2d\u4f4d\u6570\u662f ",(0,l.kt)("inlineCode",{parentName:"li"},"(2 + 3) / 2 = 2.5"))),(0,l.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 nums\uff0c\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a k \u7684\u7a97\u53e3\u4ece\u6700\u5de6\u7aef\u6ed1\u52a8\u5230\u6700\u53f3\u7aef\u3002\u7a97\u53e3\u4e2d\u6709 k \u4e2a\u6570\uff0c\u6bcf\u6b21\u7a97\u53e3\u5411\u53f3\u79fb\u52a8 1 \u4f4d\u3002\u4f60\u7684\u4efb\u52a1\u662f\u627e\u51fa\u6bcf\u6b21\u7a97\u53e3\u79fb\u52a8\u540e\u5f97\u5230\u7684\u65b0\u7a97\u53e3\u4e2d\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\uff0c\u5e76\u8f93\u51fa\u7531\u5b83\u4eec\u7ec4\u6210\u7684\u6570\u7ec4\u3002"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u793a\u4f8b\uff1a")),(0,l.kt)("p",null,"\u7ed9\u51fa ",(0,l.kt)("em",{parentName:"p"},"nums")," = ",(0,l.kt)("inlineCode",{parentName:"p"},"[1,3,-1,-3,5,3,6,7]"),"\uff0c\u4ee5\u53ca ",(0,l.kt)("em",{parentName:"p"},"k")," = 3\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\u7a97\u53e3\u4f4d\u7f6e                      \u4e2d\u4f4d\u6570\n---------------               -----\n[1  3  -1] -3  5  3  6  7       1\n 1 [3  -1  -3] 5  3  6  7      -1\n 1  3 [-1  -3  5] 3  6  7      -1\n 1  3  -1 [-3  5  3] 6  7       3\n 1  3  -1  -3 [5  3  6] 7       5\n 1  3  -1  -3  5 [3  6  7]      6\n")),(0,l.kt)("p",null,"\u56e0\u6b64\uff0c\u8fd4\u56de\u8be5\u6ed1\u52a8\u7a97\u53e3\u7684\u4e2d\u4f4d\u6570\u6570\u7ec4 ","[1,-1,-1,3,5,6]","\u3002"),(0,l.kt)("p",null," \u63d0\u793a\uff1a"),(0,l.kt)("p",null,"\u4f60\u53ef\u4ee5\u5047\u8bbe k \u59cb\u7ec8\u6709\u6548\uff0c\u5373\uff1ak \u59cb\u7ec8\u5c0f\u4e8e\u7b49\u4e8e\u8f93\u5165\u7684\u975e\u7a7a\u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570\u3002\n\u4e0e\u771f\u5b9e\u503c\u8bef\u5dee\u5728 10 ^ -5 \u4ee5\u5185\u7684\u7b54\u6848\u5c06\u88ab\u89c6\u4f5c\u6b63\u786e\u7b54\u6848\u3002"),(0,l.kt)("h2",{id:"\u65b9\u6cd5\u6ed1\u52a8\u7a97\u53e3\u5806\u5ef6\u65f6\u5220\u9664"},"\u65b9\u6cd5\uff1a\u6ed1\u52a8\u7a97\u53e3+\u5806+\u5ef6\u65f6\u5220\u9664"),(0,l.kt)("p",null,"\u4e0e",(0,l.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/find-median-from-data-stream/"},"295. \u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570"),"\u7c7b\u4f3c\uff0c",(0,l.kt)("strong",{parentName:"p"},"\u4f46\u8fd9\u4e00\u9898\u8981\u8003\u8651\u5de6\u8fb9\u754c\u600e\u6837\u6536\u7f29")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/sliding-window-median/solution/feng-xian-dui-chong-shuang-dui-dui-ding-hq1dt/"},"\u9898\u89e3")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u4e00\u822c\u7a97\u53e3\u7684\u6570\u636e\u7ed3\u6784\u4e3a\u5806\u65f6\uff0c\u4f1a\u6d89\u53ca\u5ef6\u8fdf\u5220\u9664"),"\u3002"),(0,l.kt)("p",null,"\u4e24\u4e2a\u5806\u5728\u5185\u5b58\u91cc\u5e76\u4e0d\u4e00\u5b9a\u662f\u5e73\u8861\u7684\uff0c\u5373\u5806\u4e2d\u7684\u5143\u7d20\u5e76\u4e0d\u6ee1\u8db30<=len(small)-len(big)<=1 ,\u56e0\u4e3a\u91cc\u9762\u6709\u5f85\u5220\u9664\u5143\u7d20\u5e76\u4e0d\u662f\u5806\u9876\uff0c\u8fd8\u6f5c\u4f0f\u5728\u4e0b\u9762\uff0c\u6ca1\u6709\u5220\u9664\u5230\uff0c\u6bd4\u5982\u53ef\u80fd\u51fa\u73b0\u6709small\u6bd4big\u591a\u4e24\u4e2a\u5143\u7d20\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u5728\u89c2\u5ff5\u4e0a\u6211\u4eec\u5df2\u7ecf\u5c06\u90a3\u4e2a\u5f85\u5220\u9664\u5143\u7d20\u5220\u9664\u4e86\uff0c\u89c2\u5ff5\u4e0a\u8fd9\u4e24\u4e2a\u5806\u5df2\u7ecf\u662f\u5e73\u8861\u7684\u4e86\uff0c\u53ea\u4e0d\u8fc7\u5806\u9876\u662f\u5f85\u5220\u9664\u5143\u7d20\uff0c\u6211\u4eec\u5c31\u5c06\u5b83\u5220\u9664\uff0c\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u5230\u4e2d\u4f4d\u6570\u7684\u8ba1\u7b97\uff0c\u56e0\u4e3a\u89c2\u5ff5\u4e0a\u8fd9\u4e24\u4e2a\u5806\u5728\u6267\u884c\u4e86\u4e0b\u9762\u4ee3\u7801\u540e\u5c31\u662f\u5e73\u8861\u7684\u4e86\u3002\u5728\u6700\u540e\u53d6\u503c\u7684\u65f6\u5019\u5220\u9664\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# \u518d\u5e73\u8861\uff1a\n# \u8f83\u5c0f\u6570\u5b57\u5806\u632a\u4e00\u4e2a\u7ed9\u8f83\u5927\u6570\u5b57\u5806\uff0c\u4f8b\u5982(3,3)->(4,2)->(3,3)\u6216\u8005(4,3)->(5,2)->(4,3)\nif balance == 2:\n    bigger.push(smaller.pop())\n# \u8f83\u5927\u6570\u5b57\u5806\u632a\u4e00\u4e2a\u7ed9\u8f83\u5c0f\u6570\u5b57\u5806\uff0c \u4f8b\u5982(3,3)->(2,4)->(3,3)\u6216\u8005(4,3)->(3,4)->(4,3)\nif balance == -2:\n    smaller.push(bigger.pop())\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import heapq, collections\n\nclass Heap:\n    def __init__(self, name="small"):\n        self.arr = []\n        self.transform = lambda x: x if name=="small" else -x\n\n    def push(self, num):\n        # \u63a8\u5165\u4e00\u4e2a\n        heapq.heappush(self.arr, self.transform(num))\n\n    def pop(self):\n        # \u5f39\u51fa\u5806\u9876\n        return self.transform(heapq.heappop(self.arr))\n\n    @property\n    def top(self):\n        # \u83b7\u53d6\u5806\u9876\u5143\u7d20\n        return self.transform(self.arr[0])\n    \n    @property\n    def length(self):\n        return len(self.arr)\n    \n    @property\n    def isEmpty(self):\n        return len(self.arr) == 0\n\nclass Solution:\n    def medianSlidingWindow(self, nums: List[int], k: int) -> List[float]:\n\n        smaller = Heap("big")      # \u5c0f\u7684\u4e00\u534a\u5927\u6839\u5806\n        bigger = Heap("small")     # \u5927\u7684\u4e00\u534a\u5c0f\u6839\u5806\n\n        # k\u4e3a\u5947\u6570\u65f6\uff0csmaller\u957f\u5ea6\u6bd4bigger\u5927\u4e00\u4e2a\uff0c\u4e2d\u4f4d\u6570\u4e3asmaller\u7684\u5806\u9876\n        # k\u4e3a\u5076\u6570\u65f6\uff0csmaller\u957f\u5ea6\u7b49\u4e8ebigger\uff0c\u4e2d\u4f4d\u6570\u4e3a\u4e24\u4e2a\u5806\u9876\u96642\n        for i in range(k):\n            smaller.push(nums[i])\n        for _ in range(k // 2):\n            bigger.push(smaller.pop())\n\n        get_mid = lambda x, y: x.top if k % 2 else (x.top + y.top) / 2\n        ans = [get_mid(smaller, bigger)]    # \u8bb0\u5f55\u4e0b\u8d77\u59cb\u70b9\u7684\u4e2d\u4f4d\u6570\n        mp = collections.defaultdict(int)   # \u8bb0\u5f55\u4e2a\u6b20\u8d26\uff0c\u5143\u7d20\u5e94\u88ab\u5220\u9664\u4f46\u662f\u8fd8\u6ca1\u5220\u9664\n\n        for i in range(k, len(nums)):\n            balance = 0\n            # balance\u8868\u793a\u56e0\u672c\u6b21\u7a97\u53e3\u6ed1\u52a8\u5bfc\u81f4smaller\u5806\u5143\u7d20\u6570\u76ee\u4e0ebig\u5806\u5143\u7d20\u4e2a\u6570\u5dee\u503c\u7684\u589e\u91cf\n            # \u5faa\u73af\u540e\u5c0f\u4e8e0\u65f6\uff0c\u4ee3\u8868smaller\u5806\u6570\u91cf\u53d8\u5c11\u4e86\n            # \u5faa\u73af\u540e\u5927\u4e8e0\u65f6\uff0c\u4ee3\u8868bigger\u5806\u6570\u91cf\u53d8\u5c11\u4e86\n            # \u5faa\u73af\u540e\u5927\u4e8e0\u65f6\uff0c\u4ee3\u8868bigger\u548csmaller\u4e24\u4e2a\u5806\u7684\u6570\u91cf\u65f6\u5e73\u8861\u7684\n            left, right = nums[i-k], nums[i]   # \u5c06\u88ab\u5220\u9664\u7684\u7a97\u53e3\u6700\u5de6\u5143\u7d20\u548c\u5c06\u88ab\u6dfb\u52a0\u5230\u7a97\u53e3\u6700\u53f3\u7684\u5143\u7d20\n            mp[left] += 1   # \u5de6\u7a97\u53e3\u5143\u7d20\u8bb0\u8d26\n\n            if left <= smaller.top: # \u5224\u65adleft\u5728\u54ea\u4e00\u8fb9\n                balance -= 1          # left\u5728\u8f83\u5c0f\u5806\u65f6\u79fb\u9664\u540e\uff0cbalance\u51cf\u4e00\n            else:\n                balance += 1          # left\u5728\u8f83\u5927\u5806\u65f6\u79fb\u9664\u540e\uff0cbalance\u52a0\u4e00\n            if right <= smaller.top:# \u5224\u65adright\u5728\u54ea\u4e00\u8fb9\n                balance += 1          # right\u5728\u8f83\u5c0f\u5806\u6dfb\u52a0\u540e\uff0cbalance\u52a0\u4e00\n                smaller.push(right)\n            else:\n                balance -= 1          # right\u5728\u8f83\u5927\u5806\u6dfb\u52a0\u540e\uff0cbalance\u51cf\u4e00\n                bigger.push(right)\n            """\n            \u6b64\u65f6balance\u53d6\u503c\u53ef\u80fd\u662f:\n            balance | small | big  | \u89e3\u91ca\n              0     | -1+1  |      | \u8f83\u5c0f\u6570\u5b57\u5806\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\uff0c\u4e24\u8fb9\u8fd8\u662f\u5e73\u8861\u7684\n              0     |       | +1-1 | \u8f83\u5927\u6570\u5b57\u5806\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\uff0c\u4e24\u8fb9\u8fd8\u662f\u5e73\u8861\u7684\n             -2     | -1    | -1   | \u8f83\u5c0f\u6570\u5b57\u5806\u5220\u9664\u4e00\u4e2a\u5143\u7d20\uff0c\u8f83\u5927\u6570\u5b57\u5806\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\uff0c\u5931\u8861\n              2     | +1    | +1   | \u8f83\u5927\u6570\u5b57\u5806\u5220\u9664\u4e00\u4e2a\u5143\u7d20\uff0c\u8f83\u5c0f\u6570\u5b57\u5806\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\uff0c\u5931\u8861\n            """\n\n            # \u518d\u5e73\u8861\uff1a\n            # \u8f83\u5c0f\u6570\u5b57\u5806\u632a\u4e00\u4e2a\u7ed9\u8f83\u5927\u6570\u5b57\u5806\uff0c\u4f8b\u5982(3,3)->(4,2)->(3,3)\u6216\u8005(4,3)->(5,2)->(4,3)\n            if balance == 2:\n                bigger.push(smaller.pop())\n            # \u8f83\u5927\u6570\u5b57\u5806\u632a\u4e00\u4e2a\u7ed9\u8f83\u5c0f\u6570\u5b57\u5806\uff0c \u4f8b\u5982(3,3)->(2,4)->(3,3)\u6216\u8005(4,3)->(3,4)->(4,3)\n            if balance == -2:\n                smaller.push(bigger.pop())\n\n            # \u89c2\u5ff5\u4e0a\u91cd\u65b0\u8fbe\u5230\u5e73\u8861\u4e86,\u770b\u770b\u5806\u9876\u662f\u4e0d\u662f\u5f85\u5220\u9664\u5143\u7d20\u4e86\uff0c\u53d6\u5f97\u5b9e\u9645\u4e0a\u7684\u5806\u9876\u503c\n            while not smaller.isEmpty and mp[smaller.top]:  # \u8f83\u5c0f\u5806\u7684\u5806\u9876\u6709\u6b20\u8d26\n                mp[smaller.top] -= 1\n                smaller.pop()\n            while not bigger.isEmpty and mp[bigger.top]:    # \u8f83\u5927\u5806\u7684\u5806\u9876\u6709\u6b20\u8d26\n                mp[bigger.top] -= 1\n                bigger.pop()\n\n            ans.append(get_mid(smaller, bigger))\n\n        return ans\n')))}c.isMDXComponent=!0}}]);