"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[966],{3905:(n,t,e)=>{e.d(t,{Zo:()=>s,kt:()=>f});var i=e(67294);function r(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function a(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,i)}return e}function o(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?a(Object(e),!0).forEach((function(t){r(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):a(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function p(n,t){if(null==n)return{};var e,i,r=function(n,t){if(null==n)return{};var e,i,r={},a=Object.keys(n);for(i=0;i<a.length;i++)e=a[i],t.indexOf(e)>=0||(r[e]=n[e]);return r}(n,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(i=0;i<a.length;i++)e=a[i],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(r[e]=n[e])}return r}var l=i.createContext({}),c=function(n){var t=i.useContext(l),e=t;return n&&(e="function"==typeof n?n(t):o(o({},t),n)),e},s=function(n){var t=c(n.components);return i.createElement(l.Provider,{value:t},n.children)},m="mdxType",d={inlineCode:"code",wrapper:function(n){var t=n.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(n,t){var e=n.components,r=n.mdxType,a=n.originalType,l=n.parentName,s=p(n,["components","mdxType","originalType","parentName"]),m=c(e),u=r,f=m["".concat(l,".").concat(u)]||m[u]||d[u]||a;return e?i.createElement(f,o(o({ref:t},s),{},{components:e})):i.createElement(f,o({ref:t},s))}));function f(n,t){var e=arguments,r=t&&t.mdxType;if("string"==typeof n||r){var a=e.length,o=new Array(a);o[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=n,p[m]="string"==typeof n?n:r,o[1]=p;for(var c=2;c<a;c++)o[c]=e[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,e)}u.displayName="MDXCreateElement"},63005:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>p,toc:()=>c});var i=e(87462),r=(e(67294),e(3905));const a={},o=void 0,p={unversionedId:"Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u591a\u6e90bfs-dp>-01\u77e9\u9635",id:"Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u591a\u6e90bfs-dp>-01\u77e9\u9635",title:"<\u591a\u6e90bfs-dp>-01\u77e9\u9635",description:"\u9898\u76ee\uff1a542. 01 \u77e9\u9635",source:"@site/docs/Algorithm/4-\u56fe\u8bba/\u4f8b\u9898-BFS/542-<\u591a\u6e90bfs-dp>-01\u77e9\u9635.md",sourceDirName:"Algorithm/4-\u56fe\u8bba/\u4f8b\u9898-BFS",slug:"/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u591a\u6e90bfs-dp>-01\u77e9\u9635",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u591a\u6e90bfs-dp>-01\u77e9\u9635",draft:!1,tags:[],version:"current",sidebarPosition:542,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<\u9006\u5411\u8d70>-\u592a\u5e73\u6d0b\u5927\u897f\u6d0b\u6c34\u6d41\u95ee\u9898",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u9006\u5411\u8d70>-\u592a\u5e73\u6d0b\u5927\u897f\u6d0b\u6c34\u6d41\u95ee\u9898"},next:{title:"<\u53cc\u5411bfs>-\u6253\u5f00\u8f6c\u76d8\u9501",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u53cc\u5411bfs>-\u6253\u5f00\u8f6c\u76d8\u9501"}},l={},c=[{value:"\u65b9\u6cd5\u4e00\uff1a\u591a\u6e90bfs",id:"\u65b9\u6cd5\u4e00\u591a\u6e90bfs",level:2},{value:"\u65b9\u6cd5\u4e8c\uff1a\u52a8\u6001\u89c4\u5212",id:"\u65b9\u6cd5\u4e8c\u52a8\u6001\u89c4\u5212",level:2}],s={toc:c};function m(n){let{components:t,...e}=n;return(0,r.kt)("wrapper",(0,i.Z)({},s,e,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"\u9898\u76ee\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/01-matrix/"},"542. 01 \u77e9\u9635")),(0,r.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u7531 ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," \u548c ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," \u7ec4\u6210\u7684\u77e9\u9635 ",(0,r.kt)("inlineCode",{parentName:"p"},"mat")," \uff0c\u8bf7\u8f93\u51fa\u4e00\u4e2a\u5927\u5c0f\u76f8\u540c\u7684\u77e9\u9635\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u683c\u5b50\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"mat")," \u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u5143\u7d20\u5230\u6700\u8fd1\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," \u7684\u8ddd\u79bb\u3002"),(0,r.kt)("p",null,"\u4e24\u4e2a\u76f8\u90bb\u5143\u7d20\u95f4\u7684\u8ddd\u79bb\u4e3a ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," \u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1\uff1a")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://pic.leetcode-cn.com/1626667201-NCWmuP-image.png",alt:"img"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1amat = [[0,0,0],[0,1,0],[0,0,0]]\n\u8f93\u51fa\uff1a[[0,0,0],[0,1,0],[0,0,0]]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u793a\u4f8b 2\uff1a")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://pic.leetcode-cn.com/1626667205-xFxIeK-image.png",alt:"img"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1amat = [[0,0,0],[0,1,0],[1,1,1]]\n\u8f93\u51fa\uff1a[[0,0,0],[0,1,0],[1,2,1]]\n")),(0,r.kt)("p",null,"\u63d0\u793a\uff1a"),(0,r.kt)("p",null,"m == mat.length\nn == mat","[i]",".length\n1 <= m, n <= 104\n1 <= m * n <= 104\nmat","[i][j]"," is either 0 or 1.\nmat \u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a 0 "),(0,r.kt)("h2",{id:"\u65b9\u6cd5\u4e00\u591a\u6e90bfs"},"\u65b9\u6cd5\u4e00\uff1a\u591a\u6e90bfs"),(0,r.kt)("p",null,"\u4ece 0 \u5f80 1 \u4f20\u64ad\uff0c\u7b2c\u4e00\u6b21\u4f20\u64ad\u5230 1 \u70b9\u7684\u8ddd\u79bb\uff0c\u5c31\u662f 1 \u70b9\u5230\u6700\u8fd1 0 \u70b9\u7684\u8ddd\u79bb"),(0,r.kt)("p",null,"\u8fd8\u6709\u4e00\u79cd BFS \u7684\u505a\u6cd5\uff0c\u5c31\u662f\u5148\u627e\u51fa\u5728 0 \u8fb9\u4e0a\u7684\u6240\u6709\u7684 1\uff0c\u7136\u540e\u628a\u8fd9\u4e9b 1 \u653e\u5230\u961f\u5217\u91cc"),(0,r.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"O(n^2)")),(0,r.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"O(n^2)")),(0,r.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a136 ms, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e865.94%\u7684\u7528\u6237"),(0,r.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a43.2 MB, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e864.99%\u7684\u7528\u6237"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    int rows;\n    int cols;\n    vector<pair<int, int>> directions = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};\n\n    int getIdx(int r, int c) {\n        return r * cols + c;\n    }\n\n    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {\n        rows = mat.size();\n        cols = mat[0].size();\n        vector<vector<int>> ans = mat;\n\n        deque<pair<int, int>> que;\n        unordered_map<int, int> visited;\n        for (int r = 0; r < rows; r++) {\n            for (int c = 0; c < cols; c++) {\n                if (mat[r][c] == 0) {\n                    que.push_back({r, c});\n                    visited[getIdx(r, c)] = 0;\n                }\n            }\n        }\n\n        while (!que.empty()) {\n            auto [cur_r, cur_c] = que.front();\n            que.pop_front();\n            int depth = visited[getIdx(cur_r, cur_c)];\n\n            for (auto& [dr, dc] : directions) {\n                int nr = cur_r + dr;\n                int nc = cur_c + dc;\n                int nidx = getIdx(nr, nc);\n\n                if (nr < 0 || nr >= rows || nc < 0 || nc >= cols) continue;\n                if (mat[nr][nc] != 1) continue;          // \u53ea\u80fd\u5f80 1 \u4f20\u64ad\n                if (visited.count(nidx) == 1) continue;  // \u4e0d\u80fd\u8d70\u5df2\u7ecf\u8d70\u8fc7\u7684\u8def\uff0c\u4e14\u7b2c\u4e00\u6b21\u8d70\u5230\u7684\u5c31\u662f\u6700\u77ed\u7684\u8ddd\u79bb\n\n                que.push_back({nr, nc});\n                visited[nidx] = depth + 1;\n                ans[nr][nc] = depth + 1;\n            }\n        }\n        return ans;\n    }\n};\n")),(0,r.kt)("h2",{id:"\u65b9\u6cd5\u4e8c\u52a8\u6001\u89c4\u5212"},"\u65b9\u6cd5\u4e8c\uff1a\u52a8\u6001\u89c4\u5212"),(0,r.kt)("p",null,"\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"dp[i][j]")," \u6765\u8868\u793a\u8be5\u4f4d\u7f6e\u8ddd\u79bb\u6700\u8fd1\u7684 0 \u7684\u8ddd\u79bb"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"dp[i][j]")," \u662f\u7531\u5176\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u72b6\u6001\u6765\u51b3\u5b9a\uff0c\u65e0\u6cd5\u4ece\u4e00\u4e2a\u65b9\u5411\u5f00\u59cb\u9012\u63a8\uff01"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u8ddd\u79bb (i, j) \u6700\u8fd1\u7684 0 \u7684\u4f4d\u7f6e\uff0c\u662f\u5728\u5176 \u300c\u5de6\u4e0a\uff0c\u53f3\u4e0a\uff0c\u5de6\u4e0b\uff0c\u53f3\u4e0b\u300d4\u4e2a\u65b9\u5411\u4e4b\u4e00\uff1b"),(0,r.kt)("li",{parentName:"ul"},"\u56e0\u6b64\u6211\u4eec\u5206\u522b\u4ece\u56db\u4e2a\u89d2\u5f00\u59cb\u9012\u63a8\uff0c\u5c31\u5206\u522b\u5f97\u5230\u4e86\u4f4d\u4e8e\u300c\u5de6\u4e0a\u65b9\u3001\u53f3\u4e0a\u65b9\u3001\u5de6\u4e0b\u65b9\u3001\u53f3\u4e0b\u65b9\u300d\u8ddd\u79bb (i, j) \u7684\u6700\u8fd1\u7684 0 \u7684\u8ddd\u79bb\uff0c\u53d6 min \u5373\u53ef\uff1b")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    vector<vector<int>> updateMatrix(vector<vector<int>>& matrix) {\n        int m = matrix.size(), n = matrix[0].size();\n        // \u521d\u59cb\u5316\u52a8\u6001\u89c4\u5212\u7684\u6570\u7ec4\uff0c\u6240\u6709\u7684\u8ddd\u79bb\u503c\u90fd\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u5f88\u5927\u7684\u6570\n        vector<vector<int>> dist(m, vector<int>(n, INT_MAX / 2));\n        // \u5982\u679c (i, j) \u7684\u5143\u7d20\u4e3a 0\uff0c\u90a3\u4e48\u8ddd\u79bb\u4e3a 0\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (matrix[i][j] == 0) {\n                    dist[i][j] = 0;\n                }\n            }\n        }\n        // \u53ea\u6709 \u6c34\u5e73\u5411\u5de6\u79fb\u52a8 \u548c \u7ad6\u76f4\u5411\u4e0a\u79fb\u52a8\uff0c\u6ce8\u610f\u52a8\u6001\u89c4\u5212\u7684\u8ba1\u7b97\u987a\u5e8f\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (i - 1 >= 0) {\n                    dist[i][j] = min(dist[i][j], dist[i - 1][j] + 1);\n                }\n                if (j - 1 >= 0) {\n                    dist[i][j] = min(dist[i][j], dist[i][j - 1] + 1);\n                }\n            }\n        }\n        // \u53ea\u6709 \u6c34\u5e73\u5411\u5de6\u79fb\u52a8 \u548c \u7ad6\u76f4\u5411\u4e0b\u79fb\u52a8\uff0c\u6ce8\u610f\u52a8\u6001\u89c4\u5212\u7684\u8ba1\u7b97\u987a\u5e8f\n        for (int i = m - 1; i >= 0; --i) {\n            for (int j = 0; j < n; ++j) {\n                if (i + 1 < m) {\n                    dist[i][j] = min(dist[i][j], dist[i + 1][j] + 1);\n                }\n                if (j - 1 >= 0) {\n                    dist[i][j] = min(dist[i][j], dist[i][j - 1] + 1);\n                }\n            }\n        }\n        // \u53ea\u6709 \u6c34\u5e73\u5411\u53f3\u79fb\u52a8 \u548c \u7ad6\u76f4\u5411\u4e0a\u79fb\u52a8\uff0c\u6ce8\u610f\u52a8\u6001\u89c4\u5212\u7684\u8ba1\u7b97\u987a\u5e8f\n        for (int i = 0; i < m; ++i) {\n            for (int j = n - 1; j >= 0; --j) {\n                if (i - 1 >= 0) {\n                    dist[i][j] = min(dist[i][j], dist[i - 1][j] + 1);\n                }\n                if (j + 1 < n) {\n                    dist[i][j] = min(dist[i][j], dist[i][j + 1] + 1);\n                }\n            }\n        }\n        // \u53ea\u6709 \u6c34\u5e73\u5411\u53f3\u79fb\u52a8 \u548c \u7ad6\u76f4\u5411\u4e0b\u79fb\u52a8\uff0c\u6ce8\u610f\u52a8\u6001\u89c4\u5212\u7684\u8ba1\u7b97\u987a\u5e8f\n        for (int i = m - 1; i >= 0; --i) {\n            for (int j = n - 1; j >= 0; --j) {\n                if (i + 1 < m) {\n                    dist[i][j] = min(dist[i][j], dist[i + 1][j] + 1);\n                }\n                if (j + 1 < n) {\n                    dist[i][j] = min(dist[i][j], dist[i][j + 1] + 1);\n                }\n            }\n        }\n        return dist;\n    }\n};\n")),(0,r.kt)("p",null,"\u4efb\u4e00\u7ec4\u5bf9\u89d2\u5f00\u59cb\u7684 2 \u6b21\u9012\u63a8\u5199\u6cd5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n  public int[][] updateMatrix(int[][] matrix) {\n    int m = matrix.length, n = matrix[0].length;\n    int[][] dp = new int[m][n];\n    for (int i = 0; i < m; i++) {\n      for (int j = 0; j < n; j++) {\n        dp[i][j] = matrix[i][j] == 0 ? 0 : 10000;\n      }\n    }\n\n    // \u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\n    for (int i = 0; i < m; i++) {\n      for (int j = 0; j < n; j++) {\n        if (i - 1 >= 0) {\n          dp[i][j] = Math.min(dp[i][j], dp[i - 1][j] + 1);\n        }\n        if (j - 1 >= 0) {\n          dp[i][j] = Math.min(dp[i][j], dp[i][j - 1] + 1);\n        }\n      }\n    }\n    // \u4ece\u53f3\u4e0b\u89d2\u5f00\u59cb\n    for (int i = m - 1; i >= 0; i--) {\n      for (int j = n - 1; j >= 0; j--) {\n        if (i + 1 < m) {\n          dp[i][j] = Math.min(dp[i][j], dp[i + 1][j] + 1);\n        }\n        if (j + 1 < n) {\n          dp[i][j] = Math.min(dp[i][j], dp[i][j + 1] + 1);\n        }\n      }\n    }\n    return dp;\n  }\n}\n")))}m.isMDXComponent=!0}}]);