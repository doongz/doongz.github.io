"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9348],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>d});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),m=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=m(e.components);return o.createElement(c.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=m(t),p=r,d=u["".concat(c,".").concat(p)]||u[p]||f[p]||i;return t?o.createElement(d,a(a({ref:n},s),{},{components:t})):o.createElement(d,a({ref:n},s))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:r,a[1]=l;for(var m=2;m<i;m++)a[m]=t[m];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},71436:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var o=t(87462),r=(t(67294),t(3905));const i={},a=void 0,l={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5e76\u67e5\u96c6/<\u590d\u6742>-\u8d26\u6237\u5408\u5e76",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5e76\u67e5\u96c6/<\u590d\u6742>-\u8d26\u6237\u5408\u5e76",title:"<\u590d\u6742>-\u8d26\u6237\u5408\u5e76",description:"\u9898\u76ee\uff1a721. \u8d26\u6237\u5408\u5e76",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5e76\u67e5\u96c6/721-<\u590d\u6742>-\u8d26\u6237\u5408\u5e76.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5e76\u67e5\u96c6",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5e76\u67e5\u96c6/<\u590d\u6742>-\u8d26\u6237\u5408\u5e76",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5e76\u67e5\u96c6/<\u590d\u6742>-\u8d26\u6237\u5408\u5e76",draft:!1,tags:[],version:"current",sidebarPosition:721,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<\u5e76\u67e5\u96c6\u7684\u94fe\u63a5>-\u5197\u4f59\u8fde\u63a5",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5e76\u67e5\u96c6/<\u5e76\u67e5\u96c6\u7684\u94fe\u63a5>-\u5197\u4f59\u8fde\u63a5"},next:{title:"<\u8fde\u901a\u6027\u5224\u65ad>-\u7b49\u5f0f\u65b9\u7a0b\u7684\u53ef\u6ee1\u8db3\u6027",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5e76\u67e5\u96c6/<\u8fde\u901a\u6027\u5224\u65ad>-\u7b49\u5f0f\u65b9\u7a0b\u7684\u53ef\u6ee1\u8db3\u6027"}},c={},m=[],s={toc:m};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"\u9898\u76ee\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/accounts-merge/"},"721. \u8d26\u6237\u5408\u5e76")),(0,r.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u5217\u8868 accounts\uff0c\u6bcf\u4e2a\u5143\u7d20 accounts","[i]"," \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20 accounts","[i][0]"," \u662f \u540d\u79f0 (name)\uff0c\u5176\u4f59\u5143\u7d20\u662f emails \u8868\u793a\u8be5\u8d26\u6237\u7684\u90ae\u7bb1\u5730\u5740\u3002"),(0,r.kt)("p",null,"\u73b0\u5728\uff0c\u6211\u4eec\u60f3\u5408\u5e76\u8fd9\u4e9b\u8d26\u6237\u3002\u5982\u679c\u4e24\u4e2a\u8d26\u6237\u90fd\u6709\u4e00\u4e9b\u5171\u540c\u7684\u90ae\u7bb1\u5730\u5740\uff0c\u5219\u4e24\u4e2a\u8d26\u6237\u5fc5\u5b9a\u5c5e\u4e8e\u540c\u4e00\u4e2a\u4eba\u3002\u8bf7\u6ce8\u610f\uff0c\u5373\u4f7f\u4e24\u4e2a\u8d26\u6237\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\uff0c\u5b83\u4eec\u4e5f\u53ef\u80fd\u5c5e\u4e8e\u4e0d\u540c\u7684\u4eba\uff0c\u56e0\u4e3a\u4eba\u4eec\u53ef\u80fd\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\u3002\u4e00\u4e2a\u4eba\u6700\u521d\u53ef\u4ee5\u62e5\u6709\u4efb\u610f\u6570\u91cf\u7684\u8d26\u6237\uff0c\u4f46\u5176\u6240\u6709\u8d26\u6237\u90fd\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\u3002"),(0,r.kt)("p",null,"\u5408\u5e76\u8d26\u6237\u540e\uff0c\u6309\u4ee5\u4e0b\u683c\u5f0f\u8fd4\u56de\u8d26\u6237\uff1a\u6bcf\u4e2a\u8d26\u6237\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u540d\u79f0\uff0c\u5176\u4f59\u5143\u7d20\u662f \u6309\u5b57\u7b26 ASCII \u987a\u5e8f\u6392\u5217 \u7684\u90ae\u7bb1\u5730\u5740\u3002\u8d26\u6237\u672c\u8eab\u53ef\u4ee5\u4ee5 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1\uff1a")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'\u8f93\u5165\uff1aaccounts = [["John", "johnsmith@mail.com", "john00@mail.com"], ["John", "johnnybravo@mail.com"], ["John", "johnsmith@mail.com", "john_newyork@mail.com"], ["Mary", "mary@mail.com"]]\n\u8f93\u51fa\uff1a[["John", \'john00@mail.com\', \'john_newyork@mail.com\', \'johnsmith@mail.com\'],  ["John", "johnnybravo@mail.com"], ["Mary", "mary@mail.com"]]\n\u89e3\u91ca\uff1a\n\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e09\u4e2a John \u662f\u540c\u4e00\u4e2a\u4eba\uff0c\u56e0\u4e3a\u4ed6\u4eec\u6709\u5171\u540c\u7684\u90ae\u7bb1\u5730\u5740 "johnsmith@mail.com"\u3002 \n\u7b2c\u4e8c\u4e2a John \u548c Mary \u662f\u4e0d\u540c\u7684\u4eba\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7684\u90ae\u7bb1\u5730\u5740\u6ca1\u6709\u88ab\u5176\u4ed6\u5e10\u6237\u4f7f\u7528\u3002\n\u53ef\u4ee5\u4ee5\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u8fd9\u4e9b\u5217\u8868\uff0c\u4f8b\u5982\u7b54\u6848 [[\'Mary\'\uff0c\'mary@mail.com\']\uff0c[\'John\'\uff0c\'johnnybravo@mail.com\']\uff0c\n[\'John\'\uff0c\'john00@mail.com\'\uff0c\'john_newyork@mail.com\'\uff0c\'johnsmith@mail.com\']] \u4e5f\u662f\u6b63\u786e\u7684\u3002\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u793a\u4f8b 2\uff1a")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'\u8f93\u5165\uff1aaccounts = [["Gabe","Gabe0@m.co","Gabe3@m.co","Gabe1@m.co"],["Kevin","Kevin3@m.co","Kevin5@m.co","Kevin0@m.co"],["Ethan","Ethan5@m.co","Ethan4@m.co","Ethan0@m.co"],["Hanzo","Hanzo3@m.co","Hanzo1@m.co","Hanzo0@m.co"],["Fern","Fern5@m.co","Fern1@m.co","Fern0@m.co"]]\n\u8f93\u51fa\uff1a[["Ethan","Ethan0@m.co","Ethan4@m.co","Ethan5@m.co"],["Gabe","Gabe0@m.co","Gabe1@m.co","Gabe3@m.co"],["Hanzo","Hanzo0@m.co","Hanzo1@m.co","Hanzo3@m.co"],["Kevin","Kevin0@m.co","Kevin3@m.co","Kevin5@m.co"],["Fern","Fern0@m.co","Fern1@m.co","Fern5@m.co"]]\n')),(0,r.kt)("p",null,"\u63d0\u793a\uff1a"),(0,r.kt)("p",null,"1 <= accounts.length <= 1000\n2 <= accounts","[i]",".length <= 10\n",(0,r.kt)("inlineCode",{parentName:"p"},"1 <= accounts[i][j].length <= 30"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"accounts[i][0] \u7531\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"accounts[i][j] (for j > 0) \u662f\u6709\u6548\u7684\u90ae\u7bb1\u5730\u5740")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/accounts-merge/solution/tu-jie-yi-ran-shi-bing-cha-ji-by-yexiso-5ncf/"},(0,r.kt)("strong",{parentName:"a"},"\u65b9\u6cd5\u4e00\uff1a\u5e76\u67e5\u96c6"))),(0,r.kt)("p",null,"\u6839\u636e\u9898\u610f\u53ef\u77e5\uff1a\u5b58\u5728\u76f8\u540c\u90ae\u7bb1\u7684\u8d26\u53f7\u4e00\u5b9a\u5c5e\u4e8e\u540c\u4e00\u4e2a\u4eba\uff0c\u540d\u79f0\u76f8\u540c\u7684\u8d26\u6237\u4e0d\u4e00\u5b9a\u5c5e\u4e8e\u540c\u4e00\u4e2a\u4eba"),(0,r.kt)("p",null,"\u7531\u4e8e\u540d\u79f0\u76f8\u540c\u65e0\u6cd5\u5224\u65ad\u4e3a\u540c1\u4eba\uff0c\u6240\u4ee5\u53ea\u80fd\u4f7f\u7528\u90ae\u7bb1\u662f\u5426\u76f8\u540c\u6765\u5224\u65ad\u662f\u5426\u4e3a\u540c\u4e00\u4eba\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class UnionFind:\n    def __init__(self):\n        """\n        \u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\n        """\n        self.father = {}    \n    \n    def add(self, x):\n        """\n        \u6dfb\u52a0\u65b0\u8282\u70b9\n        \u5f53\u628a\u4e00\u4e2a\u65b0\u8282\u70b9\u6dfb\u52a0\u5230\u5e76\u67e5\u96c6\u4e2d\uff0c\u5b83\u7684\u7236\u8282\u70b9\u5e94\u8be5\u4e3a\u7a7a\n        """\n        if x not in self.father:\n            self.father[x] = None\n\n    def find(self, x):\n        """\n        \u67e5\u627e\u6839\u8282\u70b9\uff0c\u5982\u679c\u8282\u70b9\u7684\u7236\u8282\u70b9\u4e0d\u4e3a\u7a7a\uff0c\u90a3\u5c31\u4e0d\u65ad\u8fed\u4ee3\u3002\n        """\n        root = x\n\n        while self.father[root] != None:\n            root = self.father[root]\n\n        # \u8def\u5f84\u538b\u7f29\n        while x != root:\n            original_father = self.father[x]\n            self.father[x] = root\n            x = original_father\n\n        return root\n\n    def merge(self, x, y):\n        """\n        \u5408\u5e76\u4e24\u4e2a\u8282\u70b9\uff0cy\u7684\u6839\u7ed3\u70b9\u4f5c\u4e3ax\u6839\u8282\u70b9\u7684\u7236\u4eb2\n        """\n        root_x, root_y = self.find(x), self.find(y)\n\n        if root_x != root_y:\n            # root_x \u63a5\u5728 root_y \u540e\u9762\n            self.father[root_x] = root_y\n\n    def is_connected(self,x, y):\n        """\n        \u5224\u65ad\u4e24\u8282\u70b9\u662f\u5426\u76f8\u8fde\n        \u5224\u65ad\u4e24\u4e2a\u8282\u70b9\u662f\u5426\u5904\u4e8e\u540c\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u5224\u65ad\u5b83\u4eec\u7684\u7956\u5148\u662f\u5426\u76f8\u540c\n        """\n        return self.find(x) == self.find(y)\n\nclass Solution:\n    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:\n        import collections\n        uf = UnionFind()\n        for user_id in range(len(accounts)):\n            # \u521d\u59cb\u5316\u6bcf\u4e2a\u7528\u6237id\u8fde\u901a\u5206\u91cf\u4e3a1\uff0c\u8fdb\u5165\u5e76\u67e5\u96c6\n            uf.add(user_id)\n\n        # key: email, value: user_id\n        # \u7528\u5904\uff1a\u901a\u8fc7 email in email_id\uff0c\u6765\u68c0\u6d4b email \u6709\u6ca1\u6709\u91cd\u590d\u51fa\u73b0\uff0c\n        email_id = {}\n        for user_id, account in enumerate(accounts):\n            for email in account[1:]:\n                if email in email_id:\n                    # \u5982\u679c\u91cd\u590d\u51fa\u73b0\u4e86\uff0c\u8bf4\u660e\u8fd9\u4e24\u4e2auser_id\u4e3a\u540c\u4e00\u4e2a\u4eba\uff0c\n                    # \u5408\u5e76\uff1a\u5c06\u672c\u6b21\u7684user_id\u4f5c\u4e3a\u4e4b\u524d\u8bb0\u5f55\u5728email_id\u4e2duser_id\u7684\u7236\u4eb2\n                    # \u4e24\u4e2auser_id\u4e0d\u540c\uff0c\u4f46\u662f\u4ed6\u4eec\u7684user\u540d\u76f8\u540c\n                    uf.merge(email_id[email], user_id)\n                else:\n                    # \u5982\u679c\u6ca1\u51fa\u73b0\u4e86\uff0c\u5728\u8fd9\u4e2a\u5b57\u5178\u4e2d\u8bb0\u5f55\uff0cvalue\u4e3a\u8fd9\u4e2aemail\u7684user_id\n                    email_id[email] = user_id\n        # \u904d\u5386\u7ed3\u675f\u540e\uff0c\n        # \u5e76\u67e5\u96c6uf\u4e2d\uff0c\u6240\u6709\u8fde\u901a\u7684\u503c\u6709\u5171\u540c\u7684father(user_id)\uff0c\u6ca1\u8fde\u901a\u7684\u503cfather\u4e3anone\n        # \u5b57\u5178email_id\u4e2d\uff0c\u8bb0\u5f55\u4e86\u6bcf\u4e2aemail\u7684\u5bf9\u5e94\u7684user_id\uff0c\u6839\u636euser_id\u53ef\u4ee5\u5728\u5e76\u67e5\u96c6\u4e2d\u627e\u5230\u4ed6\u7684father\n\n        # key: user_id, value: email list\uff0c\u8bb0\u5f55\u6bcf\u4e2a user_id \u7684emails\n        id_email = collections.defaultdict(list)\n        for email, user_id in email_id.items():\n            id_email[uf.find(user_id)].append(email)  # \u6ce8\u610f\u8fd9\u91ccid_email\u7684key\n\n        return [[accounts[i][0]] + sorted(e) for i, e in id_email.items()]\n\n\n')))}u.isMDXComponent=!0}}]);