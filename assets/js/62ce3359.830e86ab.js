"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[23024],{3905:(e,n,o)=>{o.d(n,{Zo:()=>p,kt:()=>N});var t=o(67294);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function d(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function i(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?d(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):d(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function l(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},d=Object.keys(e);for(t=0;t<d.length;t++)o=d[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(t=0;t<d.length;t++)o=d[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var a=t.createContext({}),s=function(e){var n=t.useContext(a),o=n;return e&&(o="function"==typeof e?e(n):i(i({},n),e)),o},p=function(e){var n=s(e.components);return t.createElement(a.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var o=e.components,r=e.mdxType,d=e.originalType,a=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(o),f=r,N=u["".concat(a,".").concat(f)]||u[f]||c[f]||d;return o?t.createElement(N,i(i({ref:n},p),{},{components:o})):t.createElement(N,i({ref:n},p))}));function N(e,n){var o=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var d=o.length,i=new Array(d);i[0]=f;var l={};for(var a in n)hasOwnProperty.call(n,a)&&(l[a]=n[a]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<d;s++)i[s]=o[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,o)}f.displayName="MDXCreateElement"},27286:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>d,metadata:()=>l,toc:()=>s});var t=o(87462),r=(o(67294),o(3905));const d={},i=void 0,l={unversionedId:"Algorithm/\u56fe\u8bba/\u4f8b\u9898-DFS/<\u91cd\u5efa\u56fe-dfs-bfs>-\u514b\u9686\u56fe",id:"Algorithm/\u56fe\u8bba/\u4f8b\u9898-DFS/<\u91cd\u5efa\u56fe-dfs-bfs>-\u514b\u9686\u56fe",title:"<\u91cd\u5efa\u56fe-dfs-bfs>-\u514b\u9686\u56fe",description:"\u9898\u76ee\uff1a133. \u514b\u9686\u56fe",source:"@site/docs/Algorithm/4-\u56fe\u8bba/\u4f8b\u9898-DFS/133-<\u91cd\u5efa\u56fe-dfs-bfs>-\u514b\u9686\u56fe.md",sourceDirName:"Algorithm/4-\u56fe\u8bba/\u4f8b\u9898-DFS",slug:"/Algorithm/\u56fe\u8bba/\u4f8b\u9898-DFS/<\u91cd\u5efa\u56fe-dfs-bfs>-\u514b\u9686\u56fe",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-DFS/<\u91cd\u5efa\u56fe-dfs-bfs>-\u514b\u9686\u56fe",draft:!1,tags:[],version:"current",sidebarPosition:133,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<\u56de\u6eaf>-\u5206\u5272\u56de\u6587\u4e32",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-DFS/<\u56de\u6eaf>-\u5206\u5272\u56de\u6587\u4e32"},next:{title:"<dfs\u904d\u5386\u65f6\u7edf\u8ba1>-\u5c9b\u5c7f\u7684\u5468\u957f",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-DFS/<dfs\u904d\u5386\u65f6\u7edf\u8ba1>-\u5c9b\u5c7f\u7684\u5468\u957f"}},a={},s=[{value:"\u65b9\u6cd5\u4e00\uff1adfs",id:"\u65b9\u6cd5\u4e00dfs",level:2},{value:"\u65b9\u6cd5\u4e8c\uff1abfs",id:"\u65b9\u6cd5\u4e8cbfs",level:2}],p={toc:s};function u(e){let{components:n,...o}=e;return(0,r.kt)("wrapper",(0,t.Z)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"\u9898\u76ee\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/clone-graph/"},"133. \u514b\u9686\u56fe")),(0,r.kt)("p",null,"\u7ed9\u4f60\u65e0\u5411 ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://baike.baidu.com/item/%E8%BF%9E%E9%80%9A%E5%9B%BE/6460995?fr=aladdin"},"\u8fde\u901a"))," \u56fe\u4e2d\u4e00\u4e2a\u8282\u70b9\u7684\u5f15\u7528\uff0c\u8bf7\u4f60\u8fd4\u56de\u8be5\u56fe\u7684 ",(0,r.kt)("a",{parentName:"p",href:"https://baike.baidu.com/item/%E6%B7%B1%E6%8B%B7%E8%B4%9D/22785317?fr=aladdin"},(0,r.kt)("strong",{parentName:"a"},"\u6df1\u62f7\u8d1d")),"\uff08\u514b\u9686\uff09\u3002"),(0,r.kt)("p",null,"\u56fe\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u5305\u542b\u5b83\u7684\u503c ",(0,r.kt)("inlineCode",{parentName:"p"},"val"),"\uff08",(0,r.kt)("inlineCode",{parentName:"p"},"int"),"\uff09 \u548c\u5176\u90bb\u5c45\u7684\u5217\u8868\uff08",(0,r.kt)("inlineCode",{parentName:"p"},"list[Node]"),"\uff09\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"class Node {\n    public int val;\n    public List<Node> neighbors;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1aadjList = [[2,4],[1,3],[2,4],[1,3]]\n\u8f93\u51fa\uff1a[[2,4],[1,3],[2,4],[1,3]]\n\u89e3\u91ca\uff1a\n\u56fe\u4e2d\u6709 4 \u4e2a\u8282\u70b9\u3002\n\u8282\u70b9 1 \u7684\u503c\u662f 1\uff0c\u5b83\u6709\u4e24\u4e2a\u90bb\u5c45\uff1a\u8282\u70b9 2 \u548c 4 \u3002\n\u8282\u70b9 2 \u7684\u503c\u662f 2\uff0c\u5b83\u6709\u4e24\u4e2a\u90bb\u5c45\uff1a\u8282\u70b9 1 \u548c 3 \u3002\n\u8282\u70b9 3 \u7684\u503c\u662f 3\uff0c\u5b83\u6709\u4e24\u4e2a\u90bb\u5c45\uff1a\u8282\u70b9 2 \u548c 4 \u3002\n\u8282\u70b9 4 \u7684\u503c\u662f 4\uff0c\u5b83\u6709\u4e24\u4e2a\u90bb\u5c45\uff1a\u8282\u70b9 1 \u548c 3 \u3002\n\n\u8f93\u5165\uff1aadjList = [[]]\n\u8f93\u51fa\uff1a[[]]\n\u89e3\u91ca\uff1a\u8f93\u5165\u5305\u542b\u4e00\u4e2a\u7a7a\u5217\u8868\u3002\u8be5\u56fe\u4ec5\u4ec5\u53ea\u6709\u4e00\u4e2a\u503c\u4e3a 1 \u7684\u8282\u70b9\uff0c\u5b83\u6ca1\u6709\u4efb\u4f55\u90bb\u5c45\u3002\n\n\u8f93\u5165\uff1aadjList = []\n\u8f93\u51fa\uff1a[]\n\u89e3\u91ca\uff1a\u8fd9\u4e2a\u56fe\u662f\u7a7a\u7684\uff0c\u5b83\u4e0d\u542b\u4efb\u4f55\u8282\u70b9\u3002\n\n\u8f93\u5165\uff1aadjList = [[2],[1]]\n\u8f93\u51fa\uff1a[[2],[1]]\n\n")),(0,r.kt)("p",null,"\u63d0\u793a\uff1a"),(0,r.kt)("p",null,"\u8282\u70b9\u6570\u4e0d\u8d85\u8fc7 100 \u3002\n\u6bcf\u4e2a\u8282\u70b9\u503c Node.val \u90fd\u662f\u552f\u4e00\u7684\uff0c1 <= Node.val <= 100\u3002\n\u65e0\u5411\u56fe\u662f\u4e00\u4e2a\u7b80\u5355\u56fe\uff0c\u8fd9\u610f\u5473\u7740\u56fe\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\uff0c\u4e5f\u6ca1\u6709\u81ea\u73af\u3002\n\u7531\u4e8e\u56fe\u662f\u65e0\u5411\u7684\uff0c\u5982\u679c\u8282\u70b9 p \u662f\u8282\u70b9 q \u7684\u90bb\u5c45\uff0c\u90a3\u4e48\u8282\u70b9 q \u4e5f\u5fc5\u987b\u662f\u8282\u70b9 p \u7684\u90bb\u5c45\u3002\n\u56fe\u662f\u8fde\u901a\u56fe\uff0c\u4f60\u53ef\u4ee5\u4ece\u7ed9\u5b9a\u8282\u70b9\u8bbf\u95ee\u5230\u6240\u6709\u8282\u70b9\u3002"),(0,r.kt)("h2",{id:"\u65b9\u6cd5\u4e00dfs"},"\u65b9\u6cd5\u4e00\uff1adfs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    unordered_map<int, Node*> visited;\n\n    Node* dfs(Node* node) {\n        if (node == nullptr) return nullptr;\n        if (visited.count(node->val)) return visited[node->val];\n\n        Node* copyNode = new Node(node->val);\n        visited[node->val] = copyNode;\n        for (Node* nextNode : node->neighbors) {\n            copyNode->neighbors.push_back(dfs(nextNode));\n        }\n        return copyNode;\n    }\n\n    Node* cloneGraph(Node* node) {\n        return dfs(node);\n        ;\n    }\n};\n")),(0,r.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8656.04%\u7684\u7528\u6237"),(0,r.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a15.4 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8631.73%\u7684\u7528\u6237"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'"""\n# Definition for a Node.\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n"""\n\nclass Solution:\n    def cloneGraph(self, node: \'Node\') -> \'Node\':\n        \n        def dfs(node):\n            if not node: return None\n            if node in visited: return visited[node]            \n\n            clone = Node(node.val)\n            visited[node] = clone\n            for n_node in node.neighbors:\n                clone.neighbors.append(dfs(n_node))\n\n            return clone\n        \n        visited = {}\n        return dfs(node)\n')),(0,r.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a0 ms, \u5728\u6240\u6709 Go \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237"),(0,r.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a2.9 MB, \u5728\u6240\u6709 Go \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8676.75%\u7684\u7528\u6237"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Neighbors []*Node\n * }\n */\n\nfunc cloneGraph(node *Node) *Node {\n    visited := map[*Node]*Node{}\n\n    var dfs func(node *Node) *Node\n    dfs = func(node *Node) *Node {\n        if node == nil {\n            return nil\n        }\n        if _, ok := visited[node]; ok {\n            return visited[node]\n        }\n        clone := &Node{node.Val, []*Node{}}\n        visited[node] = clone\n        for _, n_node := range node.Neighbors {\n            visited[node].Neighbors = append(visited[node].Neighbors, dfs(n_node))\n        }\n        return clone\n    }\n\n    return dfs(node)\n}\n")),(0,r.kt)("h2",{id:"\u65b9\u6cd5\u4e8cbfs"},"\u65b9\u6cd5\u4e8c\uff1abfs"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u91cd\u5efa\u56fe\u548c\u904d\u5386\u56fe\u4e0d\u4e00\u6837\u7684\u5730\u65b9"),"\uff1a"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u9700\u8981\u7528 visited \u4fdd\u5b58 \u539f\u56fe\u4e2d\u7684\u8282\u70b9 \u548c \u514b\u9686\u56fe\u4e2d\u5bf9\u5e94\u7684\u8282\u70b9")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    Node* cloneGraph(Node* node) {\n        if (node == nullptr) return nullptr;\n\n        queue<Node*> que;\n        que.push(node);\n        Node* copyRoot = new Node(node->val);\n        // key:\u539f\u56fe\u4e2d\u7684\u8282\u70b9 val:\u514b\u9686\u56fe\u4e2d\u5bf9\u5e94\u7684\u8282\u70b9\n        unordered_map<Node*, Node*> visited = {{node, copyRoot}};\n\n        while (!que.empty()) {\n            Node* cur = que.front();\n            que.pop();\n            for (Node* nextNode : cur->neighbors) {\n                if (visited.count(nextNode) == 0) {\n                    que.push(nextNode);\n                    visited[nextNode] = new Node(nextNode->val);\n                }\n                visited[cur]->neighbors.push_back(visited[nextNode]);\n            }\n        }\n        return copyRoot;\n    }\n};\n\n")),(0,r.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8656.04%\u7684\u7528\u6237"),(0,r.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a15.4 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8646.98%\u7684\u7528\u6237"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'"""\n# Definition for a Node.\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n"""\n\nclass Solution:\n    def cloneGraph(self, node: \'Node\') -> \'Node\':\n        if not node: return None\n        clone = Node(node.val)\n        queue = [node]\n        visited = {node: clone} # key:\u539f\u56fe\u4e2d\u7684\u8282\u70b9 val:\u514b\u9686\u56fe\u4e2d\u5bf9\u5e94\u7684\u8282\u70b9\n\n        while queue:\n            node = queue.pop(0)\n            for n_node in node.neighbors:\n                if n_node not in visited:\n                    queue.append(n_node)\n                    visited[n_node] = Node(n_node.val) # \u53ea\u6709\u6ca1\u6765\u8fc7\u7684\u70b9\u9700\u8981\u521d\u59cb\u5316\u4e0b\n                # \u5c06\u5f53\u524d\u8282\u70b9\u5728\u514b\u9686\u56fe\u4e2d\u5bf9\u5e94\u7684\u8282\u70b9 \u7684 \u76f8\u90bb\u70b9 \u6dfb\u52a0\u4e0a\n                visited[node].neighbors.append(visited[n_node])\n        return clone\n')),(0,r.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a0 ms, \u5728\u6240\u6709 Go \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237"),(0,r.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a2.9 MB, \u5728\u6240\u6709 Go \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8635.06%\u7684\u7528\u6237"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Neighbors []*Node\n * }\n */\n\nfunc cloneGraph(node *Node) *Node {\n    if node == nil {\n        return nil\n    }\n    clone := Node{node.Val, []*Node{}}\n    queue := []*Node{node}\n    visited := map[*Node]*Node{}\n    visited[node] = &clone\n\n    for len(queue) > 0 {\n        node := queue[0]\n        queue = queue[1:]\n        for _, n_node := range node.Neighbors {\n            if _, ok := visited[n_node]; !ok {\n                queue = append(queue, n_node)\n                visited[n_node] = &Node{n_node.Val, []*Node{}}\n            }\n            visited[node].Neighbors = append(visited[node].Neighbors, visited[n_node])\n        }\n    }\n\n    return &clone\n}\n")))}u.isMDXComponent=!0}}]);