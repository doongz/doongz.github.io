"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[89834],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,p=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),s=c(t),d=o,f=s["".concat(p,".").concat(d)]||s[d]||m[d]||l;return t?r.createElement(f,i(i({ref:n},u),{},{components:t})):r.createElement(f,i({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,i=new Array(l);i[0]=d;var a={};for(var p in n)hasOwnProperty.call(n,p)&&(a[p]=n[p]);a.originalType=e,a[s]="string"==typeof e?e:o,i[1]=a;for(var c=2;c<l;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},51212:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>s,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var r=t(87462),o=(t(67294),t(3905));const l={},i=void 0,a={unversionedId:"Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6392\u5e8f/<\u6392\u5e8f\u4ea4\u6362\u6b21\u6570>-\u9010\u5c42\u6392\u5e8f\u4e8c\u53c9\u6811\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u76ee",id:"Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6392\u5e8f/<\u6392\u5e8f\u4ea4\u6362\u6b21\u6570>-\u9010\u5c42\u6392\u5e8f\u4e8c\u53c9\u6811\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u76ee",title:"<\u6392\u5e8f\u4ea4\u6362\u6b21\u6570>-\u9010\u5c42\u6392\u5e8f\u4e8c\u53c9\u6811\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u76ee",description:"2471. \u9010\u5c42\u6392\u5e8f\u4e8c\u53c9\u6811\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u76ee",source:"@site/docs/Algorithm/2-\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6392\u5e8f/2471-<\u6392\u5e8f\u4ea4\u6362\u6b21\u6570>-\u9010\u5c42\u6392\u5e8f\u4e8c\u53c9\u6811\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u76ee.md",sourceDirName:"Algorithm/2-\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6392\u5e8f",slug:"/Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6392\u5e8f/<\u6392\u5e8f\u4ea4\u6362\u6b21\u6570>-\u9010\u5c42\u6392\u5e8f\u4e8c\u53c9\u6811\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u76ee",permalink:"/docs/Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6392\u5e8f/<\u6392\u5e8f\u4ea4\u6362\u6b21\u6570>-\u9010\u5c42\u6392\u5e8f\u4e8c\u53c9\u6811\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u76ee",draft:!1,tags:[],version:"current",sidebarPosition:2471,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<\u81ea\u5b9a\u4e49\u6392\u5e8f>-\u88c1\u526a\u6570\u5b57\u540e\u67e5\u8be2\u7b2cK\u5c0f\u7684\u6570\u5b57",permalink:"/docs/Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6392\u5e8f/<\u81ea\u5b9a\u4e49\u6392\u5e8f>-\u88c1\u526a\u6570\u5b57\u540e\u67e5\u8be2\u7b2cK\u5c0f\u7684\u6570\u5b57"},next:{title:"\u5251\u6307Offer-45-\u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570",permalink:"/docs/Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4f8b\u9898-\u6392\u5e8f/\u5251\u6307Offer-45-\u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570"}},p={},c=[{value:"2471. \u9010\u5c42\u6392\u5e8f\u4e8c\u53c9\u6811\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u76ee",id:"2471-\u9010\u5c42\u6392\u5e8f\u4e8c\u53c9\u6811\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u76ee",level:4},{value:"\u6570\u7ec4\u53d8\u6210\u6709\u5e8f\u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570",id:"\u6570\u7ec4\u53d8\u6210\u6709\u5e8f\u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570",level:2}],u={toc:c};function s(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"2471-\u9010\u5c42\u6392\u5e8f\u4e8c\u53c9\u6811\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u76ee"},(0,o.kt)("a",{parentName:"h4",href:"https://leetcode.cn/problems/minimum-number-of-operations-to-sort-a-binary-tree-by-level/"},"2471. \u9010\u5c42\u6392\u5e8f\u4e8c\u53c9\u6811\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u76ee")),(0,o.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a ",(0,o.kt)("strong",{parentName:"p"},"\u503c\u4e92\u4e0d\u76f8\u540c")," \u7684\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," \u3002"),(0,o.kt)("p",null,"\u5728\u4e00\u6b65\u64cd\u4f5c\u4e2d\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9 ",(0,o.kt)("strong",{parentName:"p"},"\u540c\u4e00\u5c42")," \u4e0a\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\uff0c\u4ea4\u6362\u8fd9\u4e24\u4e2a\u8282\u70b9\u7684\u503c\u3002"),(0,o.kt)("p",null,"\u8fd4\u56de\u6bcf\u4e00\u5c42\u6309 ",(0,o.kt)("strong",{parentName:"p"},"\u4e25\u683c\u9012\u589e\u987a\u5e8f")," \u6392\u5e8f\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u76ee\u3002"),(0,o.kt)("p",null,"\u8282\u70b9\u7684 ",(0,o.kt)("strong",{parentName:"p"},"\u5c42\u6570")," \u662f\u8be5\u8282\u70b9\u548c\u6839\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u7684\u8fb9\u6570\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1 \uff1a")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/09/18/image-20220918174006-2.png",alt:"img"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1aroot = [1,4,3,7,6,8,5,null,null,null,null,9,null,10]\n\u8f93\u51fa\uff1a3\n\u89e3\u91ca\uff1a\n- \u4ea4\u6362 4 \u548c 3 \u3002\u7b2c 2 \u5c42\u53d8\u4e3a [3,4] \u3002\n- \u4ea4\u6362 7 \u548c 5 \u3002\u7b2c 3 \u5c42\u53d8\u4e3a [5,6,8,7] \u3002\n- \u4ea4\u6362 8 \u548c 7 \u3002\u7b2c 3 \u5c42\u53d8\u4e3a [5,6,7,8] \u3002\n\u5171\u8ba1\u7528\u4e86 3 \u6b65\u64cd\u4f5c\uff0c\u6240\u4ee5\u8fd4\u56de 3 \u3002\n\u53ef\u4ee5\u8bc1\u660e 3 \u662f\u9700\u8981\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u76ee\u3002\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 2 \uff1a")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/09/18/image-20220918174026-3.png",alt:"img"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1aroot = [1,3,2,7,6,5,4]\n\u8f93\u51fa\uff1a3\n\u89e3\u91ca\uff1a\n- \u4ea4\u6362 3 \u548c 2 \u3002\u7b2c 2 \u5c42\u53d8\u4e3a [2,3] \u3002 \n- \u4ea4\u6362 7 \u548c 4 \u3002\u7b2c 3 \u5c42\u53d8\u4e3a [4,6,5,7] \u3002 \n- \u4ea4\u6362 6 \u548c 5 \u3002\u7b2c 3 \u5c42\u53d8\u4e3a [4,5,6,7] \u3002\n\u5171\u8ba1\u7528\u4e86 3 \u6b65\u64cd\u4f5c\uff0c\u6240\u4ee5\u8fd4\u56de 3 \u3002 \n\u53ef\u4ee5\u8bc1\u660e 3 \u662f\u9700\u8981\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u76ee\u3002\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 3 \uff1a")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/09/18/image-20220918174052-4.png",alt:"img"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1aroot = [1,2,3,4,5,6]\n\u8f93\u51fa\uff1a0\n\u89e3\u91ca\uff1a\u6bcf\u4e00\u5c42\u5df2\u7ecf\u6309\u9012\u589e\u987a\u5e8f\u6392\u5e8f\uff0c\u6240\u4ee5\u8fd4\u56de 0 \u3002\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u63d0\u793a\uff1a")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u6811\u4e2d\u8282\u70b9\u7684\u6570\u76ee\u5728\u8303\u56f4 ",(0,o.kt)("inlineCode",{parentName:"li"},"[1, 105]")," \u3002"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= Node.val <= 105")),(0,o.kt)("li",{parentName:"ul"},"\u6811\u4e2d\u7684\u6240\u6709\u503c ",(0,o.kt)("strong",{parentName:"li"},"\u4e92\u4e0d\u76f8\u540c")," \u3002")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"\u6570\u7ec4\u53d8\u6210\u6709\u5e8f\u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570"},"\u6570\u7ec4\u53d8\u6210\u6709\u5e8f\u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570"),(0,o.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,o.kt)("inlineCode",{parentName:"p"},"O(nlogn)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c++"},'/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int getMinSwaps(vector<int>& arr) {\n        int n = arr.size();\n\n        vector<pair<int, int>> vec(n);\n        for (int i = 0; i < n; ++i) {\n            vec[i].first = arr[i];\n            vec[i].second = i;\n        }\n\n        sort(vec.begin(), vec.end());\n        int cnt = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (vec[i].second == i) {\n                continue;\n            }\n            swap(vec[i].first, vec[vec[i].second].first);\n            swap(vec[i].second, vec[vec[i].second].second);\n            if (i != vec[i].second) {\n                --i;\n            }\n            ++cnt;\n        }\n        return cnt;\n    }\n\n    int minimumOperations(TreeNode* root) {\n        int cnt = 0;\n\n        deque<TreeNode*> que = {root};\n\n        while (!que.empty()) {\n            int layer_sz = que.size();\n            vector<int> layer_val;\n\n            for (int i = 0; i < layer_sz; i++) {\n                TreeNode* cur = que.front();\n                que.pop_front();\n                layer_val.push_back(cur->val);\n\n                if (cur->left) que.push_back(cur->left);\n                if (cur->right) que.push_back(cur->right);\n            }\n            // for (int a : layer_val) cout << a << " ";\n            // cout << " : ";\n            int b = getMinSwaps(layer_val);\n            // cout << b << endl;\n            cnt += b;\n        }\n\n        return cnt;\n    }\n};\n')))}s.isMDXComponent=!0}}]);