"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[44411],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),d=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=d(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(t),m=i,f=u["".concat(p,".").concat(m)]||u[m]||c[m]||o;return t?r.createElement(f,a(a({ref:n},s),{},{components:t})):r.createElement(f,a({ref:n},s))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[u]="string"==typeof e?e:i,a[1]=l;for(var d=2;d<o;d++)a[d]=t[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},45391:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=t(87462),i=(t(67294),t(3905));const o={},a=void 0,l={unversionedId:"Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u70b9\u503c\u548c\u8fb9\u7ec4\u6210\u4e00\u4e2anode>-\u989c\u8272\u4ea4\u66ff\u7684\u6700\u77ed\u8def\u5f84",id:"Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u70b9\u503c\u548c\u8fb9\u7ec4\u6210\u4e00\u4e2anode>-\u989c\u8272\u4ea4\u66ff\u7684\u6700\u77ed\u8def\u5f84",title:"<\u70b9\u503c\u548c\u8fb9\u7ec4\u6210\u4e00\u4e2anode>-\u989c\u8272\u4ea4\u66ff\u7684\u6700\u77ed\u8def\u5f84",description:"1129. \u989c\u8272\u4ea4\u66ff\u7684\u6700\u77ed\u8def\u5f84",source:"@site/docs/Algorithm/4-\u56fe\u8bba/\u4f8b\u9898-BFS/1129-<\u70b9\u503c\u548c\u8fb9\u7ec4\u6210\u4e00\u4e2anode>-\u989c\u8272\u4ea4\u66ff\u7684\u6700\u77ed\u8def\u5f84.md",sourceDirName:"Algorithm/4-\u56fe\u8bba/\u4f8b\u9898-BFS",slug:"/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u70b9\u503c\u548c\u8fb9\u7ec4\u6210\u4e00\u4e2anode>-\u989c\u8272\u4ea4\u66ff\u7684\u6700\u77ed\u8def\u5f84",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u70b9\u503c\u548c\u8fb9\u7ec4\u6210\u4e00\u4e2anode>-\u989c\u8272\u4ea4\u66ff\u7684\u6700\u77ed\u8def\u5f84",draft:!1,tags:[],version:"current",sidebarPosition:1129,frontMatter:{},sidebar:"algorithmSidebar",previous:{title:"<bfs\u6a21\u7248\u9898>-\u8fb9\u754c\u7740\u8272",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<bfs\u6a21\u7248\u9898>-\u8fb9\u754c\u7740\u8272"},next:{title:"<\u591a\u6e90bfs>-\u5730\u56fe\u5206\u6790",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u591a\u6e90bfs>-\u5730\u56fe\u5206\u6790"}},p={},d=[{value:"1129. \u989c\u8272\u4ea4\u66ff\u7684\u6700\u77ed\u8def\u5f84",id:"1129-\u989c\u8272\u4ea4\u66ff\u7684\u6700\u77ed\u8def\u5f84",level:4}],s={toc:d};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"1129-\u989c\u8272\u4ea4\u66ff\u7684\u6700\u77ed\u8def\u5f84"},(0,i.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/shortest-path-with-alternating-colors/"},"1129. \u989c\u8272\u4ea4\u66ff\u7684\u6700\u77ed\u8def\u5f84")),(0,i.kt)("p",null,"\u5728\u4e00\u4e2a\u6709\u5411\u56fe\u4e2d\uff0c\u8282\u70b9\u5206\u522b\u6807\u8bb0\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"0, 1, ..., n-1"),"\u3002\u56fe\u4e2d\u6bcf\u6761\u8fb9\u4e3a\u7ea2\u8272\u6216\u8005\u84dd\u8272\uff0c\u4e14\u5b58\u5728\u81ea\u73af\u6216\u5e73\u884c\u8fb9\u3002"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"red_edges")," \u4e2d\u7684\u6bcf\u4e00\u4e2a ",(0,i.kt)("inlineCode",{parentName:"p"},"[i, j]")," \u5bf9\u8868\u793a\u4ece\u8282\u70b9 ",(0,i.kt)("inlineCode",{parentName:"p"},"i")," \u5230\u8282\u70b9 ",(0,i.kt)("inlineCode",{parentName:"p"},"j")," \u7684\u7ea2\u8272\u6709\u5411\u8fb9\u3002\u7c7b\u4f3c\u5730\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"blue_edges")," \u4e2d\u7684\u6bcf\u4e00\u4e2a ",(0,i.kt)("inlineCode",{parentName:"p"},"[i, j]")," \u5bf9\u8868\u793a\u4ece\u8282\u70b9 ",(0,i.kt)("inlineCode",{parentName:"p"},"i")," \u5230\u8282\u70b9 ",(0,i.kt)("inlineCode",{parentName:"p"},"j")," \u7684\u84dd\u8272\u6709\u5411\u8fb9\u3002"),(0,i.kt)("p",null,"\u8fd4\u56de\u957f\u5ea6\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," \u7684\u6570\u7ec4 ",(0,i.kt)("inlineCode",{parentName:"p"},"answer"),"\uff0c\u5176\u4e2d ",(0,i.kt)("inlineCode",{parentName:"p"},"answer[X]")," \u662f\u4ece\u8282\u70b9 ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," \u5230\u8282\u70b9 ",(0,i.kt)("inlineCode",{parentName:"p"},"X")," \u7684\u7ea2\u8272\u8fb9\u548c\u84dd\u8272\u8fb9\u4ea4\u66ff\u51fa\u73b0\u7684\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8def\u5f84\uff0c\u90a3\u4e48 ",(0,i.kt)("inlineCode",{parentName:"p"},"answer[x] = -1"),"\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u793a\u4f8b 1\uff1a\n\n\u8f93\u5165\uff1an = 3, red_edges = [[0,1],[1,2]], blue_edges = []\n\u8f93\u51fa\uff1a[0,1,-1]\n\n\u793a\u4f8b 2\uff1a\n\n\u8f93\u5165\uff1an = 3, red_edges = [[0,1]], blue_edges = [[2,1]]\n\u8f93\u51fa\uff1a[0,1,-1]\n\n\u793a\u4f8b 3\uff1a\n\n\u8f93\u5165\uff1an = 3, red_edges = [[1,0]], blue_edges = [[2,1]]\n\u8f93\u51fa\uff1a[0,-1,-1]\n\n\u793a\u4f8b 4\uff1a\n\n\u8f93\u5165\uff1an = 3, red_edges = [[0,1]], blue_edges = [[1,2]]\n\u8f93\u51fa\uff1a[0,1,2]\n\n\u793a\u4f8b 5\uff1a\n\n\u8f93\u5165\uff1an = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]]\n\u8f93\u51fa\uff1a[0,1,1]\n\n")),(0,i.kt)("p",null,"\u63d0\u793a\uff1a"),(0,i.kt)("p",null,"1 <= n <= 100\nred_edges.length <= 400\nblue_edges.length <= 400\nred_edges","[i]",".length == blue_edges","[i]",".length == 2\n",(0,i.kt)("inlineCode",{parentName:"p"},"0 <= red_edges[i][j], blue_edges[i][j] < n")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"\u9996\u5148\u6211\u4eec\u5148\u770b\u6570\u636e\u5927\u5c0f 1 <= n <= 100\uff0c",(0,i.kt)("strong",{parentName:"p"},"\u5c0f\u4e8e100\u53ef\u4ee5\u653e\u5fc3\u5927\u80c6\u7528\u4e0d\u7528\u7279\u6b8a\u4f18\u5316\u7684bfs\u4e86")),(0,i.kt)("p",null,"\u672c\u9898\u7684\u8003\u70b9\u662f\uff1a",(0,i.kt)("strong",{parentName:"p"},"\u7528\u8282\u70b9\u503c\u548c\u8282\u70b9\u4e0b\u4e00\u6761\u8fb9")," \u6765\u63cf\u8ff0\u4e00\u4e2a\u70b9\u7684\u6027\u8d28\uff0c\u8d70\u8fc7\u7684\u70b9\u8fdb\u5165visited\u96c6\u5408\u3002"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u5982\u679c\u4e0b\u6b21\u9047\u89c1\u4e86\u76f8\u540c\u7684\u8282\u70b9\u503c\uff0c\u800c\u4e14\u8282\u70b9",(0,i.kt)("strong",{parentName:"p"},"\u4e0b\u4e00\u6761\u8fb9\u7684\u989c\u8272\u4e5f\u4e00\u6837\uff0c\u90a3\u4e48\u4f1a\u9677\u5165\u73af"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u5982\u679c\u4e0b\u6b21\u9047\u89c1\u4e86\u76f8\u540c\u7684\u8282\u70b9\u503c\uff0c\u4f46\u662f\u8282\u70b9",(0,i.kt)("strong",{parentName:"p"},"\u4e0b\u4e00\u6761\u8fb9\u7684\u989c\u8272\u4e0d\u4e00\u6837\uff0c\u4e0d\u4f1a\u9677\u5165\u73af"),"\uff0c\u800c\u4e14\u8fd8\u4f1a\u5f80\u66f4\u6df1\u5904\u8d70"))),(0,i.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a40 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8669.88%\u7684\u7528\u6237"),(0,i.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a15 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00%\u7684\u7528\u6237"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def shortestAlternatingPaths(self, n: int, redEdges: List[List[int]], blueEdges: List[List[int]]) -> List[int]:\n        # \u5148\u770b\u6570\u636e\u5927\u5c0f 1 <= n <= 100\uff0c\u5c0f\u4e8e100\u53ef\u4ee5\u653e\u5fc3\u5927\u80c6\u7528\u4e0d\u7528\u7279\u6b8a\u4f18\u5316\u7684bfs\u4e86\n        red_adj = collections.defaultdict(list)\n        blue_adj = collections.defaultdict(list)\n        for s, e in redEdges:\n            red_adj[s].append(e)\n        for s, e in blueEdges:\n            blue_adj[s].append(e)\n        \n        def func(edge):\n            res = [float(\"inf\") for _ in range(n)]\n            queue = [(0, 0, edge)] # (\u5f53\u524d\u8282\u70b9\uff0c\u957f\u5ea6\uff0c\u4e0b\u4e2a\u8fb9\u989c\u8272)\n            visited = set()\n            visited.add((0, edge)) # (\u5f53\u524d\u8282\u70b9\uff0c\u4e0b\u4e2a\u8fb9\u989c\u8272) \n            while queue:\n                cur, depth, color = queue.pop(0)\n                # \u8d70\u5230\u8fd9\u4e2a\u70b9\u7684\u957f\u5ea6\uff0c\u5c31\u662f\u6700\u77ed\u8ddd\u79bb\n                res[cur] = min(res[cur], depth)\n                if color == 'b':\n                    for n_node in blue_adj[cur]:\n                        if (n_node, 'r') not in visited:\n                            queue.append((n_node, depth+1, 'r'))\n                            visited.add((n_node, 'r'))\n                elif color == 'r':\n                    for n_node in red_adj[cur]:\n                        if (n_node, 'b') not in visited:\n                            queue.append((n_node, depth+1, 'b'))\n                            visited.add((n_node, 'b'))\n            # print(res)\n            return res\n\n        r_res = func(edge='r') # \u4e0b\u4e2a\u8fb9\u8d70\u7ea2\u8272\n        b_res = func(edge='b') # \u4e0b\u4e2a\u8fb9\u84dd\u8272\n        ans = []\n        for i in range(n):\n            tmp = min(r_res[i], b_res[i])\n            ans.append(-1 if tmp == float(\"inf\") else tmp)\n        return ans\n")))}u.isMDXComponent=!0}}]);