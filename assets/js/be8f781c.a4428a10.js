"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1648],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var a=r.createContext({}),p=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(a.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,a=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),d=l,f=u["".concat(a,".").concat(d)]||u[d]||m[d]||o;return t?r.createElement(f,i(i({ref:n},c),{},{components:t})):r.createElement(f,i({ref:n},c))}));function f(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var a in n)hasOwnProperty.call(n,a)&&(s[a]=n[a]);s.originalType=e,s[u]="string"==typeof e?e:l,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4088:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=t(87462),l=(t(67294),t(3905));const o={},i=void 0,s={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/<\u5c0f\u6839\u5806>-\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/<\u5c0f\u6839\u5806>-\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868",title:"<\u5c0f\u6839\u5806>-\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868",description:"23. \u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/23-<\u5c0f\u6839\u5806>-\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/<\u5c0f\u6839\u5806>-\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/<\u5c0f\u6839\u5806>-\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868",draft:!1,tags:[],version:"current",sidebarPosition:23,frontMatter:{},sidebar:"algorithmSidebar",previous:{title:"<\u5408\u5e76>-\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/<\u5408\u5e76>-\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868"},next:{title:"\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9"}},a={},p=[{value:"\u65b9\u6cd5\u4e00\uff1a\u5c0f\u6839\u5806\uff0c\u5168\u90e8\u5165\u5806",id:"\u65b9\u6cd5\u4e00\u5c0f\u6839\u5806\u5168\u90e8\u5165\u5806",level:2},{value:"\u65b9\u6cd5\u4e8c\uff1a\u5c0f\u6839\u5806\uff0c\u5b50\u94fe\u8868\u7684\u5934\u5165\u5806",id:"\u65b9\u6cd5\u4e8c\u5c0f\u6839\u5806\u5b50\u94fe\u8868\u7684\u5934\u5165\u5806",level:2}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/merge-k-sorted-lists/"},"23. \u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868")),(0,l.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u6570\u7ec4\uff0c\u6bcf\u4e2a\u94fe\u8868\u90fd\u5df2\u7ecf\u6309\u5347\u5e8f\u6392\u5217\u3002"),(0,l.kt)("p",null,"\u8bf7\u4f60\u5c06\u6240\u6709\u94fe\u8868\u5408\u5e76\u5230\u4e00\u4e2a\u5347\u5e8f\u94fe\u8868\u4e2d\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u94fe\u8868\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\u793a\u4f8b 1\uff1a\n\n\u8f93\u5165\uff1alists = [[1,4,5],[1,3,4],[2,6]]\n\u8f93\u51fa\uff1a[1,1,2,3,4,4,5,6]\n\u89e3\u91ca\uff1a\u94fe\u8868\u6570\u7ec4\u5982\u4e0b\uff1a\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\n\u5c06\u5b83\u4eec\u5408\u5e76\u5230\u4e00\u4e2a\u6709\u5e8f\u94fe\u8868\u4e2d\u5f97\u5230\u3002\n1->1->2->3->4->4->5->6\n\n\u793a\u4f8b 2\uff1a\n\n\u8f93\u5165\uff1alists = []\n\u8f93\u51fa\uff1a[]\n\n\u793a\u4f8b 3\uff1a\n\n\u8f93\u5165\uff1alists = [[]]\n\u8f93\u51fa\uff1a[]\n")),(0,l.kt)("p",null,"\u63d0\u793a\uff1a"),(0,l.kt)("p",null,"k == lists.length\n0 <= k <= 10^4\n0 <= lists","[i]",".length <= 500\n-10^4 <= lists","[i][j]"," <= 10^4\nlists","[i]"," \u6309 \u5347\u5e8f \u6392\u5217\nlists","[i]",".length \u7684\u603b\u548c\u4e0d\u8d85\u8fc7 10^4"),(0,l.kt)("h2",{id:"\u65b9\u6cd5\u4e00\u5c0f\u6839\u5806\u5168\u90e8\u5165\u5806"},"\u65b9\u6cd5\u4e00\uff1a\u5c0f\u6839\u5806\uff0c\u5168\u90e8\u5165\u5806"),(0,l.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,l.kt)("inlineCode",{parentName:"p"},"O(nklog(nk))")),(0,l.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,l.kt)("inlineCode",{parentName:"p"},"O(nk)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    ListNode *mergeKLists(vector<ListNode *> &lists) {\n        if (lists.size() == 0) return NULL;\n        // \u5c0f\u6839\u5806\n        priority_queue<int, vector<int>, greater<int>> smallQ;\n        for (ListNode *x : lists) {\n            while (x) {\n                smallQ.push(x->val);\n                x = x->next;\n            }\n        }\n\n        ListNode *dummy = new ListNode(0);\n        ListNode *cur = dummy;\n        while (!smallQ.empty()) {\n            int val = smallQ.top();\n            smallQ.pop();\n            cur->next = new ListNode(val);\n            cur = cur->next;\n        }\n        return dummy->next;\n    }\n};\n")),(0,l.kt)("h2",{id:"\u65b9\u6cd5\u4e8c\u5c0f\u6839\u5806\u5b50\u94fe\u8868\u7684\u5934\u5165\u5806"},"\u65b9\u6cd5\u4e8c\uff1a\u5c0f\u6839\u5806\uff0c\u5b50\u94fe\u8868\u7684\u5934\u5165\u5806"),(0,l.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,l.kt)("inlineCode",{parentName:"p"},"O(kn\xd7logk)")," \u8003\u8651\u4f18\u5148\u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e0d\u8d85\u8fc7 k \u4e2a\uff0c\u90a3\u4e48\u63d2\u5165\u548c\u5220\u9664\u7684\u65f6\u95f4\u4ee3\u4ef7\u4e3a O(logk)\uff0c\u6700\u591a\u6709 kn \u4e2a\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u90fd\u88ab\u63d2\u5165\u5220\u9664\u5404\u4e00\u6b21 "),(0,l.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,l.kt)("inlineCode",{parentName:"p"},"O(k)")," \u4f18\u5148\u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e0d\u8d85\u8fc7 k \u4e2a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    // \u91cd\u8f7d\u5c0f\u6839\u5806\u7684\u56de\u8c03\u51fd\u6570\n    struct cmp {\n        bool operator()(ListNode *a, ListNode *b) {\n            return a->val > b->val;\n        }\n    };\n\n    ListNode *mergeKLists(vector<ListNode *> &lists) {\n        if (lists.size() == 0) return NULL;\n\n        // \u5c0f\u6839\u5806\uff0c\u5143\u7d20\u4e3a\u6307\u9488\uff0c\u6700\u957f\u957f\u5ea6\u4e3a k\n        priority_queue<ListNode *, vector<ListNode *>, cmp> smallQ;\n        for (ListNode *x : lists) {\n            // \u4ec5\u6bcf\u4e2a\u5b50\u94fe\u8868\u7684\u5934 \u5165\u5806\n            if (x) smallQ.push(x);\n        }\n\n        ListNode *dummy = new ListNode(0);\n        ListNode *cur = dummy;\n        while (!smallQ.empty()) {\n            ListNode *t = smallQ.top();\n            smallQ.pop();\n            cur->next = t;\n\n            if (t->next) smallQ.push(t->next);\n            cur = cur->next;\n        }\n        return dummy->next;\n    }\n};\n")))}u.isMDXComponent=!0}}]);