"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[20974],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=r.createContext({}),u=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(o.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=u(t),d=i,f=c["".concat(o,".").concat(d)]||c[d]||m[d]||a;return t?r.createElement(f,p(p({ref:n},s),{},{components:t})):r.createElement(f,p({ref:n},s))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,p=new Array(a);p[0]=d;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l[c]="string"==typeof e?e:i,p[1]=l;for(var u=2;u<a;u++)p[u]=t[u];return r.createElement.apply(null,p)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},98831:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>p,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=t(87462),i=(t(67294),t(3905));const a={},p=void 0,l={unversionedId:"Algorithm/\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u5e8f\u5217DP/<LIS\u5e94\u7528>-\u6700\u5927\u6574\u9664\u5b50\u96c6",id:"Algorithm/\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u5e8f\u5217DP/<LIS\u5e94\u7528>-\u6700\u5927\u6574\u9664\u5b50\u96c6",title:"<LIS\u5e94\u7528>-\u6700\u5927\u6574\u9664\u5b50\u96c6",description:"\u9898\u76ee\uff1a368. \u6700\u5927\u6574\u9664\u5b50\u96c6",source:"@site/docs/Algorithm/3-\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u5e8f\u5217DP/368-<LIS\u5e94\u7528>-\u6700\u5927\u6574\u9664\u5b50\u96c6.md",sourceDirName:"Algorithm/3-\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u5e8f\u5217DP",slug:"/Algorithm/\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u5e8f\u5217DP/<LIS\u5e94\u7528>-\u6700\u5927\u6574\u9664\u5b50\u96c6",permalink:"/docs/Algorithm/\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u5e8f\u5217DP/<LIS\u5e94\u7528>-\u6700\u5927\u6574\u9664\u5b50\u96c6",draft:!1,tags:[],version:"current",sidebarPosition:368,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<\u4e8c\u7ef4LIS-\u6811\u72b6\u6570\u7ec4>-\u4fc4\u7f57\u65af\u5957\u5a03\u4fe1\u5c01\u95ee\u9898",permalink:"/docs/Algorithm/\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u5e8f\u5217DP/<\u4e8c\u7ef4LIS-\u6811\u72b6\u6570\u7ec4>-\u4fc4\u7f57\u65af\u5957\u5a03\u4fe1\u5c01\u95ee\u9898"},next:{title:"<LCS>-\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5220\u9664\u64cd\u4f5c",permalink:"/docs/Algorithm/\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u5e8f\u5217DP/<LCS>-\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5220\u9664\u64cd\u4f5c"}},o={},u=[{value:"\u65b9\u6cd5\uff1a\u52a8\u6001\u89c4\u5212",id:"\u65b9\u6cd5\u52a8\u6001\u89c4\u5212",level:2}],s={toc:u};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"\u9898\u76ee\uff1a",(0,i.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/largest-divisible-subset/"},"368. \u6700\u5927\u6574\u9664\u5b50\u96c6")),(0,i.kt)("h2",{id:"\u65b9\u6cd5\u52a8\u6001\u89c4\u5212"},"\u65b9\u6cd5\uff1a\u52a8\u6001\u89c4\u5212"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/largest-divisible-subset/solution/gong-shui-san-xie-noxiang-xin-ke-xue-xi-0a3jc/"},"\u9898\u89e3\u6765\u6e90")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u601d\u8def"),"\uff1a"),(0,i.kt)("p",null,"\u5bf9 nums \u6392\u597d\u5e8f\u5e76\u4ece\u524d\u5f80\u540e\u5904\u7406"),(0,i.kt)("p",null,"\u5728\u5904\u7406\u5230 nums","[i]"," \u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u77e5\u9053\u4f4d\u7f6e i \u4e4b\u524d\u7684\u4e0b\u6807\u5df2\u7ecf\u5f62\u6210\u7684\u300c\u6574\u9664\u5b50\u96c6\u300d\u957f\u5ea6\u662f\u591a\u5c11\uff0c\u7136\u540e\u4ece\u4e2d\u9009\u4e00\u4e2a\u6700\u957f\u7684\u300c\u6574\u9664\u5b50\u96c6\u300d\uff0c\u5c06 nums","[i]"," \u63a5\u5728\u540e\u9762\uff08\u524d\u63d0\u662f\u7b26\u5408\u300c\u500d\u6570\u5173\u7cfb\u300d)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u5b9a\u4e49\u72b6\u6001"),"\uff1a"),(0,i.kt)("p",null,"dp","[i]"," \u8868\u793a\uff0c\u4ee5 nums","[i]"," \u7ed3\u5c3e\u7684\u6700\u957f\u6574\u9664\u5b50\u96c6\uff0cdp","[i]"," \u5b58\u50a8\u8fd9\u4e2a\u5b50\u96c6\u7684\u957f\u5ea6"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b"),"\uff1a\n$$\ndp","[i]"," = max","{","dp","[j]"," + 1...","}"," \\quad nums","[i]","\\%nums","[j]","=0 \\quad j\\in[0,i)\n$$\n",(0,i.kt)("strong",{parentName:"p"},"\u521d\u59cb\u5316"),"\uff1a"),(0,i.kt)("p",null,"dp\u6570\u7ec4\u7684\u6bcf\u4e00\u4f4d\u90fd\u662f 1\uff0c\u5b50\u96c6\u957f\u5ea6\u6700\u77ed\u662f\u81ea\u8eab"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u8fd4\u56de"),"\uff1a"),(0,i.kt)("p",null,"dp \u6570\u7ec4\u5b58\u50a8\u4e86\u4ee5 i \u7ed3\u5c3e\u7684\u6700\u957f\u5b50\u5e8f\u5217\u7684\u53ef\u80fd\uff0c\u56e0\u6b64\u9700\u8981\u904d\u5386\u627e\u5230\u91cc\u9762\u6700\u5927\u7684\u503c\uff08\u957f\u5ea6\uff09\u5bf9\u5e94\u7684\u4e0b\u6807"),(0,i.kt)("p",null,"\u901a\u8fc7 path \u6570\u7ec4\uff0c\u6062\u590d\u4e00\u8def\u8fc7\u6765\u7ecf\u8fc7\u7684\u503c"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"path \u6570\u7ec4"),"\uff1a"),(0,i.kt)("p",null,"\u6c42",(0,i.kt)("strong",{parentName:"p"},"\u6700\u4f18\u7ed3\u679c\u5bf9\u5e94\u7684\u5177\u4f53\u7ed3\u679c"),"\u7684\u9898\u76ee\uff0c",(0,i.kt)("strong",{parentName:"p"},"\u591a\u5f00\u4e00\u4e2a\u6570\u7ec4"),"\u6765\u8bb0\u5f55\u72b6\u6001\u4ece\u4f55\u8f6c\u79fb\u800c\u6765\u662f\u6700\u5e38\u89c1\u7684\u624b\u6bb5\u3002"),(0,i.kt)("p",null,"\u8bb0\u5f55\u7684\u65b9\u5f0f\u662f\uff0c\u5f53\u6ee1\u8db3\u6761\u4ef6\u65f6\uff0cpath","[i]"," = pre_idx"),(0,i.kt)("p",null,"\u5f53\u6211\u4eec\u6c42\u5f97\u6240\u6709\u7684\u72b6\u6001\u503c\u4e4b\u540e\uff0c\u53ef\u4ee5\u5bf9 dp \u6570\u7ec4\u8fdb\u884c\u904d\u5386\uff0c\u53d6\u5f97\u5177\u4f53\u7684\u6700\u957f\u300c\u6574\u9664\u5b50\u96c6\u300d\u957f\u5ea6\u548c\u5bf9\u5e94\u4e0b\u6807\uff0c\u7136\u540e\u4f7f\u7528 path \u6570\u7ec4\u8fdb\u884c\u56de\u6eaf\uff0c\u53d6\u5f97\u7b54\u6848\u3002"),(0,i.kt)("p",null,"\u56de\u6eaf\u7684\u4e24\u79cd\u65b9\u5f0f\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5f53\u7b54\u6848\u7684\u957f\u5ea6 \u7b49\u4e8e \u6700\u5927\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u65f6"),(0,i.kt)("li",{parentName:"ul"},"\u89c2\u5bdf\u5934\u8282\u70b9\u7684\u7279\u5f81 ","[0,0,1]","\uff0cpath","[i]"," = i\uff0c\u6700\u540e\u8bb0\u5f97\u628a\u5934\u8282\u70b9\u4e5f\u653e\u5165\u7b54\u6848")),(0,i.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},"O(n^2)")),(0,i.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},"O(n)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    vector<int> largestDivisibleSubset(vector<int>& nums) {\n        // \u4ee5 nums[i] \u7ed3\u5c3e\u7684\u6700\u957f\u6574\u9664\u5b50\u96c6\uff0cdp[i] \u5b58\u50a8\u8fd9\u4e2a\u5b50\u96c6\u7684\u957f\u5ea6\n        sort(nums.begin(), nums.end());\n        int n = nums.size();\n        vector<int> dp(n, 1);  // \u9ed8\u8ba4\u662f 1\uff0c\u5b50\u96c6\u957f\u5ea6\u6700\u77ed\u662f\u81ea\u8eab\n        vector<int> path(n);   // \u8bb0\u5f55\u8def\u5f84\n        // \u6bcf\u5f53\u6709\u65b0\u7684\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u4ed6\u4e0e\u524d\u9762\u7684\u6bcf\u4e00\u4e2a\u6570\uff08\u6bcf\u4e00\u4e2a\u6700\u957f\u5b50\u5e8f\u5217\u7684\u7ed3\u5c3e\uff09\u6bd4\u8f83\n        for (int i = 1; i < n; i++) {\n            int max_len = 1;\n            int pre_idx = i;\n            for (int j = 0; j < i; j++) {\n                if (nums[i] % nums[j] == 0) {\n                    if (dp[j] + 1 > max_len) {\n                        max_len = dp[j] + 1;\n                        pre_idx = j;\n                    }\n                }\n            }\n            dp[i] = max_len;\n            path[i] = pre_idx;\n        }\n\n        int max_idx = max_element(dp.begin(), dp.end()) - dp.begin();\n\n        vector<int> ans;\n        while (path[max_idx] != max_idx) {\n            ans.push_back(nums[max_idx]);\n            max_idx = path[max_idx];\n        }\n        ans.push_back(nums[max_idx]);\n\n        return ans;\n    }\n};\n")))}c.isMDXComponent=!0}}]);