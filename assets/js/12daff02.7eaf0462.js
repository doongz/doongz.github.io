"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[85993],{3905:(n,e,r)=>{r.d(e,{Zo:()=>f,kt:()=>b});var t=r(67294);function o(n,e,r){return e in n?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n}function a(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,t)}return r}function i(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?a(Object(r),!0).forEach((function(e){o(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function l(n,e){if(null==n)return{};var r,t,o=function(n,e){if(null==n)return{};var r,t,o={},a=Object.keys(n);for(t=0;t<a.length;t++)r=a[t],e.indexOf(r)>=0||(o[r]=n[r]);return o}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(t=0;t<a.length;t++)r=a[t],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(o[r]=n[r])}return o}var s=t.createContext({}),c=function(n){var e=t.useContext(s),r=e;return n&&(r="function"==typeof n?n(e):i(i({},e),n)),r},f=function(n){var e=c(n.components);return t.createElement(s.Provider,{value:e},n.children)},d="mdxType",p={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},u=t.forwardRef((function(n,e){var r=n.components,o=n.mdxType,a=n.originalType,s=n.parentName,f=l(n,["components","mdxType","originalType","parentName"]),d=c(r),u=o,b=d["".concat(s,".").concat(u)]||d[u]||p[u]||a;return r?t.createElement(b,i(i({ref:e},f),{},{components:r})):t.createElement(b,i({ref:e},f))}));function b(n,e){var r=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var a=r.length,i=new Array(a);i[0]=u;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l[d]="string"==typeof n?n:o,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},72749:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var t=r(87462),o=(r(67294),r(3905));const a={},i=void 0,l={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5e76\u67e5\u96c6/<\u5e76\u67e5\u96c6-bfs>-\u88ab\u56f4\u7ed5\u7684\u533a\u57df",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5e76\u67e5\u96c6/<\u5e76\u67e5\u96c6-bfs>-\u88ab\u56f4\u7ed5\u7684\u533a\u57df",title:"<\u5e76\u67e5\u96c6-bfs>-\u88ab\u56f4\u7ed5\u7684\u533a\u57df",description:"\u9898\u76ee\uff1a130. \u88ab\u56f4\u7ed5\u7684\u533a\u57df",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5e76\u67e5\u96c6/130-<\u5e76\u67e5\u96c6-bfs>-\u88ab\u56f4\u7ed5\u7684\u533a\u57df.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5e76\u67e5\u96c6",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5e76\u67e5\u96c6/<\u5e76\u67e5\u96c6-bfs>-\u88ab\u56f4\u7ed5\u7684\u533a\u57df",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5e76\u67e5\u96c6/<\u5e76\u67e5\u96c6-bfs>-\u88ab\u56f4\u7ed5\u7684\u533a\u57df",draft:!1,tags:[],version:"current",sidebarPosition:130,frontMatter:{},sidebar:"algorithmSidebar",previous:{title:"<\u5e73\u8861\u6811-\u61d2\u5220\u9664\u5806>-\u8bbe\u8ba1\u98df\u7269\u8bc4\u5206\u7cfb\u7edf",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5e73\u8861\u6811\u5e94\u7528/<\u5e73\u8861\u6811-\u61d2\u5220\u9664\u5806>-\u8bbe\u8ba1\u98df\u7269\u8bc4\u5206\u7cfb\u7edf"},next:{title:"<\u5e76\u67e5\u96c6-bfs-dfs>-\u5c9b\u5c7f\u6570\u91cf",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5e76\u67e5\u96c6/<\u5e76\u67e5\u96c6-bfs-dfs>-\u5c9b\u5c7f\u6570\u91cf"}},s={},c=[{value:"\u65b9\u6cd5\u4e00\uff1a\u5e76\u67e5\u96c6",id:"\u65b9\u6cd5\u4e00\u5e76\u67e5\u96c6",level:2},{value:"\u65b9\u6cd5\u4e8c\uff1abfs",id:"\u65b9\u6cd5\u4e8cbfs",level:2}],f={toc:c};function d(n){let{components:e,...a}=n;return(0,o.kt)("wrapper",(0,t.Z)({},f,a,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u9898\u76ee\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/surrounded-regions/"},"130. \u88ab\u56f4\u7ed5\u7684\u533a\u57df")),(0,o.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a ",(0,o.kt)("inlineCode",{parentName:"p"},"m x n")," \u7684\u77e9\u9635 ",(0,o.kt)("inlineCode",{parentName:"p"},"board")," \uff0c\u7531\u82e5\u5e72\u5b57\u7b26 ",(0,o.kt)("inlineCode",{parentName:"p"},"'X'")," \u548c ",(0,o.kt)("inlineCode",{parentName:"p"},"'O'")," \uff0c\u627e\u5230\u6240\u6709\u88ab ",(0,o.kt)("inlineCode",{parentName:"p"},"'X'")," \u56f4\u7ed5\u7684\u533a\u57df\uff0c\u5e76\u5c06\u8fd9\u4e9b\u533a\u57df\u91cc\u6240\u6709\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"'O'")," \u7528 ",(0,o.kt)("inlineCode",{parentName:"p"},"'X'")," \u586b\u5145\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1\uff1a")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"img",src:r(32357).Z,width:"773",height:"333"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'\u8f93\u5165\uff1aboard = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]\n\u8f93\u51fa\uff1a[["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]\n\u89e3\u91ca\uff1a\u88ab\u56f4\u7ed5\u7684\u533a\u95f4\u4e0d\u4f1a\u5b58\u5728\u4e8e\u8fb9\u754c\u4e0a\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u4efb\u4f55\u8fb9\u754c\u4e0a\u7684\xa0\'O\'\xa0\u90fd\u4e0d\u4f1a\u88ab\u586b\u5145\u4e3a\xa0\'X\'\u3002 \u4efb\u4f55\u4e0d\u5728\u8fb9\u754c\u4e0a\uff0c\u6216\u4e0d\u4e0e\u8fb9\u754c\u4e0a\u7684\xa0\'O\'\xa0\u76f8\u8fde\u7684\xa0\'O\'\xa0\u6700\u7ec8\u90fd\u4f1a\u88ab\u586b\u5145\u4e3a\xa0\'X\'\u3002\u5982\u679c\u4e24\u4e2a\u5143\u7d20\u5728\u6c34\u5e73\u6216\u5782\u76f4\u65b9\u5411\u76f8\u90bb\uff0c\u5219\u79f0\u5b83\u4eec\u662f\u201c\u76f8\u8fde\u201d\u7684\u3002\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 2\uff1a")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'\u8f93\u5165\uff1aboard = [["X"]]\n\u8f93\u51fa\uff1a[["X"]]\n')),(0,o.kt)("p",null,"\u63d0\u793a\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"m == board.length"),(0,o.kt)("li",{parentName:"ul"},"n == board","[i]",".length"),(0,o.kt)("li",{parentName:"ul"},"1 <= m, n <= 200"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"board[i][j]")," \u4e3a 'X' \u6216 'O'")),(0,o.kt)("h2",{id:"\u65b9\u6cd5\u4e00\u5e76\u67e5\u96c6"},"\u65b9\u6cd5\u4e00\uff1a\u5e76\u67e5\u96c6"),(0,o.kt)("p",null,"\u5c06\u6240\u6709\u8fb9\u754c\u4e0a\u7684 O \u770b\u505a\u4e00\u4e2a\u8fde\u901a\u533a\u57df\uff08\u5373\u4fbf\u7269\u7406\u4e0a\u5e76\u6ca1\u6709\u7d27\u6328\u5728\u4e00\u8d77\uff09"),(0,o.kt)("p",null,"\u9047\u5230 O \u5c31\u6267\u884c\u5e76\u67e5\u96c6\u5408\u5e76\u64cd\u4f5c\uff0c\u8fd9\u6837\u6240\u6709\u7684 O \u5c31\u4f1a\u88ab\u5206\u6210\u4e24\u7c7b"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u548c\u8fb9\u754c\u4e0a\u7684 O \u5728\u4e00\u4e2a\u8fde\u901a\u533a\u57df\u5185\u7684\uff0c\u8fd9\u4e9b O \u6211\u4eec\u4fdd\u7559\u3002")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u4e0d\u548c\u8fb9\u754c\u4e0a\u7684 O \u5728\u4e00\u4e2a\u8fde\u901a\u533a\u57df\u5185\u7684\uff0c\u8fd9\u4e9b O \u5c31\u662f\u88ab\u5305\u56f4\u7684\uff0c\u66ff\u6362\u4e3a X"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u6ce8\u610f"),"\uff1a\u7531\u4e8e\u5e76\u67e5\u96c6\u4e00\u822c\u7528\u4e00\u7ef4\u6570\u7ec4\u6765\u8bb0\u5f55\uff0c\u65b9\u4fbf\u67e5\u627e parants\uff0c\u6240\u4ee5\u5c06\u4e8c\u7ef4\u5750\u6807\u7528 node \u51fd\u6570\u8f6c\u5316\u4e3a\u4e00\u7ef4\u5750\u6807\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class UnionFind:\n    def __init__(self, n):\n        self.count = n\n        self.parent = [i for i in range(n)] # \u521d\u59cb\u5316\u8282\u70b9i\u7684\u7236\u8282\u70b9\u4e3ai\n        self.rank = [0] * n\n\n    def find(self, i):\n        # \u9012\u5f52\u67e5\u627e\u6839\u8282\u70b9\uff0c\u5982\u679c\u8282\u70b9i\u7684\u7236\u8282\u70b9\u4e3a\u672c\u8eab\u5c31\u627e\u5230\u4e86\u6839\uff0c\u7ed3\u675f\u9012\u5f52\n        if self.parent[i] != i:\n            self.parent[i] = self.find(self.parent[i])\n        return self.parent[i]\n\n    def union(self, x, y):\n        # \u5408\u5e76\u4e24\u4e2a\u8282\u70b9\n        rootx = self.find(x)\n        rooty = self.find(y)\n        if rootx != rooty:\n            if self.rank[rootx] < self.rank[rooty]:\n                rootx, rooty = rooty, rootx\n            self.parent[rooty] = rootx\n            if self.rank[rootx] == self.rank[rooty]:\n                self.rank[rootx] += 1\n            self.count -= 1\n\n    def is_connected(self, x, y):\n        # \u5224\u65ad\u4e24\u4e2a\u8282\u70b9\u662f\u5426\u8fde\u901a\n        return self.find(x) == self.find(y)\n\n    def disconnected(self, x):\n        # \u65ad\u5f00\u8282\u70b9\u4e0e\u4ed6\u7236\u4eb2\u7684\u8fde\u63a5\n        self.parent[x] = x\n        self.rank[x] = 0\n\n\nclass Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        """\n        Do not return anything, modify board in-place instead.\n        """\n        if not board or not board[0]: return\n\n        rows = len(board)\n        cols = len(board[0])\n        uf = UnionFind(rows * cols + 1) # \u591a\u4e00\u4e2a\u5b58\u653e\u5047\u8282\u70b9\n        node = lambda r, c : r * cols + c\n        dummy = rows * cols # \u865a\u5047\u8282\u70b9\u653e\u5728\u7b2crows*cols\u4e2a\u4f4d\u7f6e\u4e0a\uff0c\u8fde\u7740\u56db\u5468O\u7684\u70b9\u90fd\u4f1a\u4e0e\u5047\u8282\u70b9\u8054\u901a\n        for r in range(rows):\n            for c in range(cols):\n                if board[r][c] == "O":\n                    if r == 0 or r == rows - 1 or c == 0 or c == cols - 1:\n                        # \u5982\u679c\u662fO\uff0c\u4e14\u5728\u56db\u8fb9\u4e0a\uff0c\u4e0e\u5047\u8282\u70b9\u8054\u901a\n                        uf.union(node(r, c), dummy)\n                    else:\n                        # \u5982\u679c\u662fO\uff0c\u4e14\u91cc\u9762\uff0c\u770b\u4e0b\u56db\u5468\u7684\u70b9\u82e5\u662fO\uff0c\u5c06\u56db\u5468\u7684O\u70b9\u4e0e\u8be5\u70b9\u5e76\u5728\u4e00\u8d77\n                        # \u6b64\u65f6\u5b58\u5728\u4e24\u4e2a\u8054\u901a\u5206\u91cf\n                        # \u6240\u6709\u4e0e\u56db\u8fb9\u4e3aO\u7684\u70b9\u90fd\u8054\u901a\u5728\u4e00\u8d77\uff0c\u800c\u5185\u90e8\u7684O\u7684\u70b9\u8054\u901a\u5728\u4e00\u8d77\n                        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                            nr = r + dr\n                            nc = c + dc\n                            if board[nr][nc] == "O":\n                                uf.union(node(r, c), node(nr, nc))\n        for r in range(rows):\n            for c in range(cols):\n                # \u627e\u5230\u5185\u90e8\u7684\u8054\u901a\u5206\u91cf\uff0c\u6807\u8bb0\u4e3aX\n                if board[r][c] == "O":\n                    if uf.find(node(r, c)) != uf.find(dummy):\n                        # \u5982\u679c\u8be5\u70b9\u4e0d\u4e0e\u5047\u8282\u70b9\u8054\u901a\uff0c\u5c31\u6807\u8bb0\u4e3aX\n                        board[r][c] = "X"\n')),(0,o.kt)("h2",{id:"\u65b9\u6cd5\u4e8cbfs"},"\u65b9\u6cd5\u4e8c\uff1abfs"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u4ece\u56db\u5468\u4e3a O \u7684\u70b9\u4f20\u67d3\uff0c\u6807\u8bb0\u4e3a B"),(0,o.kt)("li",{parentName:"ul"},"board\u904d\u5386\u4e00\u904d\uff0c\u5c06\u6ca1\u4f20\u67d3\u8fc7\u7684 O \u6807\u8bb0\u4e3a X"),(0,o.kt)("li",{parentName:"ul"},"board\u904d\u5386\u4e00\u904d\uff0c\u5c06\u6807\u8bb0\u4e3a B \u7684\u70b9\uff0c\u6062\u590d\u6210 O")),(0,o.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,o.kt)("inlineCode",{parentName:"p"},"O(n^3)")," n\u662f\u884c\u6216\u5217\u6570"),(0,o.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,o.kt)("inlineCode",{parentName:"p"},"O(n^2)")),(0,o.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a44 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8667.03%\u7684\u7528\u6237"),(0,o.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a18.2 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8695.11%\u7684\u7528\u6237"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        """\n        Do not return anything, modify board in-place instead.\n        """\n        rows = len(board)\n        cols = len(board[0])\n        # O(n^2)\n        def bfs(row, col):\n            queue = [(row, col)]\n            visited = {(row, col)}\n            while queue:\n                r, c = queue.pop(0)\n                board[r][c] = "B"\n                for dr, dc in ((1,0), (0,1), (-1,0), (0,-1)):\n                    nr = r + dr\n                    nc = c + dc\n                    if 0<=nr<rows and 0<=nc<cols and board[nr][nc]=="O" and (nr, nc) not in visited:\n                        queue.append((nr, nc))\n                        visited.add((nr, nc))\n        # O(n^3) \u4ece\u56db\u5468\u5f00\u59cb\u4f20\u67d3\n        for r in range(rows):\n            if board[r][0] == "O": bfs(r, 0)\n            if board[r][cols-1] == "O": bfs(r, cols-1)\n        for c in range(cols):\n            if board[0][c] == "O": bfs(0, c)\n            if board[rows-1][c] == "O": bfs(rows-1, c)\n        # O(n^2) \u628a\u4f20\u67d3\u7684\u6539\u6210O\uff0c\u6ca1\u6709\u4f20\u67d3\u7684\u5c31\u662f\u88ab\u56f4\u7684\u533a\u57df\n        for r in range(rows):\n            for c in range(cols):\n                if board[r][c] == "B":\n                    board[r][c] = "O"\n                elif board[r][c] == "O":\n                    board[r][c] = "X"\n')),(0,o.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a16 ms, \u5728\u6240\u6709 Go \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8696.09%\u7684\u7528\u6237"),(0,o.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a6.4 MB, \u5728\u6240\u6709 Go \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8630.35%\u7684\u7528\u6237"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'func solve(board [][]byte) {\n    // fmt.Println([]byte("X")) // 88\n    // fmt.Println([]byte("O")) // 79\n    // fmt.Println([]byte("B")) // 66\n    direction := [4][2]int{[2]int{1, 0}, [2]int{0, 1}, [2]int{-1, 0}, [2]int{0, -1}}\n    rows := len(board)\n    cols := len(board[0])\n    bfs := func(row int, col int) {\n        queue := [][2]int{[2]int{row, col}}\n        visited := map[[2]int]int{[2]int{row, col}: 0}\n        for len(queue) > 0 {\n            r := queue[0][0]\n            c := queue[0][1]\n            queue = queue[1:]\n            board[r][c] = 66\n            for _, d := range direction {\n                nr := r + d[0]\n                nc := c + d[1]\n                if nr >= 0 && nr < rows && nc >= 0 && nc < cols {\n                    if board[nr][nc] == 79 {\n                        if _, ok := visited[[2]int{nr, nc}]; !ok {\n                            queue = append(queue, [2]int{nr, nc})\n                            visited[[2]int{nr, nc}] = 0\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // O(n^3) \u4ece\u56db\u5468\u5f00\u59cb\u4f20\u67d3\n    for r := 0; r < rows; r++ {\n        if board[r][0] == 79 {\n            bfs(r, 0)\n        }\n        if board[r][cols-1] == 79 {\n            bfs(r, cols-1)\n        }\n    }\n    for c := 0; c < cols; c++ {\n        if board[0][c] == 79 {\n            bfs(0, c)\n        }\n        if board[rows-1][c] == 79 {\n            bfs(rows-1, c)\n        }\n    }\n    // O(n^2) \u628a\u4f20\u67d3\u7684\u6539\u6210O\uff0c\u6ca1\u6709\u4f20\u67d3\u7684\u5c31\u662f\u88ab\u56f4\u7684\u533a\u57df\n    for r := 0; r < rows; r++ {\n        for c := 0; c < cols; c++ {\n            if board[r][c] == 66 {\n                board[r][c] = 79\n            } else if board[r][c] == 79 {\n                board[r][c] = 88\n            }\n        }\n    }\n}\n')))}d.isMDXComponent=!0},32357:(n,e,r)=>{r.d(e,{Z:()=>t});const t=r.p+"assets/images/xogrid-e7ad84521c86f28fd79f6168bd25b304.jpg"}}]);