"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3479],{3905:(r,n,e)=>{e.d(n,{Zo:()=>c,kt:()=>f});var t=e(67294);function i(r,n,e){return n in r?Object.defineProperty(r,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):r[n]=e,r}function a(r,n){var e=Object.keys(r);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(r);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(r,n).enumerable}))),e.push.apply(e,t)}return e}function o(r){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?a(Object(e),!0).forEach((function(n){i(r,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(e)):a(Object(e)).forEach((function(n){Object.defineProperty(r,n,Object.getOwnPropertyDescriptor(e,n))}))}return r}function s(r,n){if(null==r)return{};var e,t,i=function(r,n){if(null==r)return{};var e,t,i={},a=Object.keys(r);for(t=0;t<a.length;t++)e=a[t],n.indexOf(e)>=0||(i[e]=r[e]);return i}(r,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(r);for(t=0;t<a.length;t++)e=a[t],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(r,e)&&(i[e]=r[e])}return i}var l=t.createContext({}),u=function(r){var n=t.useContext(l),e=n;return r&&(e="function"==typeof r?r(n):o(o({},n),r)),e},c=function(r){var n=u(r.components);return t.createElement(l.Provider,{value:n},r.children)},p="mdxType",m={inlineCode:"code",wrapper:function(r){var n=r.children;return t.createElement(t.Fragment,{},n)}},k=t.forwardRef((function(r,n){var e=r.components,i=r.mdxType,a=r.originalType,l=r.parentName,c=s(r,["components","mdxType","originalType","parentName"]),p=u(e),k=i,f=p["".concat(l,".").concat(k)]||p[k]||m[k]||a;return e?t.createElement(f,o(o({ref:n},c),{},{components:e})):t.createElement(f,o({ref:n},c))}));function f(r,n){var e=arguments,i=n&&n.mdxType;if("string"==typeof r||i){var a=e.length,o=new Array(a);o[0]=k;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=r,s[p]="string"==typeof r?r:i,o[1]=s;for(var u=2;u<a;u++)o[u]=e[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,e)}k.displayName="MDXCreateElement"},84683:(r,n,e)=>{e.r(n),e.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var t=e(87462),i=(e(67294),e(3905));const a={},o=void 0,s={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6808/<\u79fb\u9664\u95ee\u9898+\u5355\u8c03\u6808+\u5206\u6cbb>-\u62fc\u63a5\u6700\u5927\u6570",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6808/<\u79fb\u9664\u95ee\u9898+\u5355\u8c03\u6808+\u5206\u6cbb>-\u62fc\u63a5\u6700\u5927\u6570",title:"<\u79fb\u9664\u95ee\u9898+\u5355\u8c03\u6808+\u5206\u6cbb>-\u62fc\u63a5\u6700\u5927\u6570",description:"321. \u62fc\u63a5\u6700\u5927\u6570",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6808/321-<\u79fb\u9664\u95ee\u9898+\u5355\u8c03\u6808+\u5206\u6cbb>-\u62fc\u63a5\u6700\u5927\u6570.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6808",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6808/<\u79fb\u9664\u95ee\u9898+\u5355\u8c03\u6808+\u5206\u6cbb>-\u62fc\u63a5\u6700\u5927\u6570",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6808/<\u79fb\u9664\u95ee\u9898+\u5355\u8c03\u6808+\u5206\u6cbb>-\u62fc\u63a5\u6700\u5927\u6570",draft:!1,tags:[],version:"current",sidebarPosition:321,frontMatter:{},sidebar:"algorithmSidebar",previous:{title:"<\u79fb\u9664\u95ee\u9898+\u5355\u8c03\u6808>-\u53bb\u9664\u91cd\u590d\u5b57\u6bcd",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6808/<\u79fb\u9664\u95ee\u9898+\u5355\u8c03\u6808>-\u53bb\u9664\u91cd\u590d\u5b57\u6bcd"},next:{title:"<\u79fb\u9664\u95ee\u9898+\u5355\u8c03\u6808>-\u79fb\u6389K\u4f4d\u6570\u5b57",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6808/<\u79fb\u9664\u95ee\u9898+\u5355\u8c03\u6808>-\u79fb\u6389K\u4f4d\u6570\u5b57"}},l={},u=[{value:"\u65b9\u6cd5\uff1a\u5355\u8c03\u6808+\u5206\u6cbb",id:"\u65b9\u6cd5\u5355\u8c03\u6808\u5206\u6cbb",level:2}],c={toc:u};function p(r){let{components:n,...e}=r;return(0,i.kt)("wrapper",(0,t.Z)({},c,e,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/create-maximum-number/"},"321. \u62fc\u63a5\u6700\u5927\u6570")),(0,i.kt)("p",null,"\u7ed9\u5b9a\u957f\u5ea6\u5206\u522b\u4e3a m \u548c n \u7684\u4e24\u4e2a\u6570\u7ec4\uff0c\u5176\u5143\u7d20\u7531 0-9 \u6784\u6210\uff0c\u8868\u793a\u4e24\u4e2a\u81ea\u7136\u6570\u5404\u4f4d\u4e0a\u7684\u6570\u5b57\u3002\u73b0\u5728\u4ece\u8fd9\u4e24\u4e2a\u6570\u7ec4\u4e2d\u9009\u51fa k (k <= m + n) \u4e2a\u6570\u5b57\u62fc\u63a5\u6210\u4e00\u4e2a\u65b0\u7684\u6570\uff0c\u8981\u6c42\u4ece\u540c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u53d6\u51fa\u7684\u6570\u5b57\u4fdd\u6301\u5176\u5728\u539f\u6570\u7ec4\u4e2d\u7684\u76f8\u5bf9\u987a\u5e8f\u3002"),(0,i.kt)("p",null,"\u6c42\u6ee1\u8db3\u8be5\u6761\u4ef6\u7684\u6700\u5927\u6570\u3002\u7ed3\u679c\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u8be5\u6700\u5927\u6570\u7684\u957f\u5ea6\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"k")," \u7684\u6570\u7ec4\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u8bf4\u660e:")," \u8bf7\u5c3d\u53ef\u80fd\u5730\u4f18\u5316\u4f60\u7b97\u6cd5\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u793a\u4f8b\xa01:\n\n\u8f93\u5165:\nnums1 = [3, 4, 6, 5]\nnums2 = [9, 1, 2, 5, 8, 3]\nk = 5\n\u8f93\u51fa:\n[9, 8, 6, 5, 3]\n\n\u793a\u4f8b 2:\n\n\u8f93\u5165:\nnums1 = [6, 7]\nnums2 = [6, 0, 4]\nk = 5\n\u8f93\u51fa:\n[6, 7, 6, 0, 4]\n\n\u793a\u4f8b 3:\n\n\u8f93\u5165:\nnums1 = [3, 9]\nnums2 = [8, 9]\nk = 3\n\u8f93\u51fa:\n[9, 8, 9]\n\n")),(0,i.kt)("h2",{id:"\u65b9\u6cd5\u5355\u8c03\u6808\u5206\u6cbb"},"\u65b9\u6cd5\uff1a\u5355\u8c03\u6808+\u5206\u6cbb"),(0,i.kt)("p",null,"\u6838\u5fc3\u601d\u8def\u4e0e 402 \u9898\u4e00\u6837\uff0c\u4f7f\u7528\u5355\u8c03\u6808\u83b7\u53d6\u6700\u5927\u6570\u5b57\u3002"),(0,i.kt)("p",null,"\u4e0d\u4e00\u6837\u7684\u662f\uff0c402\u9898\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u4e14\u8981\u79fb\u9664\u7684\u6b21\u6570\u786e\u5b9a\uff0c321\u9898\u662f\u300c\u4e24\u4e2a\u6570\u7ec4\u300d\uff0c\u79fb\u9664\u7684\u6b21\u6570\u300c\u4e0d\u786e\u5b9a\u300d"),(0,i.kt)("p",null,"\u56e0\u6b64\u6211\u4eec\u5c06\u95ee\u9898\u62c6\u5206\u300c\u5206\u6cbb\u300d"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u679a\u4e3e nums1 \u4e2d\u5f97\u51fa\u6570\u5b57\u7684\u957f\u5ea6 sz1 \u548c nums2 \u4e2d\u5f97\u51fa\u6570\u5b57\u7684\u957f\u5ea6 sz2 = k-sz1\uff08\u9700\u786e\u4fdd sz1 \u548c sz2 \u6709\u6548\uff09\uff0c\u89c1 ",(0,i.kt)("inlineCode",{parentName:"li"},"maxNumber")," \u51fd\u6570"),(0,i.kt)("li",{parentName:"ul"},"\u901a\u8fc7\u6307\u5b9a sz1\u3001sz2\uff0c\u5206\u522b\u4ece nums1\u3001nums2 \u5f97\u51fa\u7684\u6700\u5927\u6570\u5b57 arr1 \u548c arr2\uff0c\u89c1 ",(0,i.kt)("inlineCode",{parentName:"li"},"getMaxSubArr")," \u51fd\u6570"),(0,i.kt)("li",{parentName:"ul"},"\u5c06 arr1 \u548c arr2 \u5408\u5e76\uff0c\u89c1 ",(0,i.kt)("inlineCode",{parentName:"li"},"merge")," \u51fd\u6570\uff0c\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff1a",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u5f53\u524d\u6bd4\u8f83\u4f4d\u7f6e\u76f8\u7b49\u65f6\uff0c\u5f97\u5faa\u73af\u627e\u5230\u76f8\u5e94\u4f4d\u7f6e\u4e0d\u4e00\u6837\u7684\u8fdb\u884c\u6bd4\u8f83\uff0c\u89c1 ",(0,i.kt)("inlineCode",{parentName:"li"},"compare")," \u51fd\u6570"))),(0,i.kt)("li",{parentName:"ul"},"\u5408\u5e76\u540e\u7684\u6570\u5b57\u9700\u8981\u4e0e\u524d\u9762\u5f97\u51fa\u7684\u7b54\u6848\u8fdb\u884c\u6bd4\u8f83\uff0c\u4e0d\u65ad\u66f4\u65b0\u7b54\u6848\uff0c\u89c1 ",(0,i.kt)("inlineCode",{parentName:"li"},"getMaxArr")," \u51fd\u6570")),(0,i.kt)("p",null,"\u4f8b\u5982\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u8f93\u5165:\nnums1 = [3, 4, 6, 5]\nnums2 = [9, 1, 2, 5, 8, 3]\nk = 5\n\nsz1 = 0, sz2 = 5\u65f6\narr1 = []\narr2 = [9 2 5 8 3]\narr = [9 2 5 8 3]\n\nsz1 = 1, sz2 = 4\u65f6\narr1 = [6]\narr2 = [9 5 8 3]\narr = [9 6 5 8 3]\n\nsz1 = 2, sz2 = 3\u65f6\narr1 = [6 5]\narr2 = [9 8 3]\narr = [9 8 6 5 3]  \u6700\u5927\u7b54\u6848\n \nsz1 = 3, sz2 = 2\u65f6\narr1 = [4 6 5 ]\narr2 = [9 8]\narr = [9 8 4 6 5]\n \nsz1 = 4, sz2 = 1\u65f6\narr1 = [3 4 6 5]\narr2 = [9]\narr = [9 3 4 6 5]\n\nsz1 = 5, sz2 = 0\u65f6\nsz1 \u65e0\u6548\n")),(0,i.kt)("p",null,"\u5b9e\u9645\u5199\u7684\u65f6\u5019\uff0c\u7b97\u6cd5\u7684\u7ec6\u8282\u5f88\u591a\u7684\uff0c\u6536\u83b7\u540c\u6837\u5f88\u591a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'void print_vector(vector<int>& vec) {\n    for (auto n : vec) cout << n << " ";\n    cout << endl;\n}\n\nclass Solution {\npublic:\n    vector<int> getMaxSubArr(vector<int>& nums, int k) {\n        vector<int> stk;\n        int cnt = nums.size() - k;  // \u5220\u9664\u64cd\u4f5c\u6570\n        for (int dig : nums) {\n            while (cnt != 0 && !stk.empty() && dig > *stk.rbegin()) {\n                stk.pop_back();\n                cnt--;\n            }\n            stk.push_back(dig);\n        }\n        // \u5982\u679c\u904d\u5386\u7ed3\u675f\u540e\uff0c\u8fd8\u5269\u4e0b\u5220\u9664\u64cd\u4f5c\u6570 k!=0\n        while (cnt != 0) {\n            stk.pop_back();\n            cnt--;\n        }\n        return stk;\n    }\n    bool compare(vector<int>& arr1, int i1, vector<int>& arr2, int i2) {\n        // \u7c7b\u4f3c\u5b57\u5178\u5e8f\u5224\u65ad\n        while (i1 < arr1.size() && i2 < arr2.size() && arr1[i1] == arr2[i2]) {\n            i1++;\n            i2++;\n        }\n        // \u6b64\u65f6 i1 \u6216 i2 \u53ef\u80fd\u8d8a\u754c\uff0c\u8981\u5148\u5224\u65ad\u4e0b,\u6ca1\u8d8a\u754c\u7684\u90a3\u4e2a\u4e3a\u5927\n        if (i1 == arr1.size() && i2 == arr2.size()) {\n            return true;  // \u90fd\u8d8a\u754c\uff0c\u8bf4\u660e\u4e24\u8005\u76f8\u7b49\uff0c\u9ed8\u8ba4\u8fd4\u56de arr1\n        } else if (i1 == arr1.size()) {\n            return false;\n        } else if (i2 == arr2.size()) {\n            return true;\n        }\n        if (arr1[i1] > arr2[i2]) return true;\n        if (arr1[i1] < arr2[i2]) return false;\n        // \u5982\u679c\u7b49\u4e8e\uff0c\u8fd4\u56de arr1\uff0c\u5176\u5b9e\u4e0d\u4f1a\u8d70\u5230\u8fd9\u91cc\uff0c\u56e0\u4e3a\u76f8\u5f53\u4e8e\u90fd\u8d8a\u754c\u4e86\n        return true;\n    }\n    vector<int> merge(vector<int>& arr1, vector<int>& arr2) {\n        if (arr1.empty()) return arr2;\n        if (arr2.empty()) return arr1;\n        vector<int> arr;\n        int i1 = 0;\n        int i2 = 0;\n\n        while (true) {\n            if (arr1[i1] > arr2[i2]) {\n                arr.push_back(arr1[i1]);\n                i1++;\n            } else if (arr1[i1] < arr2[i2]) {\n                arr.push_back(arr2[i2]);\n                i2++;\n            } else if (arr1[i1] == arr2[i2]) {\n                // \u5f53\u524d\u6bd4\u8f83\u4f4d\u7f6e\u76f8\u7b49\u65f6\uff0c\u5f97\u5faa\u73af\u627e\u5230\u76f8\u5e94\u4f4d\u7f6e\u4e0d\u4e00\u6837\u7684\u8fdb\u884c\u6bd4\u8f83\n                // cout << "i1: " << i1 << " i2: " << i2 << endl;\n                if (compare(arr1, i1, arr2, i2)) {\n                    arr.push_back(arr1[i1]);\n                    i1++;\n                } else {\n                    arr.push_back(arr2[i2]);\n                    i2++;\n                }\n            }\n            if (i1 == arr1.size() || i2 == arr2.size()) break;\n        }\n\n        // \u6b64\u65f6\uff0carr1 \u6216 arr2 \u53ef\u80fd\u6709\u5269\u4f59\uff0c\u5b9e\u73b0\u4e0a\u4e0b\u9762\u4e24\u4e2awhile \u53ea\u8fdb\u5165\u4e00\u4e2a \u6216 \u4e24\u4e2a\u90fd\u4e0d\u8fdb\u5165\n        while (i1 < arr1.size()) {\n            arr.push_back(arr1[i1]);\n            i1++;\n        }\n        while (i2 < arr2.size()) {\n            arr.push_back(arr2[i2]);\n            i2++;\n        }\n        return arr;\n    }\n    vector<int> getMaxArr(vector<int>& arr1, vector<int>& arr2) {\n        int n = arr1.size();\n        for (int i = 0; i < n; i++) {\n            if (arr1[i] > arr2[i]) {\n                return arr1;\n            } else if (arr1[i] < arr2[i]) {\n                return arr2;\n            }\n        }\n        return arr1;\n    }\n    vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k) {\n        vector<int> ans(k, -1);\n        for (int sz1 = 0; sz1 <= k; sz1++) {\n            int sz2 = k - sz1;\n            // cout << sz1 << " " << sz2 << endl;\n            if (sz1 > nums1.size() || sz2 > nums2.size()) continue;\n\n            vector<int> arr1 = getMaxSubArr(nums1, sz1);\n            vector<int> arr2 = getMaxSubArr(nums2, sz2);\n            // print_vector(arr1);\n            // print_vector(arr2);\n            vector<int> arr = merge(arr1, arr2);\n            // print_vector(arr);\n            ans = getMaxArr(ans, arr);\n        }\n\n        return ans;\n    }\n};\n')))}p.isMDXComponent=!0}}]);