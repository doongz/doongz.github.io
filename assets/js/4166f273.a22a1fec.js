"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[46812],{3905:(n,t,e)=>{e.d(t,{Zo:()=>o,kt:()=>c});var l=e(67294);function i(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function a(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,l)}return e}function r(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?a(Object(e),!0).forEach((function(t){i(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):a(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function m(n,t){if(null==n)return{};var e,l,i=function(n,t){if(null==n)return{};var e,l,i={},a=Object.keys(n);for(l=0;l<a.length;l++)e=a[l],t.indexOf(e)>=0||(i[e]=n[e]);return i}(n,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(l=0;l<a.length;l++)e=a[l],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(i[e]=n[e])}return i}var u=l.createContext({}),p=function(n){var t=l.useContext(u),e=t;return n&&(e="function"==typeof n?n(t):r(r({},t),n)),e},o=function(n){var t=p(n.components);return l.createElement(u.Provider,{value:t},n.children)},s="mdxType",k={inlineCode:"code",wrapper:function(n){var t=n.children;return l.createElement(l.Fragment,{},t)}},d=l.forwardRef((function(n,t){var e=n.components,i=n.mdxType,a=n.originalType,u=n.parentName,o=m(n,["components","mdxType","originalType","parentName"]),s=p(e),d=i,c=s["".concat(u,".").concat(d)]||s[d]||k[d]||a;return e?l.createElement(c,r(r({ref:t},o),{},{components:e})):l.createElement(c,r({ref:t},o))}));function c(n,t){var e=arguments,i=t&&t.mdxType;if("string"==typeof n||i){var a=e.length,r=new Array(a);r[0]=d;var m={};for(var u in t)hasOwnProperty.call(t,u)&&(m[u]=t[u]);m.originalType=n,m[s]="string"==typeof n?n:i,r[1]=m;for(var p=2;p<a;p++)r[p]=e[p];return l.createElement.apply(null,r)}return l.createElement.apply(null,e)}d.displayName="MDXCreateElement"},12065:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>u,contentTitle:()=>r,default:()=>s,frontMatter:()=>a,metadata:()=>m,toc:()=>p});var l=e(87462),i=(e(67294),e(3905));const a={},r="\u6392\u5e8f\u7b97\u6cd5",m={unversionedId:"Algorithm/\u7b97\u6cd5\u57fa\u7840/\u6392\u5e8f",id:"Algorithm/\u7b97\u6cd5\u57fa\u7840/\u6392\u5e8f",title:"\u6392\u5e8f\u7b97\u6cd5",description:"\u53c2\u8003\uff1ahttps://oi-wiki.org/basic/radix-sort/",source:"@site/docs/Algorithm/2-\u7b97\u6cd5\u57fa\u7840/01-\u6392\u5e8f.md",sourceDirName:"Algorithm/2-\u7b97\u6cd5\u57fa\u7840",slug:"/Algorithm/\u7b97\u6cd5\u57fa\u7840/\u6392\u5e8f",permalink:"/docs/Algorithm/\u7b97\u6cd5\u57fa\u7840/\u6392\u5e8f",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"docsSidebar",previous:{title:"\u9762\u8bd5\u9898-03-04-\u5316\u6808\u4e3a\u961f",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u8bbe\u8ba1\u6570\u636e\u7ed3\u6784/\u9762\u8bd5\u9898-03-04-\u5316\u6808\u4e3a\u961f"},next:{title:"\u4e13\u9898 \u4e8c\u5206\u7b54\u6848",permalink:"/docs/Algorithm/\u7b97\u6cd5\u57fa\u7840/\u4e13\u9898-\u4e8c\u5206\u7b54\u6848"}},u={},p=[{value:"\u5e94\u7528",id:"\u5e94\u7528",level:2},{value:"1\u3001\u6392\u5e8f\u5e38\u4e0e\u300c\u8d2a\u5fc3\u300d\u300c\u4e8c\u5206\u6cd5\u300d\u7b49\u7b56\u7565\u7ed3\u5408",id:"1\u6392\u5e8f\u5e38\u4e0e\u8d2a\u5fc3\u4e8c\u5206\u6cd5\u7b49\u7b56\u7565\u7ed3\u5408",level:3},{value:"2\u3001\u5bf9\u6570\u7ec4\u6392\u5e8f\u7684\u6700\u5c0f\u6b21\u6570",id:"2\u5bf9\u6570\u7ec4\u6392\u5e8f\u7684\u6700\u5c0f\u6b21\u6570",level:3},{value:"\u4e00\u3001\u5185\u90e8\u6392\u5e8f",id:"\u4e00\u5185\u90e8\u6392\u5e8f",level:2},{value:"1\u3001\u9009\u62e9\u6392\u5e8f",id:"1\u9009\u62e9\u6392\u5e8f",level:3},{value:"2\u3001\u5192\u6ce1\u6392\u5e8f\uff1a",id:"2\u5192\u6ce1\u6392\u5e8f",level:3},{value:"3\u3001\u63d2\u5165\u6392\u5e8f",id:"3\u63d2\u5165\u6392\u5e8f",level:3},{value:"4\u3001\u8ba1\u6570\u6392\u5e8f",id:"4\u8ba1\u6570\u6392\u5e8f",level:3},{value:"5\u3001\u6876\u6392\u5e8f\uff08\u91cd\u8981\uff09",id:"5\u6876\u6392\u5e8f\u91cd\u8981",level:3},{value:"6\u3001\u5feb\u901f\u6392\u5e8f\uff08\u91cd\u8981\uff09",id:"6\u5feb\u901f\u6392\u5e8f\u91cd\u8981",level:3},{value:"7\u3001\u5f52\u5e76\u6392\u5e8f\uff08\u91cd\u8981\uff09",id:"7\u5f52\u5e76\u6392\u5e8f\u91cd\u8981",level:3},{value:"1\uff09\u6027\u8d28",id:"1\u6027\u8d28",level:4},{value:"2\uff09\u7b97\u6cd5\u601d\u8def",id:"2\u7b97\u6cd5\u601d\u8def",level:4},{value:"4\uff09\u4ee3\u7801\u5b9e\u73b0",id:"4\u4ee3\u7801\u5b9e\u73b0",level:4},{value:"5\uff09\u5e94\u7528\uff08\u4f8b\u9898\uff09",id:"5\u5e94\u7528\u4f8b\u9898",level:4},{value:"\u4e8c\u3001\u5916\u90e8\u6392\u5e8f",id:"\u4e8c\u5916\u90e8\u6392\u5e8f",level:2}],o={toc:p};function s(n){let{components:t,...a}=n;return(0,i.kt)("wrapper",(0,l.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u6392\u5e8f\u7b97\u6cd5"},"\u6392\u5e8f\u7b97\u6cd5"),(0,i.kt)("p",null,"\u53c2\u8003\uff1a",(0,i.kt)("a",{parentName:"p",href:"https://oi-wiki.org/basic/radix-sort/"},"https://oi-wiki.org/basic/radix-sort/")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"\u7b97\u6cd5"),(0,i.kt)("th",{parentName:"tr",align:null},"\u7a33\u5b9a\u6027"),(0,i.kt)("th",{parentName:"tr",align:null},"\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6"),(0,i.kt)("th",{parentName:"tr",align:null},"\u7a7a\u95f4\u590d\u6742\u5ea6"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\u9009\u62e9\u6392\u5e8f"),(0,i.kt)("td",{parentName:"tr",align:null},"\u4e0d\u7a33\u5b9a"),(0,i.kt)("td",{parentName:"tr",align:null},"O(n^2)"),(0,i.kt)("td",{parentName:"tr",align:null},"O(1)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\u5192\u6ce1\u6392\u5e8f"),(0,i.kt)("td",{parentName:"tr",align:null},"\u7a33\u5b9a"),(0,i.kt)("td",{parentName:"tr",align:null},"O(n^2)"),(0,i.kt)("td",{parentName:"tr",align:null},"O(1)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\u63d2\u5165\u6392\u5e8f"),(0,i.kt)("td",{parentName:"tr",align:null},"\u7a33\u5b9a"),(0,i.kt)("td",{parentName:"tr",align:null},"O(n^2)"),(0,i.kt)("td",{parentName:"tr",align:null},"O(1)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\u8ba1\u6570\u6392\u5e8f"),(0,i.kt)("td",{parentName:"tr",align:null},"\u7a33\u5b9a"),(0,i.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,i.kt)("td",{parentName:"tr",align:null},"O(n)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\u6876\u6392\u5e8f\uff08\u91cd\u8981\uff09"),(0,i.kt)("td",{parentName:"tr",align:null},"\u53d6\u51b3\u6876\u5185\u6392\u5e8f\u7b97\u6cd5"),(0,i.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,i.kt)("td",{parentName:"tr",align:null},"O(n)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\u5feb\u901f\u6392\u5e8f\uff08\u91cd\u8981\uff09"),(0,i.kt)("td",{parentName:"tr",align:null},"\u4e0d\u7a33\u5b9a"),(0,i.kt)("td",{parentName:"tr",align:null},"O(nlogn)"),(0,i.kt)("td",{parentName:"tr",align:null},"O(logn)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\u5f52\u5e76\u6392\u5e8f\uff08\u91cd\u8981\uff09"),(0,i.kt)("td",{parentName:"tr",align:null},"\u7a33\u5b9a"),(0,i.kt)("td",{parentName:"tr",align:null},"O(nlogn)"),(0,i.kt)("td",{parentName:"tr",align:null},"O(n)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\u57fa\u6570\u6392\u5e8f"),(0,i.kt)("td",{parentName:"tr",align:null},"\u7a33\u5b9a"),(0,i.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,i.kt)("td",{parentName:"tr",align:null},"O(n)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\u5e0c\u5c14\u6392\u5e8f"),(0,i.kt)("td",{parentName:"tr",align:null},"\u4e0d\u7a33\u5b9a"),(0,i.kt)("td",{parentName:"tr",align:null},"O(n^(3/2))"),(0,i.kt)("td",{parentName:"tr",align:null},"O(n)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\u5806\u6392\u5e8f"),(0,i.kt)("td",{parentName:"tr",align:null},"\u4e0d\u7a33\u5b9a"),(0,i.kt)("td",{parentName:"tr",align:null},"O(nlogn)"),(0,i.kt)("td",{parentName:"tr",align:null},"O(1)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\u9526\u6807\u8d5b\u6392\u5e8f"),(0,i.kt)("td",{parentName:"tr",align:null},"\u4e0d\u7a33\u5b9a"),(0,i.kt)("td",{parentName:"tr",align:null},"O(nlogn)"),(0,i.kt)("td",{parentName:"tr",align:null},"O(n)")))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.cnblogs.com/codingmylife/archive/2012/10/21/2732980.html"},"\u7a33\u5b9a\u6027"),"\uff1a\u4fdd\u8bc1\u6392\u5e8f\u524d2\u4e2a\u76f8\u7b49\u7684\u6570\u5176\u5728\u5e8f\u5217\u7684\u524d\u540e\u4f4d\u7f6e\u987a\u5e8f\u548c\u6392\u5e8f\u540e\u5b83\u4eec\u4e24\u4e2a\u7684\u524d\u540e\u4f4d\u7f6e\u987a\u5e8f\u76f8\u540c\u3002\u5982\u679cAi = Aj\uff0cAi\u539f\u6765\u5728\u4f4d\u7f6e\u524d\uff0c\u6392\u5e8f\u540eAi\u8fd8\u662f\u8981\u5728Aj\u4f4d\u7f6e\u524d"),(0,i.kt)("p",null,"\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7b97\u6cd5\u662f\u5426\u5177\u6709\u7a33\u5b9a\u6027\u5e76\u4e0d\u80fd\u8861\u91cf\u4e00\u4e2a\u7b97\u6cd5\u7684\u4f18\u52a3\uff0c\u5b83\u4e3b\u8981\u662f\u5bf9\u7b97\u6cd5\u7684\u6027\u8d28\u8fdb\u884c\u63cf\u8ff0\u3002\u5982\u679c\u5f85\u6392\u5e8f\u8868\u4e2d\u7684\u5173\u952e\u5b57\u4e0d\u5141\u8bb8\u91cd\u590d\uff0c\u5219\u6392\u5e8f\u7ed3\u679c\u662f\u552f\u4e00\u7684\uff0c\u90a3\u4e48\u9009\u62e9\u6392\u5e8f\u7b97\u6cd5\u65f6\u7684\u7a33\u5b9a\u4e0e\u5426\u5c31\u65e0\u5173\u7d27\u8981\u3002"),(0,i.kt)("p",null,"\u5728\u6392\u5e8f\u8fc7\u7a0b\u4e2d\uff0c\u6839\u636e\u6570\u636e\u5143\u7d20\u662f\u5426\u5b8c\u5168\u5728\u5185\u5b58\u4e2d\uff0c\u53ef\u5c06\u6392\u5e8f\u7b97\u6cd5\u5206\u4e3a\u4e24\u7c7b\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5185\u90e8\u6392\u5e8f\uff0c\u662f\u6307\u5728\u6392\u5e8f\u671f\u95f4\u5143\u7d20\u5168\u90e8\u5b58\u653e\u5728\u5185\u5b58\u4e2d\u7684\u6392\u5e8f"),(0,i.kt)("li",{parentName:"ul"},"\u5916\u90e8\u6392\u5e8f\uff0c\u662f\u6307\u5728\u6392\u5e8f\u671f\u95f4\u5143\u7d20\u65e0\u6cd5\u5168\u90e8\u540c\u65f6\u5b58\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u5fc5\u987b\u5728\u6392\u5e8f\u7684\u8fc7\u7a0b\u4e2d\u6839\u636e\u8981\u6c42\u4e0d\u65ad\u5730\u5728\u5185\u3001\u5916\u5b58\u4e4b\u95f4\u79fb\u52a8\u7684\u6392\u5e8f\u3002")),(0,i.kt)("p",null,"\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5185\u90e8\u6392\u5e8f\u7b97\u6cd5\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u90fd\u8981\u8fdb\u884c\u4e24\u79cd\u64cd\u4f5c\uff1a\u6bd4\u8f83\u548c\u79fb\u52a8\u3002\u901a\u8fc7\u6bd4\u8f83\u4e24\u4e2a\u5173\u952e\u5b57\u7684\u5927\u5c0f\uff0c\u786e\u5b9a\u5bf9\u5e94\u5143\u7d20\u7684\u524d\u540e\u5173\u7cfb\uff0c\u7136\u540e\u901a\u8fc7\u79fb\u52a8\u5143\u7d20\u4ee5\u8fbe\u5230\u6709\u5e8f\u3002\u5f53\u7136\uff0c\u5e76\u975e\u6240\u6709\u7684\u5185\u90e8\u6392\u5e8f\u7b97\u6cd5\u90fd\u8981\u57fa\u4e8e\u6bd4\u8f83\u64cd\u4f5c\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u57fa\u6570\u6392\u5e8f\u5c31\u4e0d\u57fa\u4e8e\u6bd4\u8f83\u3002"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"8-1",src:e(78702).Z,width:"2322",height:"1502"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"8-2",src:e(80894).Z,width:"2346",height:"1288"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"8-3",src:e(3782).Z,width:"2342",height:"836"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"8-4",src:e(72775).Z,width:"2384",height:"1428"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"8-5",src:e(42116).Z,width:"2342",height:"968"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"8-6",src:e(2081).Z,width:"2334",height:"1260"})),(0,i.kt)("h2",{id:"\u5e94\u7528"},"\u5e94\u7528"),(0,i.kt)("h3",{id:"1\u6392\u5e8f\u5e38\u4e0e\u8d2a\u5fc3\u4e8c\u5206\u6cd5\u7b49\u7b56\u7565\u7ed3\u5408"},"1\u3001\u6392\u5e8f\u5e38\u4e0e\u300c\u8d2a\u5fc3\u300d\u300c\u4e8c\u5206\u6cd5\u300d\u7b49\u7b56\u7565\u7ed3\u5408"),(0,i.kt)("p",null,"\u5148\u6392\u5e8f\u8fdb\u884c\u6570\u636e\u9884\u5904\u7406\uff0c\u518d\u8fdb\u884c\u7b97\u6cd5\u8ba1\u7b97"),(0,i.kt)("h3",{id:"2\u5bf9\u6570\u7ec4\u6392\u5e8f\u7684\u6700\u5c0f\u6b21\u6570"},"2\u3001\u5bf9\u6570\u7ec4\u6392\u5e8f\u7684\u6700\u5c0f\u6b21\u6570"),(0,i.kt)("p",null,"\u6570\u7ec4\u53d8\u6210\u6709\u5e8f\u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},'#include <algorithm>\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint getMinSwaps(vector<int>& arr) {\n    int n = arr.size();\n\n    vector<pair<int, int>> vec(n);\n    for (int i = 0; i < n; ++i) {\n        vec[i].first = arr[i];\n        vec[i].second = i;\n    }\n\n    sort(vec.begin(), vec.end());\n    int cnt = 0;\n\n    for (int i = 0; i < n; ++i) {\n        if (vec[i].second == i) {\n            continue;\n        }\n        swap(vec[i].first, vec[vec[i].second].first);\n        swap(vec[i].second, vec[vec[i].second].second);\n        if (i != vec[i].second) {\n            --i;\n        }\n        ++cnt;\n    }\n    return cnt;\n}\n\nint main() {\n    vector<int> arr = {3, 1, 2, 4};\n    int r = getMinSwaps(arr);\n    cout << "min swap cnt:" << r << endl;\n    // min swap cnt:2\n}\n')),(0,i.kt)("h2",{id:"\u4e00\u5185\u90e8\u6392\u5e8f"},"\u4e00\u3001\u5185\u90e8\u6392\u5e8f"),(0,i.kt)("h3",{id:"1\u9009\u62e9\u6392\u5e8f"},"1\u3001\u9009\u62e9\u6392\u5e8f"),(0,i.kt)("p",null,"\u57fa\u672c\u601d\u60f3\uff1a\u7b2c\u4e00\u6b21\u904d\u5386n-1\u4e2a\u6570\uff0c\u627e\u5230\u6700\u5c0f\u7684\u6570\u503c\u4e0e\u7b2c\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362"),(0,i.kt)("p",null,"\u7b2c\u4e8c\u6b21\u904d\u5386n-2\u4e2a\u6570\uff0c\u627e\u5230\u6700\u5c0f\u7684\u6570\u503c\u4e0e\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4ea4\u6362\u2026\u2026\u2026\u2026"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u7a33\u5b9a\u6027"),"\uff1a\u7531\u4e8e swap\uff08\u4ea4\u6362\u4e24\u4e2a\u5143\u7d20\uff09\u64cd\u4f5c\u7684\u5b58\u5728\uff0c\u9009\u62e9\u6392\u5e8f\u662f\u4e00\u79cd\u4e0d\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u65f6\u95f4\u590d\u6742\u5ea6"),"\uff1a\u9009\u62e9\u6392\u5e8f\u7684\u6700\u4f18\u65f6\u95f4\u590d\u6742\u5ea6\u3001\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"O(n^2)")," "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"vector<int> selection_sort(vector<int>& nums){\n    for (int i = 0; i < nums.size() - 1; i++) {\n        int minIndex = i;\n        for (int j = i + 1; j < nums.size(); j++) {\n            if (nums[j] < nums[i]) {\n                minIndex = j;\n            }\n        }\n        swap(nums[i], nums[minIndex]);\n    }\n    return nums;\n}\n")),(0,i.kt)("h3",{id:"2\u5192\u6ce1\u6392\u5e8f"},"2\u3001\u5192\u6ce1\u6392\u5e8f\uff1a"),(0,i.kt)("p",null,"\u57fa\u672c\u601d\u60f3\uff1a\u4e24\u4e2a\u6570\u6bd4\u8f83\u5927\u5c0f\uff0c\u8f83\u5927\u7684\u6570\u4e0b\u6c89\uff0c\u8f83\u5c0f\u7684\u6570\u5192\u8d77\u6765\u3002"),(0,i.kt)("p",null,"\u5192\u6ce1\u6392\u5e8f\u662f\u4e00\u79cd\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u65f6\u95f4\u590d\u6742\u5ea6"),"\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u6700\u4f18\u60c5\u51b5 ",(0,i.kt)("inlineCode",{parentName:"li"},"O(n)"),"\uff0c\u5728\u5e8f\u5217\u5b8c\u5168\u6709\u5e8f\u65f6\uff0c\u5192\u6ce1\u6392\u5e8f\u53ea\u9700\u904d\u5386\u4e00\u904d\u6570\u7ec4\uff0c\u4e0d\u7528\u6267\u884c\u4efb\u4f55\u4ea4\u6362\u64cd\u4f5c"),(0,i.kt)("li",{parentName:"ul"},"\u6700\u574f\u60c5\u51b5 ",(0,i.kt)("inlineCode",{parentName:"li"},"O(n^2)"),"\uff0c\u5192\u6ce1\u6392\u5e8f\u8981\u6267\u884c ",(0,i.kt)("inlineCode",{parentName:"li"},"(n-1)n/2")," \u6b21\u4ea4\u6362\u64cd\u4f5c"),(0,i.kt)("li",{parentName:"ul"},"\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 ",(0,i.kt)("inlineCode",{parentName:"li"},"O(n^2)"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def bubble_sort(nums):\n    for i in range(0, len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-C++"},'#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> nums{1, 2, 5, 3, 7, 4, 5, 8};\n    for (int i = 0; i < nums.size() - 1; i++) {\n        for (int j = i + 1; j < nums.size(); j++) {\n            if (nums[i] > nums[j]) {\n                swap(nums[i], nums[j]);\n            }\n        }\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        cout << nums[i] << " ";\n    }  // 1 2 3 4 5 5 7 8\n    return 0;\n}\n')),(0,i.kt)("h3",{id:"3\u63d2\u5165\u6392\u5e8f"},"3\u3001\u63d2\u5165\u6392\u5e8f"),(0,i.kt)("p",null,"\u5c06\u5f85\u6392\u5217\u5143\u7d20\u5212\u5206\u4e3a\u201c\u5df2\u6392\u5e8f\u201d\u548c\u201c\u672a\u6392\u5e8f\u201d\u4e24\u90e8\u5206\uff0c\u6bcf\u6b21\u4ece\u201c\u672a\u6392\u5e8f\u7684\u201d\u5143\u7d20\u4e2d\u9009\u62e9\u4e00\u4e2a\u63d2\u5165\u5230\u201c\u5df2\u6392\u5e8f\u7684\u201d\u5143\u7d20\u4e2d\u7684\u6b63\u786e\u4f4d\u7f6e"),(0,i.kt)("p",null,"\u63d2\u5165\u6392\u5e8f\u662f\u4e00\u79cd\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u65f6\u95f4\u590d\u6742\u5ea6"),"\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u6700\u4f18\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a ",(0,i.kt)("inlineCode",{parentName:"li"},"O(n)")),(0,i.kt)("li",{parentName:"ul"},"\u5e73\u5747\u548c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6 ",(0,i.kt)("inlineCode",{parentName:"li"},"O(n^2)"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u7b97\u6cd5\u5b9e\u73b0"),"\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u6570\u7ec4\u524d\u9762\u6709\u5e8f\uff08\u51fa\u59cb0\u6709\u5e8f\uff0c\u4ece1\u5f80\u540e\uff09\uff0c\u4e0d\u65ad\u904d\u5386\u540e\u9762\uff0c\u5f80\u524d\u9762\u63d2\u5165"),(0,i.kt)("li",{parentName:"ul"},"\u5f80\u524d\u9762\u63d2\u5165\u65f6\uff0c\u4ece\u524d\u9762\u6709\u5e8f\u7684\u6700\u540e\u4e00\u4e2a\uff08i-1\uff09\u5f00\u59cb\u300c\u4ece\u540e\u5f80\u524d\u6bd4\u8f83\u300d")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},'#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> nums{1, 2, 5, 3, 7, 4, 5, 8};\n    for (int i = 1; i < nums.size(); i++) {\n        int val = nums[i];\n        int j = i - 1;\n        while (j >= 0) {\n            if (val < nums[j]) {\n                nums[j + 1] = nums[j];\n                nums[j] = val;\n            }\n            j--;\n        }\n    }\n    for (int i = 0; i < nums.size(); i++) {\n        cout << nums[i] << " ";\n    }  // 1 2 3 4 5 5 7 8\n    return 0;\n}\n')),(0,i.kt)("h3",{id:"4\u8ba1\u6570\u6392\u5e8f"},"4\u3001\u8ba1\u6570\u6392\u5e8f"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.cnblogs.com/xiaochuan94/p/11198610.html"},"\u53c2\u8003")),(0,i.kt)("p",null,"\u8ba1\u6570\u6392\u5e8f\uff08\u82f1\u8bed\uff1aCounting sort\uff09\u662f\u4e00\u79cd\u7ebf\u6027\u65f6\u95f4\u7684\u6392\u5e8f\u7b97\u6cd5\u8be5\u7b97\u6cd5\u4e8e1954\u5e74\u7531 Harold H. Seward\u63d0\u51fa\uff0c\u901a\u8fc7\u8ba1\u6570\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u5230\u4e86",(0,i.kt)("inlineCode",{parentName:"p"},"O(N)")),(0,i.kt)("p",null,"\u7b97\u6cd5\u6b65\u9aa4\uff1a"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"\u627e\u51fa\u539f\u6570\u7ec4\u4e2d\u5143\u7d20\u503c\u6700\u5927\u7684\uff0c\u8bb0\u4e3a",(0,i.kt)("inlineCode",{parentName:"li"},"max"),"\u3002"),(0,i.kt)("li",{parentName:"ol"},"\u521b\u5efa\u4e00\u4e2a\u65b0\u6570\u7ec4",(0,i.kt)("inlineCode",{parentName:"li"},"count"),"\uff0c\u5176\u957f\u5ea6\u662f",(0,i.kt)("inlineCode",{parentName:"li"},"max"),"\u52a01\uff0c\u5176\u5143\u7d20\u9ed8\u8ba4\u503c\u90fd\u4e3a0\u3002"),(0,i.kt)("li",{parentName:"ol"},"\u904d\u5386\u539f\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\uff0c\u4ee5\u539f\u6570\u7ec4\u4e2d\u7684\u300c\u5143\u7d20\u503c\u300d\u4f5c\u4e3a",(0,i.kt)("inlineCode",{parentName:"li"},"count"),"\u6570\u7ec4\u7684\u300c\u7d22\u5f15\u300d\uff0c\u4ee5\u539f\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u300c\u51fa\u73b0\u6b21\u6570\u300d\u4f5c\u4e3a",(0,i.kt)("inlineCode",{parentName:"li"},"count"),"\u6570\u7ec4\u7684\u300c\u5143\u7d20\u503c\u300d"),(0,i.kt)("li",{parentName:"ol"},"\u521b\u5efa\u7ed3\u679c\u6570\u7ec4",(0,i.kt)("inlineCode",{parentName:"li"},"result"),"\uff0c\u8d77\u59cb\u7d22\u5f15",(0,i.kt)("inlineCode",{parentName:"li"},"index"),"\u3002"),(0,i.kt)("li",{parentName:"ol"},"\u904d\u5386",(0,i.kt)("inlineCode",{parentName:"li"},"count"),"\u6570\u7ec4\uff0c\u627e\u51fa\u5176\u4e2d\u5143\u7d20\u503c\u5927\u4e8e0\u7684\u5143\u7d20\uff0c\u5c06\u5176\u5bf9\u5e94\u7684\u7d22\u5f15\u4f5c\u4e3a\u5143\u7d20\u503c\u586b\u5145\u5230",(0,i.kt)("inlineCode",{parentName:"li"},"result"),"\u6570\u7ec4\u4e2d\u53bb\uff0c\u6bcf\u5904\u7406\u4e00\u6b21\uff0c",(0,i.kt)("inlineCode",{parentName:"li"},"count"),"\u4e2d\u7684\u8be5\u5143\u7d20\u503c\u51cf1\uff0c\u76f4\u5230\u8be5\u5143\u7d20\u503c\u4e0d\u5927\u4e8e0\uff0c\u4f9d\u6b21\u5904\u7406",(0,i.kt)("inlineCode",{parentName:"li"},"count"),"\u4e2d\u5269\u4e0b\u7684\u5143\u7d20\u3002"),(0,i.kt)("li",{parentName:"ol"},"\u8fd4\u56de\u7ed3\u679c\u6570\u7ec4",(0,i.kt)("inlineCode",{parentName:"li"},"result"),"\u3002")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u539f\u6570\u7ec4  nums: [2 4 3 1 2 5 9]\n\u8ba1\u6570\u6570\u7ec4 cnt: [0 1 2 1 1 1 0 0 0 1]\n\u6392\u5e8f\u5b8c  nums: [1 2 2 3 4 5 9]\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},'#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> nums = {2, 4, 3, 1, 2, 5, 9};\n    int maxVal = INT_MIN;\n    for (int num : nums) {\n        maxVal = max(maxVal, num);\n    }\n\n    vector<int> cnt(maxVal + 1, 0); // \u6570\u7ec4\u957f\u5ea6\u4e3a\u6700\u5927\u503c+1\n    for (int num : nums) {\n        cnt[num]++;\n    }\n\n    int index = 0;\n    for (int i = 0; i < cnt.size(); i++) {\n        while (cnt[i] > 0) {\n            nums[index] = i;\n            index++;\n            cnt[i]--;\n        }\n    }\n\n    for (int num : nums) {\n        cout << num << " ";\n    }\n    // 1 2 2 3 4 5 9\n\n    return 0;\n}\n')),(0,i.kt)("p",null,"\u5b83\u6709\u4e00\u4e2a\u7f3a\u9677\uff0c\u90a3\u5c31\u662f\u5b58\u5728\u7a7a\u95f4\u6d6a\u8d39\u7684\u95ee\u9898\u3002\u6bd4\u5982\u4e00\u7ec4\u6570\u636e",(0,i.kt)("inlineCode",{parentName:"p"},"{101,109,108,102,110,107,103}"),"\uff0c\u5176\u4e2d\u6700\u5927\u503c\u4e3a110\uff0c\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a111\u7684\u8ba1\u6570\u6570\u7ec4\uff0c\u524d\u9762\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"[0,100]"),"\u7684\u7a7a\u95f4\u6d6a\u8d39\u4e86"),(0,i.kt)("p",null,"\u4f18\u5316\uff1a\u5c06\u6570\u7ec4\u957f\u5ea6\u5b9a\u4e3a",(0,i.kt)("inlineCode",{parentName:"p"},"max-min+1"),"\uff0c\u5373\u4e0d\u4ec5\u8981\u627e\u51fa\u6700\u5927\u503c\uff0c\u8fd8\u8981\u627e\u51fa\u6700\u5c0f\u503c\uff0c",(0,i.kt)("strong",{parentName:"p"},"\u6839\u636e\u4e24\u8005\u7684\u5dee\u6765\u786e\u5b9a\u8ba1\u6570\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5143\u7d20\u8981\u51cf\u53bb\u6700\u5c0f\u503c\u518d\u4f5c\u4e3a\u65b0\u7d22\u5f15\uff0c\u6700\u540e\u53d6\u7ed3\u679c\u65f6\u5c06\u51cf\u53bb\u7684\u6700\u5c0f\u503c\u8865\u4e0a")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},'#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> nums = {101, 109, 108, 102, 110, 107, 109};\n    int maxVal = INT_MIN;\n    int minVal = INT_MAX;\n    for (int num : nums) {\n        maxVal = max(maxVal, num);\n        minVal = min(minVal, num);\n    }\n\n    vector<int> cnt(maxVal - minVal + 1, 0);  // \u957f\u5ea6\u4e3a\u6700\u5927\u503c\u51cf\u6700\u5c0f\u503c\u52a01\n    for (int num : nums) {\n        cnt[num - minVal]++;\n    }\n\n    int index = 0;\n    for (int i = 0; i < cnt.size(); i++) {\n        while (cnt[i] > 0) {\n            nums[index] = i + minVal;  // \u53d6\u7ed3\u679c\u65f6\u5c06\u51cf\u53bb\u7684\u6700\u5c0f\u503c\u8865\u4e0a\n            index++;\n            cnt[i]--;\n        }\n    }\n\n    for (int num : nums) {\n        cout << num << " ";\n    }\n    // 101 102 107 108 109 109 110\n\n    return 0;\n}\n')),(0,i.kt)("h3",{id:"5\u6876\u6392\u5e8f\u91cd\u8981"},"5\u3001\u6876\u6392\u5e8f\uff08\u91cd\u8981\uff09"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://blog.csdn.net/qq_27124771/article/details/87651495"},"\u53c2\u80031"),"\uff0c",(0,i.kt)("a",{parentName:"p",href:"https://oi-wiki.org/basic/bucket-sort/"},"\u53c2\u80032")),(0,i.kt)("p",null,"\u6876\u6392\u5e8f\uff08\u82f1\u6587\uff1aBucket sort\uff09\u662f\u6392\u5e8f\u7b97\u6cd5\u7684\u4e00\u79cd\uff0c\u9002\u7528\u4e8e\u5f85\u6392\u5e8f\u6570\u636e\u503c\u57df\u8f83\u5927\u4f46\u5206\u5e03\u6bd4\u8f83\u5747\u5300\u7684\u60c5\u51b5\uff0c\u5426\u5219\u5f53\u6240\u6709\u6570\u636e\u96c6\u4e2d\u5728\u540c\u4e00\u4e2a\u6876\u4e2d\u65f6\uff0c\u6876\u6392\u5e8f\u5931\u6548"),(0,i.kt)("p",null,"\u300c\u6876\u6392\u5e8f\u300d\u662f\u300c\u8ba1\u6570\u6392\u5e8f\u300d\u7684\u6269\u5c55\u7248\u672c\uff0c\u8ba1\u6570\u6392\u5e8f\u53ef\u4ee5\u770b\u6210\u6bcf\u4e2a\u6876\u53ea\u5b58\u50a8\u76f8\u540c\u5143\u7d20\uff0c\u800c\u6876\u6392\u5e8f\u6bcf\u4e2a\u6876\u5b58\u50a8\u4e00\u5b9a\u8303\u56f4\u7684\u5143\u7d20\uff0c\u901a\u8fc7\u6620\u5c04\u51fd\u6570\uff0c\u5c06\u5f85\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u6620\u5c04\u5230\u5404\u4e2a\u5bf9\u5e94\u7684\u6876\u4e2d\uff0c\u5bf9\u6bcf\u4e2a\u6876\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\uff0c\u6700\u540e\u5c06\u975e\u7a7a\u6876\u4e2d\u7684\u5143\u7d20\u9010\u4e2a\u653e\u5165\u539f\u5e8f\u5217\u4e2d"),(0,i.kt)("p",null,"\u4e00\u53e5\u8bdd\u603b\u7ed3\uff1a",(0,i.kt)("strong",{parentName:"p"},"\u5212\u5206\u591a\u4e2a\u8303\u56f4\u76f8\u540c\u7684\u533a\u95f4\uff0c\u6bcf\u4e2a\u5b50\u533a\u95f4\u81ea\u6392\u5e8f\uff0c\u6700\u540e\u5408\u5e76")),(0,i.kt)("p",null,(0,i.kt)("img",{src:e(78734).Z,width:"891",height:"816"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6bcf\u4e2a\u6876\u7684\u957f\u5ea6"),"\uff1a\u6211\u4eec\u671f\u671b\u5c06\u6570\u7ec4\u4e2d\u7684\u5404\u4e2a\u6570\u7b49\u8ddd\u79bb\u5206\u914d\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e2a\u6876\u7684\u957f\u5ea6\u76f8\u540c\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u6240\u6709\u6876\u6765\u8bf4\uff0c\u6876\u5185\u6700\u5927\u503c\u51cf\u53bb\u6876\u5185\u6700\u5c0f\u503c\u90fd\u662f\u4e00\u6837\u7684\u3002\n$$\n\u6bcf\u4e2a\u6876\u7684\u957f\u5ea6 = max(1, \\frac{max(nums)-min(nums)}{len(nums)-1})\n$$\n",(0,i.kt)("strong",{parentName:"p"},"\u6876\u7684\u6570\u91cf"),"\uff1a\u6700\u540e\u7684\u52a0\u4e00\u4fdd\u8bc1\u4e86\u6570\u7ec4\u7684\u6700\u5927\u503c\u4e5f\u80fd\u5206\u5230\u4e00\u4e2a\u6876\u3002\n$$\n\u6876\u7684\u6570\u91cf = \\frac{max(nums) - min(nums)}{\u6bcf\u4e2a\u6876\u7684\u957f\u5ea6} + 1\n$$\n",(0,i.kt)("strong",{parentName:"p"},"\u6bcf\u4e2a\u6570\u5bf9\u5e94\u6876\u7684\u4f4d\u7f6e"),"\n$$\nidx = \\frac{nums","[i]"," - min(nums)}{\u6bcf\u4e2a\u6876\u7684\u957f\u5ea6}\n$$"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u7b97\u6cd5\u6b65\u9aa4")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"\u8ba1\u7b97\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c"),(0,i.kt)("li",{parentName:"ol"},"\u8ba1\u7b97\u6876\u7684\u6570\u91cf"),(0,i.kt)("li",{parentName:"ol"},"\u5c06\u6bcf\u4e2a\u5143\u7d20\u653e\u5165\u6876"),(0,i.kt)("li",{parentName:"ol"},"\u5bf9\u6bcf\u4e2a\u6876\u8fdb\u884c\u6392\u5e8f"),(0,i.kt)("li",{parentName:"ol"},"\u5c06\u6876\u4e2d\u7684\u5143\u7d20\u8d4b\u503c\u5230\u539f\u5e8f\u5217")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u7a33\u5b9a\u6027")),(0,i.kt)("p",null,"\u5982\u679c\u4f7f\u7528\u7a33\u5b9a\u7684\u5185\u5c42\u6392\u5e8f\uff0c\u5e76\u4e14\u5c06\u5143\u7d20\u63d2\u5165\u6876\u4e2d\u65f6\u4e0d\u6539\u53d8\u5143\u7d20\u95f4\u7684\u76f8\u5bf9\u987a\u5e8f\uff0c\u90a3\u4e48\u6876\u6392\u5e8f\u5c31\u662f\u4e00\u79cd\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\u3002"),(0,i.kt)("p",null,"\u7531\u4e8e\u6bcf\u5757\u5143\u7d20\u4e0d\u591a\uff0c\u4e00\u822c\u4f7f\u7528\u63d2\u5165\u6392\u5e8f\u3002\u6b64\u65f6\u6876\u6392\u5e8f\u662f\u4e00\u79cd\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u65f6\u95f4\u590d\u6742\u5ea6")),(0,i.kt)("p",null,"\u6876\u6392\u5e8f\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"O((n+n^2)/(k+k))")," \uff08\u5c06\u503c\u57df\u5e73\u5747\u5206\u6210 n \u5757 + \u6392\u5e8f + \u91cd\u65b0\u5408\u5e76\u5143\u7d20\uff09\uff0c\u5f53 k\u7ea6\u7b49\u4e8en \u65f6\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"O(n)")),(0,i.kt)("p",null,"\u6876\u6392\u5e8f\u7684\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a",(0,i.kt)("inlineCode",{parentName:"p"},"O(n^2)")," "),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u5e94\u7528")),(0,i.kt)("p",null,"\u6876\u95f4\u9699\uff0c\u53ef\u4ee5 ",(0,i.kt)("inlineCode",{parentName:"p"},"O(n)"),"\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u627e\u5230\u4e00\u4e2a\u65e0\u5e8f\u6570\u7ec4\u4e2d\u5143\u7d20\u95f4\u7684",(0,i.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/maximum-gap/"},"\u6700\u5927\u95f4\u8ddd")),(0,i.kt)("p",null,"\u5143\u7d20\u4e4b\u95f4\u7684\u6700\u5927\u95f4\u8ddd\u4e00\u5b9a\u4e0d\u4f1a\u51fa\u73b0\u5728\u67d0\u4e2a\u6876\u7684\u5185\u90e8\uff0c\u800c\u4e00\u5b9a\u4f1a\u51fa\u73b0\u5728\u4e0d\u540c\u6876\u5f53\u4e2d"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},'#include <algorithm>\n#include <iostream>\n#include <vector>\n\nusing namespace std;\nint main() {\n    vector<int> nums = {101, 109, 108, 102, 110, 107, 109};\n    int n = nums.size();\n\n    // 1 \u8ba1\u7b97\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\n    int maxVal = *max_element(nums.begin(), nums.end());\n    int minVal = *min_element(nums.begin(), nums.end());\n\n    // 2 \u8ba1\u7b97\u6876\u7684\u6570\u91cf\n    int bucketSize = max(1, (maxVal - minVal) / (n - 1));  // 1 = max(1, (110-101)/(7-1))\n    int bucketNum = (maxVal - minVal) / bucketSize + 1;    // 10 = (110-101) / 1 + 1\n    vector<vector<int>> buckets(bucketNum, vector<int>{});\n\n    // 3 \u5c06\u6bcf\u4e2a\u5143\u7d20\u653e\u5165\u6876\n    for (int num : nums) {\n        int location = (num - minVal) / bucketSize;\n        buckets[location].push_back(num);\n    }\n\n    // 4 \u5bf9\u6bcf\u4e2a\u6876\u8fdb\u884c\u6392\u5e8f\uff0c\u6ce8\u610f\u662f\u5f15\u7528\n    for (auto &b : buckets) {\n        sort(b.begin(), b.end());\n    }\n\n    // 5 \u5c06\u6876\u4e2d\u7684\u5143\u7d20\u8d4b\u503c\u5230\u539f\u5e8f\u5217\n    int index = 0;\n    for (auto bucket : buckets) {\n        for (int num : bucket) {\n            nums[index] = num;\n            index++;\n        }\n    }\n\n    for (int num : nums) {\n        cout << num << " ";\n    }\n    // 101 102 107 108 109 109 110\n    return 0;\n}\n')),(0,i.kt)("h3",{id:"6\u5feb\u901f\u6392\u5e8f\u91cd\u8981"},"6\u3001\u5feb\u901f\u6392\u5e8f\uff08\u91cd\u8981\uff09"),(0,i.kt)("p",null,"\u53c2\u8003\u4e00\uff1a",(0,i.kt)("a",{parentName:"p",href:"https://mp.weixin.qq.com/s/8ZTMhvHJK_He48PpSt_AmQ"},"\u5feb\u901f\u6392\u5e8f\u7684\u6b63\u786e\u7406\u89e3\u65b9\u5f0f\u53ca\u8fd0\u7528")),(0,i.kt)("p",null,"\u5feb\u901f\u6392\u5e8f\uff08\u82f1\u8bed\uff1aQuicksort\uff09\uff0c\u53c8\u79f0\u5206\u533a\u4ea4\u6362\u6392\u5e8f\uff08\u82f1\u8bed\uff1apartition-exchange sort\uff09\uff0c\u7b80\u79f0\u5feb\u6392\uff0c\u662f\u4e00\u79cd\u88ab\u5e7f\u6cdb\u8fd0\u7528\u7684\u6392\u5e8f\u7b97\u6cd5\u3002"),(0,i.kt)("p",null,"\u5de5\u4f5c\u539f\u7406\u662f\u901a\u8fc7\u300c\u5206\u6cbb\u300d\u7684\u65b9\u5f0f\u6765\u5c06\u4e00\u4e2a\u6570\u7ec4\u6392\u5e8f"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u5c06\u6570\u5217\u5212\u5206\u4e3a\u4e24\u90e8\u5206\uff08\u8981\u6c42\u4fdd\u8bc1\u76f8\u5bf9\u5927\u5c0f\u5173\u7cfb\uff09\uff1b")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u9012\u5f52\u5230\u4e24\u4e2a\u5b50\u5e8f\u5217\u4e2d\u5206\u522b\u8fdb\u884c\u5feb\u901f\u6392\u5e8f\uff1b"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u4ece\u6570\u5217\u4e2d\u53d6\u51fa\u4e00\u4e2a\u6570\u4f5c\u4e3akey\u503c"),(0,i.kt)("li",{parentName:"ul"},"\u5c06\u6bd4\u8fd9\u4e2a\u6570\u5c0f\u7684\u6570\u5168\u90e8\u653e\u5728\u5b83\u7684\u5de6\u8fb9\uff0c\u5927\u4e8e\u6216\u7b49\u4e8e\u5b83\u7684\u6570\u5168\u90e8\u653e\u5728\u5b83\u7684\u53f3\u8fb9"),(0,i.kt)("li",{parentName:"ul"},"\u9012\u5f52\u91cd\u590d")))),(0,i.kt)("p",null,"\u5feb\u901f\u6392\u5e8f\u662f\u4e00\u79cd\u4e0d\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5"),(0,i.kt)("p",null,"\u5feb\u901f\u6392\u5e8f\u7684\u6700\u4f18\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"O(nlogn)"),"\uff0c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"O(n^2)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def quick_sort(nums, left, right):\n    if left >= right: # \u9000\u51fa\u9012\u5f52\n        return\n    low = left                  # \u63d0\u524d\u8bb0\u5f55\u9012\u5f52\u7684\u5de6\u8fb9\u754c\n    high = right                # \u63d0\u524d\u8bb0\u5f55\u9012\u5f52\u7684\u53f3\u8fb9\u5c4a\n    key = nums[low]         # \u521d\u59cb\u5316key\u503c\uff0c\u6bd4key\u5927\u7684\u653e\u53f3\u8fb9\uff0c\u6bd4key\u5c0f\u7684\u653e\u5de6\u8fb9\n    while left < right: # \u7b5b\u9009\u51fa\u672c\u6b21key\u503c\uff0c\u5de6\u8fb9\u90fd\u5c0f\uff0c\u53f3\u8fb9\u90fd\u5927\u7684\u6570\u7ec4\uff0c\u8df3\u51fa\u65f6left=right(\u4e0d\u61c2\u4e3a\u5565)\n        while left < right and nums[right] > key: # \u627e\u5230\u53f3\u8fb9\u6bd4key\u503c\u5c0f\u7684\u505c\u4e0b\u6765,\u56e0\u4e3aleft\u4f4d\u7f6e\u7684\u503c\u4f20\u7ed9key\u540e\u6ca1\u7528\u4e86\uff0c\u5148\u5224\u65ad\u53f3\u8fb9\u653e\u5230\u6ca1\u7528\u7684left\u4f4d\u7f6e\u4e0a\n            right -= 1\n        nums[left] = nums[right] # \u628a\u53f3\u8fb9\u9519\u4f4d\u7684\u503c\u653e\u5728array[left]\u4e0a\uff0c\u770b\u4e0a\u9762left->low->key\uff0c\u6240\u4ee5left\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u503c\u5df2\u7ecf\u4f20\u7ed9key\u4e86\uff0carray[left]\u6ca1\u7528\u4e86\n        while left < right and nums[left] <= key: # \u627e\u5230\u5de6\u8fb9\u6bd4key\u503c\u5927\u7684\u505c\u4e0b\u6765\n            left += 1\n        nums[right] = nums[left] # \u628a\u5de6\u8fb9\u9519\u4f4d\u7684\u503c\u653e\u5728array[right]\u4e0a\uff0c\u56e0\u4e3aright\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u503c\u5df2\u7ecf\u653e\u5230\u5de6\u8fb9\u4e86\uff0c\u6240\u4ee5array[right]\u6ca1\u7528\u4e86\n\n    nums[right] = key   # \u6b64\u65f6left=right\uff0c\u6240\u4ee5\u4f20\u5230right\u6216left\u4f4d\u7f6e\u90fd\u53ef\u4ee5\n\n    quick_sort(nums, low, left - 1)     # left\u6216right\u90fd\u53ef\u4ee5\n    quick_sort(nums, left + 1, high)    # left\u6216right\u90fd\u53ef\u4ee5\n\nnums = [5,2,9,6,3,7,10,4,1,8,13,54,76,33]\nquick_sort(nums,0,len(nums)-1)\nprint(nums)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"void quick_sort(vector<int>& nums, int left, int right){\n    if(left >= right){\n        return;\n    }\n    int low = left;\n    int high = right;\n    int key = nums[low];\n    \n    while (left < right) {\n        while (left < right && nums[right] > key) {\n            right--;\n        }\n        nums[left] = nums[right];\n        while (left < right && nums[left] <= key) {\n            left++;\n        }\n        nums[right] = nums[left];\n    }\n    nums[right] = key;\n    quick_sort(nums, low, left-1);\n    quick_sort(nums, left+1, high);\n}\n")),(0,i.kt)("p",null,"\u90a3\u6211\u5c31\u501f\u697c\u8865\u4e00\u4e2amsvc\u5bf9cpp\u7684sort\u7684\u5b9e\u73b0\uff0c\u5927\u4f53\u4e0a\u5c31\u662f\u53cc\u8f74\u5feb\u6392,\u5982\u679c\u9012\u5f52\u8fc7\u6df1\u4f1a\u8f6c\u4e3a\u5806\u6392\uff0c\u5982\u679c\u5143\u7d20\u6570\u91cf\u5c0f\u4e8e_ISORT_MAX=32\u4e2a\u8f6c\u63d2\u6392\u3002\u6ce8\u610f\u8fdb\u5165\u5806\u6392\u5e8f\u7684\u5224\u65adif (_ISORT_MAX < _Count)\u8981\u7ed3\u5408\u524d\u9762while\u91cc\u7684\u5224\u65ad while (_ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal)\u6765\u770b\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"//\u8c03\u7528\u5f62\u5f0f\n_Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred))\n    //\u5b9a\u4e49\n    template <class _RanIt,\n              class _Pr>\n    inline void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {  // order [_First, _Last), using _Pred\n    _Iter_diff_t<_RanIt> _Count;\n    while (_ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal) {  // divide and conquer by quicksort\n        auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);\n        // TRANSITION, VSO#433486\n        _Ideal = (_Ideal >> 1) + (_Ideal >> 2);  // allow 1.5 log2(N) divisions\n\n        if (_Mid.first - _First < _Last - _Mid.second) {  // loop on second half\n            _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);\n            _First = _Mid.second;\n        } else {  // loop on first half\n            _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);\n            _Last = _Mid.first;\n        }\n    }\n\n    if (_ISORT_MAX < _Count) {  // heap sort if too many divisions\n        _Make_heap_unchecked(_First, _Last, _Pred);\n        _Sort_heap_unchecked(_First, _Last, _Pred);\n    } else if (2 <= _Count) {\n        _Insertion_sort_unchecked(_First, _Last, _Pred);  // small\n    }\n}\n")),(0,i.kt)("h3",{id:"7\u5f52\u5e76\u6392\u5e8f\u91cd\u8981"},"7\u3001\u5f52\u5e76\u6392\u5e8f\uff08\u91cd\u8981\uff09"),(0,i.kt)("p",null,"\u53c2\u80031\uff1a",(0,i.kt)("a",{parentName:"p",href:"https://mp.weixin.qq.com/s/7_jsikVCARPFrJ6Hj1EYsg"},"\u5f52\u5e76\u6392\u5e8f\u7684\u6b63\u786e\u7406\u89e3\u65b9\u5f0f\u53ca\u8fd0\u7528")),(0,i.kt)("p",null,"\u53c2\u80032\uff1a",(0,i.kt)("a",{parentName:"p",href:"https://oi-wiki.org/basic/merge-sort/"},"\u5f52\u5e76\u6392\u5e8f")),(0,i.kt)("h4",{id:"1\u6027\u8d28"},"1\uff09\u6027\u8d28"),(0,i.kt)("p",null,"\u5f52\u5e76\u6392\u5e8f\u662f\u4e00\u79cd\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5"),(0,i.kt)("p",null,"\u5f52\u5e76\u6392\u5e8f\u7684\u6700\u4f18\u65f6\u95f4\u590d\u6742\u5ea6\u3001\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a O(nlogn)"),(0,i.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n)"),(0,i.kt)("h4",{id:"2\u7b97\u6cd5\u601d\u8def"},"2\uff09\u7b97\u6cd5\u601d\u8def"),(0,i.kt)("p",null,"\u6240\u6709\u300c\u9012\u5f52\u300d\u7684\u7b97\u6cd5\uff0c\u672c\u8d28\u4e0a\u90fd\u662f\u5728\u904d\u5386\u4e00\u68f5\uff08\u9012\u5f52\uff09\u6811\uff0c\u7136\u540e\u5728\u8282\u70b9\uff08\u524d\u4e2d\u540e\u5e8f\u4f4d\u7f6e\uff09\u4e0a\u6267\u884c\u4ee3\u7801"),(0,i.kt)("p",null,"\u8981\u5199\u9012\u5f52\u7b97\u6cd5\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u8981\u544a\u8bc9\u6bcf\u4e2a\u8282\u70b9\u9700\u8981\u505a\u4ec0\u4e48"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u5f52\u5e76\u6392\u5e8f\u5206\u4e3a\u4e09\u4e2a\u6b65\u9aa4")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5c06\u6570\u5217\u5212\u5206\u4e3a\u4e24\u90e8\u5206\uff1b"),(0,i.kt)("li",{parentName:"ul"},"\u9012\u5f52\u5730\u5206\u522b\u5bf9\u4e24\u4e2a\u5b50\u5e8f\u5217\u8fdb\u884c\u5f52\u5e76\u6392\u5e8f"),(0,i.kt)("li",{parentName:"ul"},"\u5408\u5e76\u4e24\u4e2a\u5b50\u5e8f\u5217")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"\u4e0d\u96be\u53d1\u73b0\uff0c\u5f52\u5e76\u6392\u5e8f\u7684\u524d\u4e24\u6b65\u90fd\u5f88\u597d\u5b9e\u73b0\uff0c\u5173\u952e\u662f\u300c\u5982\u4f55\u5408\u5e76\u4e24\u4e2a\u5b50\u5e8f\u5217\u300d"),(0,i.kt)("p",{parentName:"blockquote"},"\u6ce8\u610f\u5230\u4e24\u4e2a\u5b50\u5e8f\u5217\u5728\u7b2c\u4e8c\u6b65\u4e2d\u5df2\u7ecf\u4fdd\u8bc1\u4e86\u90fd\u662f\u6709\u5e8f\u7684\u4e86\uff0c\u7b2c\u4e09\u6b65\u4e2d\u5b9e\u9645\u4e0a\u662f\u60f3\u8981\u628a\u4e24\u4e2a ",(0,i.kt)("strong",{parentName:"p"},"\u6709\u5e8f")," \u7684\u5e8f\u5217\u5408\u5e76\u8d77\u6765")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u5f52\u5e76\u6392\u5e8f\u7684\u4ee3\u7801\u6846\u67b6")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"// \u5b9a\u4e49\uff1a\u6392\u5e8f nums[lo..hi]\nvoid sort(int[] nums, int lo, int hi) {\n    if (lo == hi) {\n        return;\n    }\n    int mid = (lo + hi) / 2;\n    sort(nums, lo, mid); // \u5229\u7528\u5b9a\u4e49\uff0c\u6392\u5e8f nums[lo..mid]\n    sort(nums, mid + 1, hi); // \u5229\u7528\u5b9a\u4e49\uff0c\u6392\u5e8f nums[mid+1..hi]\n\n    /****** \u540e\u5e8f\u4f4d\u7f6e ******/\n    // \u6b64\u65f6\u4e24\u90e8\u5206\u5b50\u6570\u7ec4\u5df2\u7ecf\u88ab\u6392\u597d\u5e8f\n    // \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\uff0c\u4f7f nums[lo..hi] \u6709\u5e8f\n    merge(nums, lo, mid, hi);\n    /*********************/\n}\n\n// \u5c06\u6709\u5e8f\u6570\u7ec4 nums[lo..mid] \u548c\u6709\u5e8f\u6570\u7ec4 nums[mid+1..hi]\n// \u5408\u5e76\u4e3a\u6709\u5e8f\u6570\u7ec4 nums[lo..hi]\nvoid merge(int[] nums, int lo, int mid, int hi);\n")),(0,i.kt)("p",null,"\u4e0a\u8ff0\u6846\u67b6\u5370\u8bc1\u4e86\u5e76\u5f52\u6392\u5e8f\u7684\u7ecf\u5178\u7684\u603b\u7ed3\uff1a\u5f52\u5e76\u6392\u5e8f\u5c31\u662f\u5148\u628a\u5de6\u534a\u8fb9\u6570\u7ec4\u6392\u597d\u5e8f\uff0c\u518d\u628a\u53f3\u534a\u8fb9\u6570\u7ec4\u6392\u597d\u5e8f\uff0c\u7136\u540e\u628a\u4e24\u534a\u6570\u7ec4\u5408\u5e76"),(0,i.kt)("p",null,"\u89c2\u5bdf\u4e0b\u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386\u548c\u6c42\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6\u7684\u4ee3\u7801\uff0c\u4f1a\u53d1\u73b0\u5e76\u5f52\u6392\u5e8f\u7684\u6846\u67b6\u5c31\u662f\u540e\u5e8f\u904d\u5386\u7684\u6846\u67b6"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"/* \u4e8c\u53c9\u6811\u540e\u5e8f\u904d\u5386*/\nvoid traverse(TreeNode root) {\n    if (root == null) {\n        return;\n    }\n    traverse(root.left);\n    traverse(root.right);\n    /****** \u540e\u5e8f\u4f4d\u7f6e ******/\n    print(root.val);\n    /*********************/\n}\n\n// \u5b9a\u4e49\uff1a\u8f93\u5165\u6839\u8282\u70b9\uff0c\u8fd4\u56de\u8fd9\u68f5\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6\nint maxDepth(TreeNode root) {\n    if (root == null) {\n        return 0;\n    }\n    // \u5229\u7528\u5b9a\u4e49\uff0c\u8ba1\u7b97\u5de6\u53f3\u5b50\u6811\u7684\u6700\u5927\u6df1\u5ea6\n    int leftMax = maxDepth(root.left);\n    int rightMax = maxDepth(root.right);\n    // \u6574\u68f5\u6811\u7684\u6700\u5927\u6df1\u5ea6\u7b49\u4e8e\u5de6\u53f3\u5b50\u6811\u7684\u6700\u5927\u6df1\u5ea6\u53d6\u6700\u5927\u503c\uff0c\n    // \u7136\u540e\u518d\u52a0\u4e0a\u6839\u8282\u70b9\u81ea\u5df1\n    int res = Math.max(leftMax, rightMax) + 1;\n\n    return res;\n}\n")),(0,i.kt)("p",null,"\u5f52\u5e76\u6392\u5e8f\u7684\u8fc7\u7a0b\u53ef\u4ee5\u5728\u903b\u8f91\u4e0a\u62bd\u8c61\u6210\u4e00\u68f5\u300c\u4e8c\u53c9\u6811\u300d\uff0c\u6811\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u53ef\u4ee5\u8ba4\u4e3a\u662f ",(0,i.kt)("inlineCode",{parentName:"p"},"nums[lo..hi]"),"\uff0c\u53f6\u5b50\u8282\u70b9\u7684\u503c\u5c31\u662f\u6570\u7ec4\u4e2d\u7684\u5355\u4e2a\u5143\u7d20"),(0,i.kt)("p",null,(0,i.kt)("img",{src:e(25252).Z,width:"1080",height:"608"})),(0,i.kt)("p",null,"\u7136\u540e\uff0c\u5728\u6bcf\u4e2a\u8282\u70b9\u7684\u540e\u5e8f\u4f4d\u7f6e\uff08\u5de6\u53f3\u5b50\u8282\u70b9\u5df2\u7ecf\u88ab\u6392\u597d\u5e8f\uff09\u7684\u65f6\u5019\u6267\u884c",(0,i.kt)("inlineCode",{parentName:"p"},"merge"),"\u51fd\u6570\uff0c\u5408\u5e76\u4e24\u4e2a\u5b50\u8282\u70b9\u4e0a\u7684\u5b50\u6570\u7ec4"),(0,i.kt)("p",null,(0,i.kt)("img",{src:e(6643).Z,width:"1080",height:"608"})),(0,i.kt)("p",null,"\u8fd9\u4e2a",(0,i.kt)("inlineCode",{parentName:"p"},"merge"),"\u64cd\u4f5c\u4f1a\u5728\u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u4e0a\u90fd\u6267\u884c\u4e00\u904d\uff0c\u6267\u884c\u987a\u5e8f\u662f\u4e8c\u53c9\u6811\u540e\u5e8f\u904d\u5386\u7684\u987a\u5e8f"),(0,i.kt)("p",null,"\u6211\u4eec\u628a",(0,i.kt)("inlineCode",{parentName:"p"},"nums[lo..hi]"),"\u7406\u89e3\u6210\u4e8c\u53c9\u6811\u7684\u8282\u70b9\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"srot"),"\u51fd\u6570\u7406\u89e3\u6210\u4e8c\u53c9\u6811\u7684\u904d\u5386\u51fd\u6570\uff0c\u6574\u4e2a\u5f52\u5e76\u6392\u5e8f\u7684\u6267\u884c\u8fc7\u7a0b\u5c31\u662f\u4ee5\u4e0b GIF \u63cf\u8ff0\u7684\u8fd9\u6837\uff1a"),(0,i.kt)("p",null,(0,i.kt)("img",{src:e(79566).Z,width:"1079",height:"607"})),(0,i.kt)("h4",{id:"4\u4ee3\u7801\u5b9e\u73b0"},"4\uff09\u4ee3\u7801\u5b9e\u73b0"),(0,i.kt)("p",null,"\u300a\u7b97\u6cd5 4\u300b\u4e2d\u7ed9\u51fa\u7684\u5f52\u5e76\u6392\u5e8f\u4ee3\u7801\u517c\u5177\u4e86\u7b80\u6d01\u548c\u9ad8\u6548\u7684\u7279\u70b9\uff0c\u4ee5\u6b64\u4f5c\u4e3a\u5f52\u5e76\u7b97\u6cd5\u6a21\u677f"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},'#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nclass MergeSort {\nprivate:\n    vector<int> tmp;  // \u7528\u4e8e\u8f85\u52a9\u5408\u5e76\u6709\u5e8f\u6570\u7ec4\n    void _sort(vector<int> &nums, int lo, int hi) {\n        if (lo == hi) return;  // \u5355\u4e2a\u5143\u7d20\u4e0d\u7528\u6392\u5e8f\n        int mid = lo + (hi - lo) / 2;\n        _sort(nums, lo, mid);      // \u5148\u5bf9\u5de6\u534a\u90e8\u5206\u6570\u7ec4 [lo,mid] \u6392\u5e8f\n        _sort(nums, mid + 1, hi);  // \u518d\u5bf9\u53f3\u534a\u90e8\u5206\u6570\u7ec4 [mid+1,hi] \u6392\u5e8f\n        merge(nums, lo, mid, hi);  // \u5c06\u4e24\u90e8\u5206\u6709\u5e8f\u6570\u7ec4\u5408\u5e76\u6210\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\n    }\n    void merge(vector<int> &nums, int lo, int mid, int hi) {\n        // \u5148\u628a [lo, hi] \u590d\u5236\u5230\u8f85\u52a9\u6570\u7ec4\u4e2d\uff0c\u4ee5\u4fbf\u5408\u5e76\u540e\u7684\u7ed3\u679c\u80fd\u591f\u76f4\u63a5\u5b58\u5165 nums\n        for (int i = lo; i <= hi; i++) tmp[i] = nums[i];\n\n        // \u53cc\u6307\u9488\uff0c\u5206\u522b\u6307\u5411\u5de6\u53f3\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\uff0c\u5408\u5e76\n        int ptr_l = lo, ptr_r = mid + 1;\n        for (int idx = lo; idx <= hi; idx++) {\n            if (ptr_l == mid + 1) {  // \u5de6\u534a\u8fb9\u6570\u7ec4\u5df2\u5168\u90e8\u88ab\u5408\u5e76\n                nums[idx] = tmp[ptr_r++];\n            } else if (ptr_r == hi + 1) {  // \u53f3\u534a\u8fb9\u6570\u7ec4\u5df2\u5168\u90e8\u88ab\u5408\u5e76\n                nums[idx] = tmp[ptr_l++];\n            } else if (tmp[ptr_l] < tmp[ptr_r]) {\n                nums[idx] = tmp[ptr_l];\n                ptr_l++;\n            } else if (tmp[ptr_l] == tmp[ptr_r]) {\n                nums[idx] = tmp[ptr_l];  // \u6ce8\u610f\uff1a\u4e24\u4e2a\u6307\u9488\u76f8\u7b49\u65f6\uff0c\u5728\u5355\u7eaf\u6392\u5e8f\u65f6\uff0c\u54ea\u4e2a\u6307\u9488\u79fb\u52a8\u65e0\u6240\u8c13\n                ptr_l++;                 // \u4f46\u662f\u5728\u6c42\u9006\u5e8f\u5bf9\u65f6\uff0c\u4e00\u5b9a\u662f\u5de6\u6307\u9488\u79fb\u52a8\n            } else if (tmp[ptr_l] > tmp[ptr_r]) {\n                // reverse_pairs += mid - ptr_l + 1; // \u9006\u5e8f\u5bf9\u8fdb\u884c\u7d2f\u52a0\n                nums[idx] = tmp[ptr_r];\n                ptr_r++;\n            }\n        }\n    }\n\npublic:\n    void sort(vector<int> &nums) {\n        int n = nums.size();\n        tmp.resize(n);          // \u5148\u7ed9\u8f85\u52a9\u6570\u7ec4\u5f00\u8f9f\u5185\u5b58\u7a7a\u95f4\uff0c\u4e0d\u8981\u653e\u5728\u9012\u5f52\u91cc\u9762\n        _sort(nums, 0, n - 1);  // \u6392\u5e8f\u6574\u4e2a\u6570\u7ec4\uff08\u539f\u5730\u4fee\u6539\uff09\n    }\n};\n\nint main() {\n    vector<int> nums = {5, 4, 7, 6, 3, 2, 1};\n    MergeSort m;\n    m.sort(nums);\n\n    for (int a : nums) cout << a << " ";\n    cout << endl;  // 1 2 3 4 5 6 7\n    return 0;\n}\n')),(0,i.kt)("p",null,"\u5f52\u5e76\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u96c6\u4e2d\u5728",(0,i.kt)("inlineCode",{parentName:"p"},"merge"),"\u51fd\u6570\u4e2d\u628a ","[lo, hi]"," \u590d\u5236\u5230\u8f85\u52a9\u6570\u7ec4\u4e2d\u8fd9\u4e00\u6b65\uff0c\u4f46\u6bcf\u6b21",(0,i.kt)("inlineCode",{parentName:"p"},"merge"),"\u8f93\u5165\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"lo"),"\u548c",(0,i.kt)("inlineCode",{parentName:"p"},"hi"),"\u90fd\u4e0d\u540c\uff0c\u6240\u4ee5\u4e0d\u5bb9\u6613\u76f4\u89c2\u5730\u770b\u51fa\u65f6\u95f4\u590d\u6742\u5ea6\u3002"),(0,i.kt)("p",null,"\u89c2\u5bdf\u4e8c\u53c9\u6811\u6bcf\u4e00\u5c42\u7684\u7ed3\u70b9\uff0c\u5728\u540c\u4e00\u5c42\u7684\u8bb8\u591a merge \u51fd\u6570\u5408\u8ba1\u7684\u6b21\u6570\u4e3a n \u6b21"),(0,i.kt)("p",null,"\u540c\u65f6\uff0c\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u4e3a logn"),(0,i.kt)("p",null,"\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"O(nlogn)")),(0,i.kt)("h4",{id:"5\u5e94\u7528\u4f8b\u9898"},"5\uff09\u5e94\u7528\uff08\u4f8b\u9898\uff09"),(0,i.kt)("p",null,"\u5e76\u5f52\u6392\u5e8f\u7ecf\u5178\u7684\u5e94\u7528\u662f\uff1a\u6392\u5e8f\u94fe\u8868\u548c\u8ba1\u7b97\u9006\u5e8f\u5bf9"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/sort-list/"},"148. \u6392\u5e8f\u94fe\u8868")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/"},"\u5251\u6307 Offer 51. \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9")),(0,i.kt)("h2",{id:"\u4e8c\u5916\u90e8\u6392\u5e8f"},"\u4e8c\u3001\u5916\u90e8\u6392\u5e8f"))}s.isMDXComponent=!0},78702:(n,t,e)=>{e.d(t,{Z:()=>l});const l=e.p+"assets/images/8-1-a2823630ce08471965c9e17ef0f2817a.png"},80894:(n,t,e)=>{e.d(t,{Z:()=>l});const l=e.p+"assets/images/8-2-9c0b8337b533beb1bfec6516740ffa55.png"},3782:(n,t,e)=>{e.d(t,{Z:()=>l});const l=e.p+"assets/images/8-3-a841f4392345eade968edd7350ea14a6.png"},72775:(n,t,e)=>{e.d(t,{Z:()=>l});const l=e.p+"assets/images/8-4-29686405f964635f0f7f94f6321413ba.png"},42116:(n,t,e)=>{e.d(t,{Z:()=>l});const l=e.p+"assets/images/8-5-42af17ecc4c65436db765bdd4d4072ea.png"},2081:(n,t,e)=>{e.d(t,{Z:()=>l});const l=e.p+"assets/images/8-6-1999918dd2453d3a3396b81097854d1a.png"},25252:(n,t,e)=>{e.d(t,{Z:()=>l});const l=e.p+"assets/images/\u5e76\u5f52-1-942059825f84d61827924e50692f017f.png"},6643:(n,t,e)=>{e.d(t,{Z:()=>l});const l=e.p+"assets/images/\u5e76\u5f52-2-64acbf21434438a8d5bd62bc05b11ca5.png"},79566:(n,t,e)=>{e.d(t,{Z:()=>l});const l=e.p+"assets/images/\u5e76\u5f52-3-30894e0927b4aabe44c3fd4b09bc1cb4.gif"},78734:(n,t,e)=>{e.d(t,{Z:()=>l});const l=e.p+"assets/images/\u6876\u6392\u5e8f-23499b6fc43d1b57c7dd0d5c8695fe9a.png"}}]);