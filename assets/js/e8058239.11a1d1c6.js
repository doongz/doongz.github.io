"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[65431],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),d=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=d(e.components);return r.createElement(p.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=d(t),m=o,f=c["".concat(p,".").concat(m)]||c[m]||u[m]||a;return t?r.createElement(f,i(i({ref:n},s),{},{components:t})):r.createElement(f,i({ref:n},s))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var d=2;d<a;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},30947:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=t(87462),o=(t(67294),t(3905));const a={},i=void 0,l={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/<\u9012\u5f52+\u5012\u7740\u904d\u5386\u94fe\u8868>-\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/<\u9012\u5f52+\u5012\u7740\u904d\u5386\u94fe\u8868>-\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9",title:"<\u9012\u5f52+\u5012\u7740\u904d\u5386\u94fe\u8868>-\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9",description:"\u9898\u76ee\uff1a2487. \u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/2487-<\u9012\u5f52+\u5012\u7740\u904d\u5386\u94fe\u8868>-\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/<\u9012\u5f52+\u5012\u7740\u904d\u5386\u94fe\u8868>-\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/<\u9012\u5f52+\u5012\u7740\u904d\u5386\u94fe\u8868>-\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9",draft:!1,tags:[],version:"current",sidebarPosition:2487,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<\u5feb\u6162\u53cc\u6307\u9488>-\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/<\u5feb\u6162\u53cc\u6307\u9488>-\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9"},next:{title:"\u5251\u6307Offer-22-<\u53cc\u6307\u9488>-\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u94fe\u8868/\u5251\u6307Offer-22-<\u53cc\u6307\u9488>-\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9"}},p={},d=[{value:"\u9012\u5f52",id:"\u9012\u5f52",level:2},{value:"\u6bd4\u8d5b\u65f6\u5019\u7684\u505a\u6cd5\uff0c\u53d6\u51fa\u6765\uff0c\u8ba1\u7b97\uff0c\u518d\u585e\u56de\u53bb",id:"\u6bd4\u8d5b\u65f6\u5019\u7684\u505a\u6cd5\u53d6\u51fa\u6765\u8ba1\u7b97\u518d\u585e\u56de\u53bb",level:2}],s={toc:d};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u9898\u76ee\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/remove-nodes-from-linked-list/"},"2487. \u4ece\u94fe\u8868\u4e2d\u79fb\u9664\u8282\u70b9")),(0,o.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9 ",(0,o.kt)("inlineCode",{parentName:"p"},"head")," \u3002"),(0,o.kt)("p",null,"\u5bf9\u4e8e\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9 ",(0,o.kt)("inlineCode",{parentName:"p"},"node")," \uff0c\u5982\u679c\u5176\u53f3\u4fa7\u5b58\u5728\u4e00\u4e2a\u5177\u6709 ",(0,o.kt)("strong",{parentName:"p"},"\u4e25\u683c\u66f4\u5927")," \u503c\u7684\u8282\u70b9\uff0c\u5219\u79fb\u9664 ",(0,o.kt)("inlineCode",{parentName:"p"},"node")," \u3002"),(0,o.kt)("p",null,"\u8fd4\u56de\u4fee\u6539\u540e\u94fe\u8868\u7684\u5934\u8282\u70b9 ",(0,o.kt)("inlineCode",{parentName:"p"},"head")," \u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1\uff1a")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/10/02/drawio.png",alt:"img"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1ahead = [5,2,13,3,8]\n\u8f93\u51fa\uff1a[13,8]\n\u89e3\u91ca\uff1a\u9700\u8981\u79fb\u9664\u7684\u8282\u70b9\u662f 5 \uff0c2 \u548c 3 \u3002\n- \u8282\u70b9 13 \u5728\u8282\u70b9 5 \u53f3\u4fa7\u3002\n- \u8282\u70b9 13 \u5728\u8282\u70b9 2 \u53f3\u4fa7\u3002\n- \u8282\u70b9 8 \u5728\u8282\u70b9 3 \u53f3\u4fa7\u3002\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 2\uff1a")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1ahead = [1,1,1,1]\n\u8f93\u51fa\uff1a[1,1,1,1]\n\u89e3\u91ca\uff1a\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u662f 1 \uff0c\u6240\u4ee5\u6ca1\u6709\u9700\u8981\u79fb\u9664\u7684\u8282\u70b9\u3002\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u63d0\u793a\uff1a")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u7ed9\u5b9a\u5217\u8868\u4e2d\u7684\u8282\u70b9\u6570\u76ee\u5728\u8303\u56f4 ",(0,o.kt)("inlineCode",{parentName:"li"},"[1, 105]")," \u5185"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= Node.val <= 105"))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"\u9012\u5f52"},"\u9012\u5f52"),(0,o.kt)("p",null,"\u65e2\u7136\u8981\u5012\u7740\u770b\u6700\u5927\u503c\uff0c\u90a3\u4e48\u7528\u9012\u5f52\u89e3\u51b3\u662f\u6700\u5408\u9002\u7684\uff0c\u6bd5\u7adf",(0,o.kt)("strong",{parentName:"p"},"\u9012\u5f52\u672c\u8d28\u5c31\u662f\u5728\u5012\u7740\u904d\u5386\u94fe\u8868"),"\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def removeNodes(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if head.next is None: return head  # \u8f93\u5165\u4fdd\u8bc1\u94fe\u8868\u4e0d\u4e3a\u7a7a\n        node = self.removeNodes(head.next)  # \u8fd4\u56de\u7684\u94fe\u8868\u5934\u4e00\u5b9a\u662f\u6700\u5927\u7684\n        if node.val > head.val: return node  # \u5220\u9664 head\n        head.next = node  # \u4e0d\u5220\u9664 head\n        return head\n")),(0,o.kt)("h2",{id:"\u6bd4\u8d5b\u65f6\u5019\u7684\u505a\u6cd5\u53d6\u51fa\u6765\u8ba1\u7b97\u518d\u585e\u56de\u53bb"},"\u6bd4\u8d5b\u65f6\u5019\u7684\u505a\u6cd5\uff0c\u53d6\u51fa\u6765\uff0c\u8ba1\u7b97\uff0c\u518d\u585e\u56de\u53bb"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c++"},'/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNodes(ListNode* head) {\n        ListNode* cur = head;\n        vector<int> nodes;\n        while (cur) {\n            nodes.push_back(cur->val);\n            cur = cur->next;\n        }\n        // for (auto a : nodes) {\n        //     cout << a << " ";\n        // }\n        // cout << endl;\n        vector<int> nnd;\n        int n = nodes.size();\n        for (int i = 0; i < n; i++) {\n            while (nnd.size() != 0 && nodes[i] > *nnd.rbegin()) {\n                nnd.pop_back();\n            }\n            nnd.push_back(nodes[i]);\n        }\n        // for (auto a : nnd) cout << a << " ";\n        // cout << endl;\n        \n        ListNode* hair = new ListNode;\n        ListNode* curr = hair;\n        for (int a : nnd) {\n            curr->next = new ListNode(a);\n            curr = curr->next;\n        }\n        \n        \n        return hair->next;\n    }\n};\n')))}c.isMDXComponent=!0}}]);