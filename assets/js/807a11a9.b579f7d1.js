"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[14781],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>f});var i=t(67294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,i,r=function(n,e){if(null==n)return{};var t,i,r={},l=Object.keys(n);for(i=0;i<l.length;i++)t=l[i],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(i=0;i<l.length;i++)t=l[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var o=i.createContext({}),c=function(n){var e=i.useContext(o),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},p=function(n){var e=c(n.components);return i.createElement(o.Provider,{value:e},n.children)},d="mdxType",u={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},_=i.forwardRef((function(n,e){var t=n.components,r=n.mdxType,l=n.originalType,o=n.parentName,p=s(n,["components","mdxType","originalType","parentName"]),d=c(t),_=r,f=d["".concat(o,".").concat(_)]||d[_]||u[_]||l;return t?i.createElement(f,a(a({ref:e},p),{},{components:t})):i.createElement(f,a({ref:e},p))}));function f(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var l=t.length,a=new Array(l);a[0]=_;var s={};for(var o in e)hasOwnProperty.call(e,o)&&(s[o]=e[o]);s.originalType=n,s[d]="string"==typeof n?n:r,a[1]=s;for(var c=2;c<l;c++)a[c]=t[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}_.displayName="MDXCreateElement"},61427:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var i=t(87462),r=(t(67294),t(3905));const l={},a=void 0,s={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<\u5c0f\u6839\u5806>-\u96c7\u4f63K\u4f4d\u5de5\u4eba\u7684\u603b\u4ee3\u4ef7",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<\u5c0f\u6839\u5806>-\u96c7\u4f63K\u4f4d\u5de5\u4eba\u7684\u603b\u4ee3\u4ef7",title:"<\u5c0f\u6839\u5806>-\u96c7\u4f63K\u4f4d\u5de5\u4eba\u7684\u603b\u4ee3\u4ef7",description:"\u9898\u76ee\uff1a2462. \u96c7\u4f63 K \u4f4d\u5de5\u4eba\u7684\u603b\u4ee3\u4ef7",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/2462-<\u5c0f\u6839\u5806>-\u96c7\u4f63K\u4f4d\u5de5\u4eba\u7684\u603b\u4ee3\u4ef7.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<\u5c0f\u6839\u5806>-\u96c7\u4f63K\u4f4d\u5de5\u4eba\u7684\u603b\u4ee3\u4ef7",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<\u5c0f\u6839\u5806>-\u96c7\u4f63K\u4f4d\u5de5\u4eba\u7684\u603b\u4ee3\u4ef7",draft:!1,tags:[],version:"current",sidebarPosition:2462,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<\u8d2a\u5fc3-\u5806>-\u627e\u51fa\u6570\u7ec4\u7684\u7b2cK\u5927\u548c",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5806/<\u8d2a\u5fc3-\u5806>-\u627e\u51fa\u6570\u7ec4\u7684\u7b2cK\u5927\u548c"},next:{title:"\u5b9e\u73b0Trie\u524d\u7f00\u6811",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u5b57\u5178\u6811/\u5b9e\u73b0Trie\u524d\u7f00\u6811"}},o={},c=[],p={toc:c};function d(n){let{components:e,...t}=n;return(0,r.kt)("wrapper",(0,i.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"\u9898\u76ee\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/total-cost-to-hire-k-workers/"},"2462. \u96c7\u4f63 K \u4f4d\u5de5\u4eba\u7684\u603b\u4ee3\u4ef7")),(0,r.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece ",(0,r.kt)("strong",{parentName:"p"},"0")," \u5f00\u59cb\u7684\u6574\u6570\u6570\u7ec4 ",(0,r.kt)("inlineCode",{parentName:"p"},"costs")," \uff0c\u5176\u4e2d ",(0,r.kt)("inlineCode",{parentName:"p"},"costs[i]")," \u662f\u96c7\u4f63\u7b2c ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," \u4f4d\u5de5\u4eba\u7684\u4ee3\u4ef7\u3002"),(0,r.kt)("p",null,"\u540c\u65f6\u7ed9\u4f60\u4e24\u4e2a\u6574\u6570 ",(0,r.kt)("inlineCode",{parentName:"p"},"k")," \u548c ",(0,r.kt)("inlineCode",{parentName:"p"},"candidates")," \u3002\u6211\u4eec\u60f3\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\u6070\u597d\u96c7\u4f63 ",(0,r.kt)("inlineCode",{parentName:"p"},"k")," \u4f4d\u5de5\u4eba\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u603b\u5171\u8fdb\u884c ",(0,r.kt)("inlineCode",{parentName:"li"},"k")," \u8f6e\u96c7\u4f63\uff0c\u4e14\u6bcf\u4e00\u8f6e\u6070\u597d\u96c7\u4f63\u4e00\u4f4d\u5de5\u4eba\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u5728\u6bcf\u4e00\u8f6e\u96c7\u4f63\u4e2d\uff0c\u4ece\u6700\u524d\u9762 ",(0,r.kt)("inlineCode",{parentName:"li"},"candidates")," \u548c\u6700\u540e\u9762 ",(0,r.kt)("inlineCode",{parentName:"li"},"candidates")," \u4eba\u4e2d\u9009\u51fa\u4ee3\u4ef7\u6700\u5c0f\u7684\u4e00\u4f4d\u5de5\u4eba\uff0c\u5982\u679c\u6709\u591a\u4f4d\u4ee3\u4ef7\u76f8\u540c\u4e14\u6700\u5c0f\u7684\u5de5\u4eba\uff0c\u9009\u62e9\u4e0b\u6807\u66f4\u5c0f\u7684\u4e00\u4f4d\u5de5\u4eba\u3002",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u6bd4\u65b9\u8bf4\uff0c",(0,r.kt)("inlineCode",{parentName:"li"},"costs = [3,2,7,7,1,2]")," \u4e14 ",(0,r.kt)("inlineCode",{parentName:"li"},"candidates = 2")," \uff0c\u7b2c\u4e00\u8f6e\u96c7\u4f63\u4e2d\uff0c\u6211\u4eec\u9009\u62e9\u7b2c ",(0,r.kt)("inlineCode",{parentName:"li"},"4")," \u4f4d\u5de5\u4eba\uff0c\u56e0\u4e3a\u4ed6\u7684\u4ee3\u4ef7\u6700\u5c0f ",(0,r.kt)("inlineCode",{parentName:"li"},"[*3,2*,7,7,***1**,2*]")," \u3002"),(0,r.kt)("li",{parentName:"ul"},"\u7b2c\u4e8c\u8f6e\u96c7\u4f63\uff0c\u6211\u4eec\u9009\u62e9\u7b2c ",(0,r.kt)("inlineCode",{parentName:"li"},"1")," \u4f4d\u5de5\u4eba\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7684\u4ee3\u4ef7\u4e0e\u7b2c ",(0,r.kt)("inlineCode",{parentName:"li"},"4")," \u4f4d\u5de5\u4eba\u4e00\u6837\u90fd\u662f\u6700\u5c0f\u4ee3\u4ef7\uff0c\u800c\u4e14\u4e0b\u6807\u66f4\u5c0f\uff0c",(0,r.kt)("inlineCode",{parentName:"li"},"[*3,**2***,7,*7,2*]")," \u3002\u6ce8\u610f\u6bcf\u4e00\u8f6e\u96c7\u4f63\u540e\uff0c\u5269\u4f59\u5de5\u4eba\u7684\u4e0b\u6807\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\u3002"))),(0,r.kt)("li",{parentName:"ul"},"\u5982\u679c\u5269\u4f59\u5458\u5de5\u6570\u76ee\u4e0d\u8db3 ",(0,r.kt)("inlineCode",{parentName:"li"},"candidates")," \u4eba\uff0c\u90a3\u4e48\u4e0b\u4e00\u8f6e\u96c7\u4f63\u4ed6\u4eec\u4e2d\u4ee3\u4ef7\u6700\u5c0f\u7684\u4e00\u4eba\uff0c\u5982\u679c\u6709\u591a\u4f4d\u4ee3\u4ef7\u76f8\u540c\u4e14\u6700\u5c0f\u7684\u5de5\u4eba\uff0c\u9009\u62e9\u4e0b\u6807\u66f4\u5c0f\u7684\u4e00\u4f4d\u5de5\u4eba\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u4e00\u4f4d\u5de5\u4eba\u53ea\u80fd\u88ab\u9009\u62e9\u4e00\u6b21\u3002")),(0,r.kt)("p",null,"\u8fd4\u56de\u96c7\u4f63\u6070\u597d ",(0,r.kt)("inlineCode",{parentName:"p"},"k")," \u4f4d\u5de5\u4eba\u7684\u603b\u4ee3\u4ef7\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u793a\u4f8b 1\uff1a\n\n\u8f93\u5165\uff1acosts = [17,12,10,2,7,2,11,20,8], k = 3, candidates = 4\n\u8f93\u51fa\uff1a11\n\u89e3\u91ca\uff1a\u6211\u4eec\u603b\u5171\u96c7\u4f63 3 \u4f4d\u5de5\u4eba\u3002\u603b\u4ee3\u4ef7\u4e00\u5f00\u59cb\u4e3a 0 \u3002\n- \u7b2c\u4e00\u8f6e\u96c7\u4f63\uff0c\u6211\u4eec\u4ece [17,12,10,2,7,2,11,20,8] \u4e2d\u9009\u62e9\u3002\u6700\u5c0f\u4ee3\u4ef7\u662f 2 \uff0c\u6709\u4e24\u4f4d\u5de5\u4eba\uff0c\u6211\u4eec\u9009\u62e9\u4e0b\u6807\u66f4\u5c0f\u7684\u4e00\u4f4d\u5de5\u4eba\uff0c\u5373\u7b2c 3 \u4f4d\u5de5\u4eba\u3002\u603b\u4ee3\u4ef7\u662f 0 + 2 = 2 \u3002\n- \u7b2c\u4e8c\u8f6e\u96c7\u4f63\uff0c\u6211\u4eec\u4ece [17,12,10,7,2,11,20,8] \u4e2d\u9009\u62e9\u3002\u6700\u5c0f\u4ee3\u4ef7\u662f 2 \uff0c\u4e0b\u6807\u4e3a 4 \uff0c\u603b\u4ee3\u4ef7\u662f 2 + 2 = 4 \u3002\n- \u7b2c\u4e09\u8f6e\u96c7\u4f63\uff0c\u6211\u4eec\u4ece [17,12,10,7,11,20,8] \u4e2d\u9009\u62e9\uff0c\u6700\u5c0f\u4ee3\u4ef7\u662f 7 \uff0c\u4e0b\u6807\u4e3a 3 \uff0c\u603b\u4ee3\u4ef7\u662f 4 + 7 = 11 \u3002\u6ce8\u610f\u4e0b\u6807\u4e3a 3 \u7684\u5de5\u4eba\u540c\u65f6\u5728\u6700\u524d\u9762\u548c\u6700\u540e\u9762 4 \u4f4d\u5de5\u4eba\u4e2d\u3002\n\u603b\u96c7\u4f63\u4ee3\u4ef7\u662f 11 \u3002\n\n\u793a\u4f8b 2\uff1a\n\n\u8f93\u5165\uff1acosts = [1,2,4,1], k = 3, candidates = 3\n\u8f93\u51fa\uff1a4\n\u89e3\u91ca\uff1a\u6211\u4eec\u603b\u5171\u96c7\u4f63 3 \u4f4d\u5de5\u4eba\u3002\u603b\u4ee3\u4ef7\u4e00\u5f00\u59cb\u4e3a 0 \u3002\n- \u7b2c\u4e00\u8f6e\u96c7\u4f63\uff0c\u6211\u4eec\u4ece [1,2,4,1] \u4e2d\u9009\u62e9\u3002\u6700\u5c0f\u4ee3\u4ef7\u4e3a 1 \uff0c\u6709\u4e24\u4f4d\u5de5\u4eba\uff0c\u6211\u4eec\u9009\u62e9\u4e0b\u6807\u66f4\u5c0f\u7684\u4e00\u4f4d\u5de5\u4eba\uff0c\u5373\u7b2c 0 \u4f4d\u5de5\u4eba\uff0c\u603b\u4ee3\u4ef7\u662f 0 + 1 = 1 \u3002\u6ce8\u610f\uff0c\u4e0b\u6807\u4e3a 1 \u548c 2 \u7684\u5de5\u4eba\u540c\u65f6\u5728\u6700\u524d\u9762\u548c\u6700\u540e\u9762 3 \u4f4d\u5de5\u4eba\u4e2d\u3002\n- \u7b2c\u4e8c\u8f6e\u96c7\u4f63\uff0c\u6211\u4eec\u4ece [2,4,1] \u4e2d\u9009\u62e9\u3002\u6700\u5c0f\u4ee3\u4ef7\u4e3a 1 \uff0c\u4e0b\u6807\u4e3a 2 \uff0c\u603b\u4ee3\u4ef7\u662f 1 + 1 = 2 \u3002\n- \u7b2c\u4e09\u8f6e\u96c7\u4f63\uff0c\u5c11\u4e8e 3 \u4f4d\u5de5\u4eba\uff0c\u6211\u4eec\u4ece\u5269\u4f59\u5de5\u4eba [2,4] \u4e2d\u9009\u62e9\u3002\u6700\u5c0f\u4ee3\u4ef7\u662f 2 \uff0c\u4e0b\u6807\u4e3a 0 \u3002\u603b\u4ee3\u4ef7\u4e3a 2 + 2 = 4 \u3002\n\u603b\u96c7\u4f63\u4ee3\u4ef7\u662f 4 \u3002\n\n")),(0,r.kt)("p",null,"\u63d0\u793a\uff1a"),(0,r.kt)("p",null,"1 <= costs.length <= 105\n1 <= costs","[i]"," <= 105\n1 <= k, candidates <= costs.length"),(0,r.kt)("hr",null),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u4f7f\u7528\u4e24\u4e2a\u5c0f\u6839\u5806, \u7ef4\u62a4\u5de6\u53f3\u5019\u9009\u5143\u7d20;"),(0,r.kt)("li",{parentName:"ol"},"\u6bcf\u6b21\u53d6\u51fa\u6700\u5c0f\u503c\u540e, \u4ece\u5806\u4e2d\u5220\u9664, \u7ef4\u62a4\u65b0\u7684\u5019\u9009\u5143\u7d20;")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    long long totalCost(vector<int>& costs, int k, int candidates) {\n        priority_queue<int, vector<int>, greater<>> pq0, pq1;\n        int i = 0;\n        int j = costs.size() - 1;\n        long long ans = 0;\n\n        while (k--) {\n            /* \u4ece\u5de6\u53f3\u5206\u522b\u9009candidates\u4e2a\u5019\u9009 */\n            while (pq0.size() < candidates && i <= j) {\n                pq0.push(costs[i++]);\n            }\n            while (pq1.size() < candidates && i <= j) {\n                pq1.push(costs[j--]);\n            }\n            /* \u627e\u5230\u6700\u5c0f\u503c, \u76f8\u540c\u65f6\u9009\u4e0b\u6807\u66f4\u5c0f\u7684 */\n            int a = (pq0.size() > 0) ? pq0.top() : INT_MAX;\n            int b = (pq1.size() > 0) ? pq1.top() : INT_MAX;\n            if (a <= b) { /* \u7d2f\u52a0\u5f53\u524d\u7684\u6700\u5c0f\u4ee3\u4ef7 */\n                ans += a;\n                pq0.pop();\n            } else {\n                ans += b;\n                pq1.pop();\n            }\n        }\n        return ans;\n    }\n};\n")),(0,r.kt)("p",null,"\u6bd4\u8d5b\u65f6\u5019\u5199\u7684\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'class Solution {\npublic:\n    long long totalCost(vector<int>& costs, int k, int candidates) {\n        int n = costs.size();\n        long long ans = 0;\n        \n        auto cmp = [&](const auto &a, const auto &b) {\n            // \u9009\u51fa\u4ee3\u4ef7\u6700\u5c0f\u7684\u4e00\u4f4d\u5de5\u4eba\uff0c\u5982\u679c\u6709\u591a\u4f4d\u4ee3\u4ef7\u76f8\u540c\u4e14\u6700\u5c0f\u7684\u5de5\u4eba\uff0c\u9009\u62e9\u4e0b\u6807\u66f4\u5c0f\u7684\u4e00\u4f4d\u5de5\u4eba\n            if (a.second != b.second) {\n                return a.second < b.second;\n            }\n            return a.first < b.first;\n        };\n        multiset<pair<int, int>, decltype(cmp)> set_l(cmp); // <\u4e0b\u6807\uff0c\u503c>\n        multiset<pair<int, int>, decltype(cmp)> set_r(cmp);\n        unordered_set<int> visited;\n        \n        for (int i = 0; i < candidates; i++) {\n            set_l.insert({i, costs[i]});\n        }\n        for (int i = n-1; i >= n - candidates; i--) {\n            set_r.insert({i, costs[i]});\n        }\n        \n        // \u4e24\u4e2a candidates \u7684\u5934\n        int now_l = candidates - 1;\n        int now_r = n - candidates;\n        \n        for (int j = 0; j < k; j++) {\n            // cout << now_l << " " << now_r << endl;\n            \n            auto it_l = *set_l.begin();\n            auto it_r = *set_r.begin();\n            int flag = 0; // \u8bb0\u5f55\u54ea\u8fb9\u5220\u9664\u7684\uff0c0 \u5de6\u8fb9 1 \u53f3\u8fb9 2 \u4e24\u8fb9\u90fd\u5220\n            \n            // \u5f00\u59cb\u5220\n            if (it_l.second < it_r.second) { // \u5de6\u8fb9\u503c\u5c0f\n                ans += it_l.second;\n                visited.insert(it_l.first);\n                set_l.erase(it_l);\n                flag = 0;\n                // cout << "idx:" << it_l.first << " " << "val:" << it_l.second << endl;\n            } else if (it_l.second > it_r.second) { // \u53f3\u8fb9\u503c\u5c0f\n                ans += it_r.second;\n                visited.insert(it_r.first);\n                set_r.erase(it_r);\n                flag = 1;\n                // cout << "idx:" << it_r.first << " " << "val:" << it_r.second << endl;\n            } else { // \u4e24\u8fb9\u503c\u4e00\u6837\uff0c\u770b\u4e0b\u6807\n                if (it_l.first < it_r.first) { // \u5de6\u8fb9\u4e0b\u6807\u5c0f\n                    ans += it_l.second;\n                    visited.insert(it_l.first);\n                    set_l.erase(it_l);\n                    flag = 0;\n                    // cout << "idx:" << it_l.first << " " << "val:" << it_l.second << endl;\n                } else if (it_l.first > it_r.first) { // \u53f3\u8fb9\u4e0b\u6807\u5c0f\n                    ans += it_r.second;\n                    visited.insert(it_r.first);\n                    set_r.erase(it_r);\n                    flag = 1;\n                    // cout << "idx:" << it_r.first << " " << "val:" << it_r.second << endl;\n                } else { // \u4e24\u8fb9\u503c\u4e00\u6837\uff0c\u4e0b\u6807\u4e5f\u4e00\u6837\uff0c\u90fd\u8981\u5220\u9664\n                    ans += it_r.second;\n                    visited.insert(it_r.first);\n                    set_r.erase(it_r);\n                    set_l.erase(it_l);\n                    flag = 2;\n                    // cout << "both: idx:" << it_r.first << " " << "val:" << it_r.second << endl;\n                }\n            }\n            \n            // \u5220\u5b8c\u4e86\uff0c\u5f80\u91cc\u9762\u52a0\uff0c\u54ea\u8fb9\u6d88\u8017\u4e86\u6dfb\u54ea\u8fb9\uff0c\u52a0\u5b8c\u4e86\u5c31\u4e0d\u8981\u52a0\u4e86\n            if (flag == 0) {\n                int next_l = now_l + 1;\n                while (next_l < n && visited.count(next_l) == 1) {\n                    next_l++;\n                }\n                if (next_l < n) { // \u8fd8\u6ca1\u8d8a\u754c\n                    set_l.insert({next_l, costs[next_l]});\n                    now_l = next_l;\n                }\n            } else if (flag == 1) {\n                int next_r = now_r - 1;\n                while (next_r >= 0 && visited.count(next_r) == 1) {\n                    next_r++;\n                }\n                if (next_r >= 0) { // \u8fd8\u6ca1\u8d8a\u754c\n                    set_r.insert({next_r, costs[next_r]});\n                    now_r = next_r;\n                }\n            } else if (flag == 2) {\n                int next_l = now_l + 1;\n                while (next_l < n && visited.count(next_l) == 1) {\n                    next_l++;\n                }\n                if (next_l < n) { // \u8fd8\u6ca1\u8d8a\u754c\n                    set_l.insert({next_l, costs[next_l]});\n                    now_l = next_l;\n                }\n                int next_r = now_r - 1;\n                while (next_r >= 0 && visited.count(next_r) == 1) {\n                    next_r++;\n                }\n                if (next_r >= 0) { // \u8fd8\u6ca1\u8d8a\u754c\n                    set_r.insert({next_r, costs[next_r]});\n                    now_r = next_r;\n                }\n            }\n\n            // cout << "*******" << endl;\n        }\n        \n        return ans;\n        \n    }\n};\n')))}d.isMDXComponent=!0}}]);