"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[97270],{3905:(n,e,r)=>{r.d(e,{Zo:()=>p,kt:()=>f});var t=r(67294);function o(n,e,r){return e in n?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n}function a(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,t)}return r}function i(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?a(Object(r),!0).forEach((function(e){o(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function s(n,e){if(null==n)return{};var r,t,o=function(n,e){if(null==n)return{};var r,t,o={},a=Object.keys(n);for(t=0;t<a.length;t++)r=a[t],e.indexOf(r)>=0||(o[r]=n[r]);return o}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(t=0;t<a.length;t++)r=a[t],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(o[r]=n[r])}return o}var l=t.createContext({}),c=function(n){var e=t.useContext(l),r=e;return n&&(r="function"==typeof n?n(e):i(i({},e),n)),r},p=function(n){var e=c(n.components);return t.createElement(l.Provider,{value:e},n.children)},m="mdxType",d={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},u=t.forwardRef((function(n,e){var r=n.components,o=n.mdxType,a=n.originalType,l=n.parentName,p=s(n,["components","mdxType","originalType","parentName"]),m=c(r),u=o,f=m["".concat(l,".").concat(u)]||m[u]||d[u]||a;return r?t.createElement(f,i(i({ref:e},p),{},{components:r})):t.createElement(f,i({ref:e},p))}));function f(n,e){var r=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var a=r.length,i=new Array(a);i[0]=u;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s[m]="string"==typeof n?n:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},1216:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var t=r(87462),o=(r(67294),r(3905));const a={},i=void 0,s={unversionedId:"Algorithm/\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u8bb0\u5fc6\u5316\u641c\u7d22/<\u8bb0\u5fc6\u5316dfs-dp-\u62d3\u6251\u6392\u5e8f-bfs>-\u77e9\u9635\u4e2d\u7684\u6700\u957f\u9012\u589e\u8def\u5f84",id:"Algorithm/\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u8bb0\u5fc6\u5316\u641c\u7d22/<\u8bb0\u5fc6\u5316dfs-dp-\u62d3\u6251\u6392\u5e8f-bfs>-\u77e9\u9635\u4e2d\u7684\u6700\u957f\u9012\u589e\u8def\u5f84",title:"<\u8bb0\u5fc6\u5316dfs-dp-\u62d3\u6251\u6392\u5e8f-bfs>-\u77e9\u9635\u4e2d\u7684\u6700\u957f\u9012\u589e\u8def\u5f84",description:"\u9898\u76ee\uff1a329. \u77e9\u9635\u4e2d\u7684\u6700\u957f\u9012\u589e\u8def\u5f84",source:"@site/docs/Algorithm/3-\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u8bb0\u5fc6\u5316\u641c\u7d22/329-<\u8bb0\u5fc6\u5316dfs-dp-\u62d3\u6251\u6392\u5e8f-bfs>-\u77e9\u9635\u4e2d\u7684\u6700\u957f\u9012\u589e\u8def\u5f84.md",sourceDirName:"Algorithm/3-\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u8bb0\u5fc6\u5316\u641c\u7d22",slug:"/Algorithm/\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u8bb0\u5fc6\u5316\u641c\u7d22/<\u8bb0\u5fc6\u5316dfs-dp-\u62d3\u6251\u6392\u5e8f-bfs>-\u77e9\u9635\u4e2d\u7684\u6700\u957f\u9012\u589e\u8def\u5f84",permalink:"/docs/Algorithm/\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u8bb0\u5fc6\u5316\u641c\u7d22/<\u8bb0\u5fc6\u5316dfs-dp-\u62d3\u6251\u6392\u5e8f-bfs>-\u77e9\u9635\u4e2d\u7684\u6700\u957f\u9012\u589e\u8def\u5f84",draft:!1,tags:[],version:"current",sidebarPosition:329,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<\u6a21\u7248\u9898-\u8bb0\u5fc6\u5316dfs>-\u5355\u8bcd\u62c6\u5206II",permalink:"/docs/Algorithm/\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u8bb0\u5fc6\u5316\u641c\u7d22/<\u6a21\u7248\u9898-\u8bb0\u5fc6\u5316dfs>-\u5355\u8bcd\u62c6\u5206II"},next:{title:"<\u8bb0\u5fc6\u5316dfs-\u4f4d\u8fd0\u7b97+\u8d2a\u5fc3>-\u6574\u6570\u66ff\u6362",permalink:"/docs/Algorithm/\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u8bb0\u5fc6\u5316\u641c\u7d22/<\u8bb0\u5fc6\u5316dfs-\u4f4d\u8fd0\u7b97+\u8d2a\u5fc3>-\u6574\u6570\u66ff\u6362"}},l={},c=[{value:"\u65b9\u6cd5\u4e00\uff1a\u8bb0\u5fc6\u5316 dfs",id:"\u65b9\u6cd5\u4e00\u8bb0\u5fc6\u5316-dfs",level:2},{value:"\u65b9\u6cd5\u4e8c\uff1a\u62d3\u6251\u6392\u5e8f",id:"\u65b9\u6cd5\u4e8c\u62d3\u6251\u6392\u5e8f",level:2},{value:"\u65b9\u6cd5\u4e09\uff1abfs",id:"\u65b9\u6cd5\u4e09bfs",level:2}],p={toc:c};function m(n){let{components:e,...r}=n;return(0,o.kt)("wrapper",(0,t.Z)({},p,r,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u9898\u76ee\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/longest-increasing-path-in-a-matrix/"},"329. \u77e9\u9635\u4e2d\u7684\u6700\u957f\u9012\u589e\u8def\u5f84")),(0,o.kt)("p",null,"\u9898\u89e3\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/longest-increasing-path-in-a-matrix/solution/tong-ge-lai-shua-ti-la-yi-ti-si-jie-bfs-agawl/"},"https://leetcode.cn/problems/longest-increasing-path-in-a-matrix/solution/tong-ge-lai-shua-ti-la-yi-ti-si-jie-bfs-agawl/")),(0,o.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a ",(0,o.kt)("inlineCode",{parentName:"p"},"m x n")," \u6574\u6570\u77e9\u9635 ",(0,o.kt)("inlineCode",{parentName:"p"},"matrix")," \uff0c\u627e\u51fa\u5176\u4e2d ",(0,o.kt)("strong",{parentName:"p"},"\u6700\u957f\u9012\u589e\u8def\u5f84")," \u7684\u957f\u5ea6\u3002"),(0,o.kt)("p",null,"\u5bf9\u4e8e\u6bcf\u4e2a\u5355\u5143\u683c\uff0c\u4f60\u53ef\u4ee5\u5f80\u4e0a\uff0c\u4e0b\uff0c\u5de6\uff0c\u53f3\u56db\u4e2a\u65b9\u5411\u79fb\u52a8\u3002 \u4f60 ",(0,o.kt)("strong",{parentName:"p"},"\u4e0d\u80fd")," \u5728 ",(0,o.kt)("strong",{parentName:"p"},"\u5bf9\u89d2\u7ebf")," \u65b9\u5411\u4e0a\u79fb\u52a8\u6216\u79fb\u52a8\u5230 ",(0,o.kt)("strong",{parentName:"p"},"\u8fb9\u754c\u5916"),"\uff08\u5373\u4e0d\u5141\u8bb8\u73af\u7ed5\uff09\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1\uff1a")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/01/05/grid1.jpg",alt:"img"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1amatrix = [[9,9,4],[6,6,8],[2,1,1]]\n\u8f93\u51fa\uff1a4 \n\u89e3\u91ca\uff1a\u6700\u957f\u9012\u589e\u8def\u5f84\u4e3a [1, 2, 6, 9]\u3002\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 2\uff1a")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/01/27/tmp-grid.jpg",alt:"img"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1amatrix = [[3,4,5],[3,2,6],[2,2,1]]\n\u8f93\u51fa\uff1a4 \n\u89e3\u91ca\uff1a\u6700\u957f\u9012\u589e\u8def\u5f84\u662f [3, 4, 5, 6]\u3002\u6ce8\u610f\u4e0d\u5141\u8bb8\u5728\u5bf9\u89d2\u7ebf\u65b9\u5411\u4e0a\u79fb\u52a8\u3002\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 3\uff1a")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1amatrix = [[1]]\n\u8f93\u51fa\uff1a1\n")),(0,o.kt)("p",null,"\u63d0\u793a\uff1a"),(0,o.kt)("p",null,"m == matrix.length\nn == matrix","[i]",".length\n1 <= m, n <= 200\n",(0,o.kt)("inlineCode",{parentName:"p"},"0 <= matrix[i][j] <= 231 - 1")),(0,o.kt)("h2",{id:"\u65b9\u6cd5\u4e00\u8bb0\u5fc6\u5316-dfs"},"\u65b9\u6cd5\u4e00\uff1a\u8bb0\u5fc6\u5316 dfs"),(0,o.kt)("p",null,"dfs \u8fd4\u56de\u4ece ","[r,c]"," \u51fa\u53d1\u7684\u6700\u957f\u9012\u589e\u8def\u5f84\u957f\u5ea6"),(0,o.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,o.kt)("inlineCode",{parentName:"p"},"O(mn)")),(0,o.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,o.kt)("inlineCode",{parentName:"p"},"O(mn)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    int rows;\n    int cols;\n    vector<vector<int>> matrix;\n    vector<vector<int>> memo;\n    vector<pair<int, int>> directions = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};\n\n    // \u8fd4\u56de\u4ece [r,c] \u51fa\u53d1\u7684\u6700\u957f\u9012\u589e\u8def\u5f84\u957f\u5ea6\n    int dfs(int r, int c) {\n        if (memo[r][c] != -1) return memo[r][c];\n\n        int res = 1;\n        for (auto& [dr, dc] : directions) {\n            int nr = r + dr;\n            int nc = c + dc;\n            if (0 <= nr && nr < rows && 0 <= nc && nc < cols) {\n                if (matrix[nr][nc] > matrix[r][c]) {\n                    res = max(res, dfs(nr, nc) + 1);\n                }\n            }\n        }\n        memo[r][c] = res;\n        return memo[r][c];\n    }\n\n    int longestIncreasingPath(vector<vector<int>>& matrix) {\n        rows = matrix.size();\n        cols = matrix[0].size();\n        memo.resize(rows, vector<int>(cols, -1));\n        this->matrix = matrix;\n\n        int ans = INT_MIN;\n        for (int r = 0; r < rows; r++) {\n            for (int c = 0; c < cols; c++) {\n                ans = max(ans, dfs(r, c));\n            }\n        }\n        return ans;\n    }\n};\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n\n        rows = len(matrix)\n        cols = len(matrix[0])\n        memo = [[-1 for _ in range(cols)] for _ in range(rows)]\n        # \u8bb0\u5f55\u4ece[r][c]\u5f00\u59cb\u8d70\u7684\u6700\u957f\u8ddd\u79bb\n        # \u5982\u679c\u4e0b\u6b21\u53c8\u8d70\u5230\u4e86[r][c]\uff0c\u76f4\u63a5\u7528\u5b83\u7684\u7ed3\u679c\n\n        def dfs(row, col):\n            if memo[row][col] != -1:\n                return memo[row][col]\n            memo[row][col] = 1\n            for dr, dc in ((0, 1), (1, 0), (-1, 0), (0, -1)):\n                nr = row + dr\n                nc = col + dc\n                if 0<=nr<rows and 0<=nc<cols and matrix[nr][nc] > matrix[row][col]:\n                    memo[row][col] = max(memo[row][col], dfs(nr, nc)+1)\n            return memo[row][col]\n\n        ans = float("-inf")  \n        for r in range(rows):\n            for c in range(cols):\n                ans = max(ans, dfs(r, c))\n        return ans\n')),(0,o.kt)("h2",{id:"\u65b9\u6cd5\u4e8c\u62d3\u6251\u6392\u5e8f"},"\u65b9\u6cd5\u4e8c\uff1a\u62d3\u6251\u6392\u5e8f"),(0,o.kt)("p",null,"\u62d3\u6251\u6392\u5e8f\uff1a288 ms 19.6 MB"),(0,o.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,o.kt)("inlineCode",{parentName:"p"},"O(mn)")),(0,o.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(mn)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n\n        rows = len(matrix)\n        cols = len(matrix[0])\n        adj_list = collections.defaultdict(list) # \u90bb\u63a5\u8868\n        in_degrees = [[0 for _ in range(cols)] for _ in range(rows)] # \u5165\u5ea6\n\n        for r in range(rows):\n            for c in range(cols):\n                for dr, dc in ((0,1),(1,0),(0,-1),(-1,0)):\n                    nr = r + dr\n                    nc = c + dc\n                    if 0 <= nr < rows and 0 <= nc < cols:\n                        if matrix[nr][nc] < matrix[r][c]:\n                            # \u56e0\u4e3a\u8981\u5165\u5ea6\uff0c\u6240\u4ee5\u8981\u5c0f\u4e8e\n                            in_degrees[r][c] += 1\n                        elif matrix[nr][nc] > matrix[r][c]:\n                            # \u65b9\u5411\u4e3a\u4ece\u5c0f\u6307\u5411\u5927\uff0c\u6240\u4ee5\u8981\u5927\u4e8e\n                            adj_list[(r, c)].append((nr, nc))\n        # print(adj_list)\n        # print(in_degrees)\n\n        # \u4ece\u5165\u5ea6\u4e3a0\u5f00\u59cb\u627e\uff0c\u624d\u80fd\u627e\u5230\u6700\u957f\u7684\n        queue = collections.deque()\n        for r in range(rows):\n            for c in range(cols):\n                if in_degrees[r][c] == 0:\n                    queue.append((r, c))\n        # print(queue)\n\n        step = 0\n        while queue:\n            # \u8fd9\u4e2a\u8ddf\u8bfe\u7a0b\u8868I\u90a3\u4e2a\u9898\u4e0d\u4e00\u6837\uff0c\u9700\u8981\u4e00\u5c42\u4e00\u5c42\u7684\u51fa\u5217\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u4e00\u4e2a\u7684\u51fa\n            sz = len(queue)\n            for _ in range(sz):\n                r, c = queue.popleft()\n                for nr, nc in adj_list[(r, c)]:\n                    in_degrees[nr][nc] -= 1\n                    if in_degrees[nr][nc] == 0:\n                        # \u5165\u5ea6\u4e3a0\u7684\u624d\u80fd\u5165\u961f\u5217\uff0c\u56e0\u4e3a\u4e0d\u4e3a0\u7684\u53ef\u80fd\u4f1a\u88ab\u5176\u4ed6\u7684\u8d70\u51fa\u6700\u957f\u8ddd\u79bb\n                        # \u96be\u70b9\u5728\u4e8e\u8bfe\u7a0b\u8868\u90a3\u9898\u660e\u786e\u544a\u77e5\u4e86\u4f9d\u8d56\u5173\u7cfb\uff0c\u8fd9\u9053\u9898\u9700\u8981\u60f3\u660e\u767d\u4e3a\u4ec0\u4e48\u6cbf\u7740\u5165\u5ea6\u4e3a0\u7684\u8d70\n                        queue.append((nr, nc))\n            step += 1\n        return step\n")),(0,o.kt)("h2",{id:"\u65b9\u6cd5\u4e09bfs"},"\u65b9\u6cd5\u4e09\uff1abfs"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"bfs memo\u8bb0\u5f55 \u8d70\u5230","[r][c]","\u7528\u4e86\u51e0\u6b65")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"dfs memo\u8bb0\u5f55 \u4ece","[r][c]","\u5f00\u59cb\u8d70\u5230\u7ec8\u70b9\u7684\u6700\u957f\u8ddd\u79bb")),(0,o.kt)("p",null,"\u8bb0\u5fc6\u5316bfs: 1720 ms 15.6 MB"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n\n        rows = len(matrix)\n        cols = len(matrix[0])\n        memo = [[-1 for _ in range(cols)] for _ in range(rows)]\n        # \u8bb0\u5f55\u4e0a\u6b21\u8d70\u5230[r][c]\u7684\u65f6\u5019\u7528\u4e86\u51e0\u6b65\uff0c\u5982\u679c\u8fd9\u6b21\u53c8\u8d70\u5230[r][c]\uff0c\n        # \u8fd9\u6b21\u8d70\u5230[r][c]\u7684\u6b65\u6570\u6bd4\u4e0a\u6b21\u8fd8\u8981\u5c11\uff0c\u90a3\u5c31\u6ca1\u5fc5\u8981\u518d\u8d70\u4e86\uff0c\n        # \u5982\u679c\u8fd9\u6b21\u8d70\u7684\u6b65\u6570\u591a\uff0c\u5c31\u66f4\u65b0\n\n        def bfs(row, col):\n            queue = collections.deque()\n            queue.append((row, col, 1))\n            while queue:\n                r, c, step = queue.popleft()\n                for dr, dc in ((0, 1), (1, 0), (-1, 0), (0, -1)):\n                    nr = r + dr\n                    nc = c + dc\n                    if 0<=nr<rows and 0<=nc<cols and matrix[nr][nc]>matrix[r][c]:\n                        if step+1 <= memo[nr][nc]:\n                            continue\n                        queue.append((nr, nc, step+1))\n                        memo[nr][nc] = step + 1\n            return step\n\n        ans = float("-inf")\n        for r in range(rows):\n            for c in range(cols):\n                ans = max(ans, bfs(r, c))\n        return ans\n')))}m.isMDXComponent=!0}}]);