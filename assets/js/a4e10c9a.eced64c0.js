"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[88051],{3905:(n,e,t)=>{t.d(e,{Zo:()=>s,kt:()=>c});var r=t(67294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function _(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function p(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?_(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):_(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},_=Object.keys(n);for(r=0;r<_.length;r++)t=_[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var _=Object.getOwnPropertySymbols(n);for(r=0;r<_.length;r++)t=_[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var o=r.createContext({}),l=function(n){var e=r.useContext(o),t=e;return n&&(t="function"==typeof n?n(e):p(p({},e),n)),t},s=function(n){var e=l(n.components);return r.createElement(o.Provider,{value:e},n.children)},u="mdxType",d={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,_=n.originalType,o=n.parentName,s=a(n,["components","mdxType","originalType","parentName"]),u=l(t),m=i,c=u["".concat(o,".").concat(m)]||u[m]||d[m]||_;return t?r.createElement(c,p(p({ref:e},s),{},{components:t})):r.createElement(c,p({ref:e},s))}));function c(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var _=t.length,p=new Array(_);p[0]=m;var a={};for(var o in e)hasOwnProperty.call(e,o)&&(a[o]=e[o]);a.originalType=n,a[u]="string"==typeof n?n:i,p[1]=a;for(var l=2;l<_;l++)p[l]=t[l];return r.createElement.apply(null,p)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},99681:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>p,default:()=>u,frontMatter:()=>_,metadata:()=>a,toc:()=>l});var r=t(87462),i=(t(67294),t(3905));const _={},p="ALU \u6a21\u5757\u548c branch \u6a21\u5757",a={unversionedId:"Skill/ASM/RISC-V/ALU\u6a21\u5757&branch\u6a21\u5757",id:"Skill/ASM/RISC-V/ALU\u6a21\u5757&branch\u6a21\u5757",title:"ALU \u6a21\u5757\u548c branch \u6a21\u5757",description:"\u6765\u6e90\uff1ahttps://www.icfedu.cn/?s=RISC-V+ALU%E6%A8%A1",source:"@site/docs/Skill/ASM/RISC-V/5-ALU\u6a21\u5757&branch\u6a21\u5757.md",sourceDirName:"Skill/ASM/RISC-V",slug:"/Skill/ASM/RISC-V/ALU\u6a21\u5757&branch\u6a21\u5757",permalink:"/docs/Skill/ASM/RISC-V/ALU\u6a21\u5757&branch\u6a21\u5757",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"skillSidebar",previous:{title:"\u6d41\u6c34\u7ebf & \u786c\u4ef6\u6a21\u5757 & \u8bd1\u7801\u6a21\u5757",permalink:"/docs/Skill/ASM/RISC-V/\u6d41\u6c34\u7ebf&\u786c\u4ef6\u6a21\u5757&\u8bd1\u7801\u6a21\u5757"},next:{title:"LSU & SRAM & GPIO\u6a21\u5757",permalink:"/docs/Skill/ASM/RISC-V/LOAD&STORE-UNIT"}},o={},l=[{value:"\u4e00\u3001ALU\u6a21\u5757",id:"\u4e00alu\u6a21\u5757",level:2},{value:"ALU \u6a21\u5757\u4ee3\u7801",id:"alu-\u6a21\u5757\u4ee3\u7801",level:3},{value:"\u6307\u4ee4\u7684\u64cd\u4f5c",id:"\u6307\u4ee4\u7684\u64cd\u4f5c",level:3},{value:"\u4e8c\u3001branch\u6a21\u5757",id:"\u4e8cbranch\u6a21\u5757",level:2},{value:"branch \u6a21\u5757\u4ee3\u7801",id:"branch-\u6a21\u5757\u4ee3\u7801",level:3},{value:"\u6307\u4ee4\u64cd\u4f5c",id:"\u6307\u4ee4\u64cd\u4f5c",level:3}],s={toc:l};function u(n){let{components:e,..._}=n;return(0,i.kt)("wrapper",(0,r.Z)({},s,_,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"alu-\u6a21\u5757\u548c-branch-\u6a21\u5757"},"ALU \u6a21\u5757\u548c branch \u6a21\u5757"),(0,i.kt)("p",null,"\u6765\u6e90\uff1a",(0,i.kt)("a",{parentName:"p",href:"https://www.icfedu.cn/?s=RISC-V+ALU%E6%A8%A1"},"https://www.icfedu.cn/?s=RISC-V+ALU%E6%A8%A1")),(0,i.kt)("h2",{id:"\u4e00alu\u6a21\u5757"},"\u4e00\u3001ALU\u6a21\u5757"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"RISC-V \u7684ALU \u6a21\u5757\u7528\u6765\u5904\u7406\u6307\u4ee4\u6267\u884c\u90e8\u5206"),"\u3002\u8fd9\u4e2a\u6a21\u5757\u5c06\u4e4b\u524dITCM\u8bfb\u53d6\u7684\u6307\u4ee4\uff0c\u8bd1\u7801\u6a21\u5757\u5206\u79bb\u51fa\u6765\u7684\u76f8\u5173\u4fe1\u606f\u8fdb\u884c\u5904\u7406\u3002\u5904\u7406\u8fc7\u7a0b\u5305\u62ec\u5bf9",(0,i.kt)("strong",{parentName:"p"},"32\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\u7684\u8d4b\u503c\uff0c\u5bf9memory\u7684\u8bbf\u5b58\uff0c\u5bf9pc \u6307\u9488\u7684\u66f4\u6539"),"\u7b49\u7b49\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"RISC-V cpu \u67b6\u6784\uff1a")),(0,i.kt)("p",null,(0,i.kt)("img",{src:t(526).Z,width:"1329",height:"781"})),(0,i.kt)("h3",{id:"alu-\u6a21\u5757\u4ee3\u7801"},"ALU \u6a21\u5757\u4ee3\u7801"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"module exu_alu (\ninput sys_clk,                // \u7cfb\u7edf\u65f6\u949f\ninput rst_n,\n\n\ninput [ 4: 0 ] i_rd_idx,      // \u6c47\u7f16\u6307\u4ee4\u4e2drd \u6240\u6307\u5b9a\u768432\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\u4e2d\u7684\u4e00\u4e2a\ninput [ 31: 0 ] i_rs1_val,    // \u6c47\u7f16\u6307\u4ee4\u4e2drs1 \u6307\u5b9a\u7684\u5bc4\u5b58\u5668 \u503c\n\ninput [ 31: 0 ] i_PC,         // \u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u8fd9\u6761\u6307\u4ee4\u7684PC\n\ninput i_OP_IMM,               // op_imm \u6307\u4ee4\u7ec4\ninput i_LOAD,                 // load \u6307\u4ee4\u7ec4\ninput [ 8: 0 ] i_opimm_instr, // op_imm \u6307\u4ee4\u7ec4 \u6210\u5458\uff1aSRAI, SRLI, SLLI, ANDI, ORI, XORI, SLTIU, SLTI, ADDI\ninput [ 31: 0 ] i_I_imm,      // I-type \u7acb\u5373\u6570\n\ninput i_OP, // op \u6307\u4ee4\u7ec4\ninput [ 9: 0 ] i_op_instr,    // op \u6307\u4ee4\u7ec4 \u6210\u5458\uff1aSRA, SUB, SRL, SLL, XOR, OR, AND, SLTU, SLT, ADD\ninput [ 31: 0 ] i_rs2_val,    // \u6c47\u7f16\u6307\u4ee4\u4e2drs2 \u6307\u5b9a\u7684\u5bc4\u5b58\u5668 \u503c\n\ninput i_LUI,                  // LUI \u6307\u4ee4\ninput i_AUIPC,                // AUIPC \u6307\u4ee4\ninput [ 31: 0 ] i_U_imm,      // U-type \u7acb\u5373\u6570\n\ninput i_JAL,                  // JAL \u6307\u4ee4\ninput i_JALR,                 // JALR \u6307\u4ee4\ninput [ 31: 0 ] i_J_imm,      // J-type \u7acb\u5373\u6570\n\ninput i_STORE,                // STORE \u6307\u4ee4\ninput [ 31: 0 ] i_S_imm,      // s-type \u7acb\u5373\u6570\n//===============================================================================\noutput o_J_vld,               // \u8df3\u8f6c\u6709\u6548\noutput [ 31: 0 ] o_J_PC,      // \u8df3\u8f6c\u5230\u65b0\u7684PC\n//output addition result to LOAD/STORE unit \noutput [ 31: 0 ] o_D_PC,      // \u8df3\u8f6c memroy \u8bbf\u5b58 \u7684 PC\n\noutput o_rd_wen,              // \u5199\u56de enable\noutput [ 4: 0 ] o_wb_rd_idx,  // \u5199\u56de rd \u5bc4\u5b58\u5668\noutput reg [ 31: 0 ] o_wb_data// \u5199\u56de \u6570\u636e\u503c\n\n);\n\n//===============================================================================\n//reg [31:0] wb_data_opimm;\n//reg [31:0] wb_data_op;\n//reg [ 31: 0 ] wb_data_LUI;\n//reg [ 31: 0 ] wb_data_AUIPC;\n\nwire [ 31: 0 ] opd1 = ( i_AUIPC | i_JAL ) ? i_PC : i_rs1_val;\n\nwire [ 31: 0 ] opd2 = ( { 32{ i_OP_IMM | i_JALR | i_LOAD} } & i_I_imm ) |\n( { 32{ i_OP } } & i_rs2_val ) |\n( { 32{ i_JAL } } & i_J_imm ) |\n( { 32{ i_AUIPC } } & i_U_imm ) |\n( { 32{ i_STORE } } & i_S_imm ) ; //the second operand;\n\n//                         rv32i_slti        rv32i_slt\nwire [ 33: 0 ] ext_opd1 = ({i_opimm_instr[1],i_op_instr[1]} != 0) ? {opd1[31],opd1[31],opd1} : {2'b00, opd1};\nwire [ 33: 0 ] ext_opd2 = ({i_opimm_instr[1],i_op_instr[1]} != 0) ? {opd2[31],opd2[31],opd2} : {2'b00, opd2};\n\nwire [ 33: 0 ] comp_opd2 = ~ext_opd2 + 32'b1; //2's complement\n\n//                              sub             sltiu, slti       sltu, slt\nwire [ 33: 0 ] comp_ext_opd2 = ({i_op_instr[8], i_opimm_instr[2:1],i_op_instr[2:1]} != 0) ? comp_opd2 : ext_opd2;\n\nwire [ 33: 0 ] add_res = ext_opd1 + comp_ext_opd2;\n\nwire [ 31: 0 ] xor_res = i_rs1_val ^ opd2;\nwire [ 31: 0 ] or_res = i_rs1_val | opd2;\nwire [ 31: 0 ] and_res = i_rs1_val & opd2;\nwire [ 31: 0 ] sll_res = i_rs1_val << opd2[ 4: 0 ];\nwire [ 31: 0 ] srl_res = i_rs1_val >> opd2[ 4: 0 ];\n//===============================================================================\n// shift right arithmetic immediate x[rd] = ( x[rs1] >>s shamt)\nwire [ 31: 0 ] eff_mask = ( ~( 32'b0 ) ) >> opd2[ 4: 0 ];\nwire [ 31: 0 ] sra_res = ( srl_res & eff_mask ) | ( { 32{ i_rs1_val[ 31 ] } } & ( ~eff_mask ) );\n\n//wire [ 31: 0 ] sra_res = i_rs1_val >>> opd2[ 4: 0 ];\n\n//===============================================================================\nalways@( * )\nbegin\n    o_wb_data <= 32'b0;\n/*\nassign o_opimm_instr = { rv32i_srai, rv32i_srli, rv32i_slli,\nrv32i_andi, rv32i_ori, rv32i_xori,\nrv32i_sltiu, rv32i_slti, rv32i_addi };\n*/\n    if ( i_OP_IMM )\n    case ( i_opimm_instr ) //one hot decoder and execute\n    9'h001: //rv32i_addi\n        o_wb_data <= add_res[31:0];\n    9'h002: //rv32i_slti\n        o_wb_data <= add_res[ 33 ] ? 32'b1 : 32'b0;\n    9'h004: //rv32i_sltiu\n        o_wb_data <= add_res[ 33 ] ? 32'b1 : 32'b0;\n    9'h008: //xori\n        o_wb_data <= xor_res;\n    9'h010: //rv32i_ori\n        o_wb_data <= or_res;\n    9'h020: //rv32i_andi\n        o_wb_data <= and_res;\n    9'h040: //rv32i_slli\n        o_wb_data <= sll_res;\n    9'h080: //rv32i_srli\n        o_wb_data <= srl_res;\n    9'h100: //rv32i_srai\n        o_wb_data <= sra_res;\n    default: ;\n    endcase\n\n/*\nassign o_op_instr = { rv32i_sra, rv32i_sub, rv32i_srl,\nrv32i_sll, rv32i_xor, rv32i_or,\nrv32i_and, rv32i_sltu, rv32i_slt,\nrv32i_add };\n*/ \n    if ( i_OP )\n    case ( i_op_instr ) //one hot decoder and execute\n    10'h001: //rv32i_add\n        o_wb_data <= add_res[31:0];\n    10'h002: //rv32i_slt\n        o_wb_data <= add_res[ 33 ] ? 32'b1 : 32'b0;\n    10'h004: //rv32i_sltu\n        o_wb_data <= add_res[ 33 ] ? 32'b1 : 32'b0;\n    10'h008: //rv32i_and\n        o_wb_data <= and_res;\n    10'h010: //rv32i_or\n        o_wb_data <= or_res;\n    10'h020: //rv32i_xor\n        o_wb_data <= xor_res;\n    10'h040: //rv32i_sll\n        o_wb_data <= sll_res;\n    10'h080: //rv32i_srl\n        o_wb_data <= srl_res;\n    10'h100: //rv32i_sub\n        o_wb_data <= add_res[31:0];\n    10'h200: //rv32i_sra\n        o_wb_data <= sra_res;\n    default: ;\nendcase\n\n    if ( i_LUI )\n         o_wb_data <= i_U_imm;\n\n    if ( i_AUIPC )\n         o_wb_data <= add_res[31:0];\n\n\n    if ( i_JAL | i_JALR )\n         o_wb_data <= i_PC + 4;\n\nend\n//===============================================================================\n\n// wire rv32i_sub =o_op_instr[8];\n// wire rv32i_sra =o_op_instr[9];\n\nassign o_wb_rd_idx = i_rd_idx;\nassign o_rd_wen = i_OP_IMM | i_OP | i_LUI | i_AUIPC | i_JAL | i_JALR;\n\nassign o_D_PC = add_res[31:0];\nassign o_J_PC = add_res[31:0];\n\nassign o_J_vld = i_JAL | i_JALR;\n//===============================================================================\n\nendmodule\n")),(0,i.kt)("p",null,"\u7aef\u53e3\u63cf\u8ff0\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"input sys_clk,                   // \u7cfb\u7edf\u65f6\u949f\ninput rst_n,\n\n\ninput [ 4: 0 ] i_rd_idx,         // \u6c47\u7f16\u6307\u4ee4\u4e2drd \u6240\u6307\u5b9a\u768432\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\u4e2d\u7684\u4e00\u4e2a\ninput [ 31: 0 ] i_rs1_val,       // \u6c47\u7f16\u6307\u4ee4\u4e2drs1 \u6307\u5b9a\u7684\u5bc4\u5b58\u5668 \u503c\n\ninput [ 31: 0 ] i_PC,            // \u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u8fd9\u6761\u6307\u4ee4\u7684PC\n\ninput i_OP_IMM,                  // op_imm \u6307\u4ee4\u7ec4\ninput i_LOAD,                    // load \u6307\u4ee4\u7ec4\ninput [ 8: 0 ] i_opimm_instr,    // op_imm \u6307\u4ee4\u7ec4 \u6210\u5458\uff1aSRAI, SRLI, SLLI, ANDI, ORI, XORI, SLTIU, SLTI, ADDI\ninput [ 31: 0 ] i_I_imm,         // I-type \u7acb\u5373\u6570\n\ninput i_OP, // op \u6307\u4ee4\u7ec4\ninput [ 9: 0 ] i_op_instr,       // op \u6307\u4ee4\u7ec4 \u6210\u5458\uff1aSRA, SUB, SRL, SLL, XOR, OR, AND, SLTU, SLT, ADD\ninput [ 31: 0 ] i_rs2_val,       // \u6c47\u7f16\u6307\u4ee4\u4e2drs2 \u6307\u5b9a\u7684\u5bc4\u5b58\u5668 \u503c\n\ninput i_LUI,                     // LUI \u6307\u4ee4\ninput i_AUIPC,                   // AUIPC \u6307\u4ee4\ninput [ 31: 0 ] i_U_imm,         // U-type \u7acb\u5373\u6570\n\ninput i_JAL,                     // JAL \u6307\u4ee4\ninput i_JALR,                    // JALR \u6307\u4ee4\ninput [ 31: 0 ] i_J_imm,         // J-type \u7acb\u5373\u6570\n\ninput i_STORE,                   // STORE \u6307\u4ee4\ninput [ 31: 0 ] i_S_imm,         // s-type \u7acb\u5373\u6570\n//===============================================================================\noutput o_J_vld,                  // \u8df3\u8f6c\u6709\u6548\noutput [ 31: 0 ] o_J_PC,         // \u8df3\u8f6c\u5230\u65b0\u7684PC\n//output addition result to LOAD/STORE unit \noutput [ 31: 0 ] o_D_PC,         // \u8df3\u8f6c memroy \u8bbf\u5b58 \u7684 PC\n\noutput o_rd_wen,                 // \u5199\u56de enable\noutput [ 4: 0 ] o_wb_rd_idx,     // \u5199\u56de rd \u5bc4\u5b58\u5668\noutput reg [ 31: 0 ] o_wb_data   // \u5199\u56de \u6570\u636e\u503c\n")),(0,i.kt)("h3",{id:"\u6307\u4ee4\u7684\u64cd\u4f5c"},"\u6307\u4ee4\u7684\u64cd\u4f5c"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6240\u6709RISC-V \u6307\u4ee4\u7684\u64cd\u4f5c\uff08\u6267\u884c\uff09\uff0c\u90fd\u662f\u5c0f\u4e8e\u7b49\u4e8e\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684"),"\u3002 \uff08\u5927\u4e8e\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u6307\u4ee4\uff0c\u4e00\u76f4\u5728riscv \u6807\u51c6\u4e2d\u8fdb\u884c\u8ba8\u8bba\uff0c\u76ee\u524d\u6ca1\u6709\u5b9e\u65bd\u3002\uff09"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u4e3e\u4f8b"),"\uff1a"),(0,i.kt)("p",null,"nop \u6307\u4ee4, ",(0,i.kt)("inlineCode",{parentName:"p"},"addi x0, x0, 0")," \u4e24\u4e2a\u64cd\u4f5c\u6570"),(0,i.kt)("p",null,"load \u6307\u4ee4, ",(0,i.kt)("inlineCode",{parentName:"p"},"lw rd, offset(rs1)")," \u4e24\u4e2a\u64cd\u4f5c\u6570"),(0,i.kt)("p",null,"jal \u6307\u4ee4, ",(0,i.kt)("inlineCode",{parentName:"p"},"jal rd, offset x[rd] = pc + 4; pc = pc + sext(offset)"),", \u53ea\u6709\u4e00\u4e2a\u64cd\u4f5c\u6570\uff0c"),(0,i.kt)("p",null,"addi \u6307\u4ee4, ",(0,i.kt)("inlineCode",{parentName:"p"},"addi rd, rs1, imm x[rd] = x[rs1] + imm")," \u53ea\u6709\u4e24\u4e2a\u64cd\u4f5c\u6570\u3002"),(0,i.kt)("p",null,"\u6240\u4ee5\u5728ALU \u64cd\u4f5c\u4e2d\uff1a\u6700\u591a\u53ea\u6709\u4e24\u4e2a\u64cd\u4f5c\u6570\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"wire [ 31: 0 ] opd1 = ( i_AUIPC | i_JAL ) ? i_PC : i_rs1_val;\n\nwire [ 31: 0 ] opd2 = ( { 32{ i_OP_IMM | i_JALR | i_LOAD} } & i_I_imm ) |\n                   ( { 32{ i_OP } } & i_rs2_val ) |\n                   ( { 32{ i_JAL } } & i_J_imm ) |\n                   ( { 32{ i_AUIPC } } & i_U_imm ) |\n                   ( { 32{ i_STORE } } & i_S_imm ) ; //the second operand;\n")),(0,i.kt)("p",null,"\u5728opd1 \uff08\u64cd\u4f5c\u65701\uff09 \u4e2d \uff0c \u6574\u7406\u4e00\u4e0bRISC-V \u6307\u4ee4\u96c6\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0 \u53ea\u6709 \u5728 \uff08AUIPC , JAL) \u65f6\uff0c \u4f1a\u4f7f\u7528PC\uff0c \u5176\u4ed6\u60c5\u51b5\uff08\u5176\u4ed6\u6307\u4ee4\uff09 \u53ea\u80fd\u662frs1 \u7684\u503c\u3002"),(0,i.kt)("p",null,"\u5728opd2 \uff08\u64cd\u4f5c\u65702\uff09\u4e2d :"),(0,i.kt)("p",null,"\u5f53\u6307\u4ee4\u4e3a OP_IMM,\u6307\u4ee4\u7ec4\uff0c JALR, LOAD \u6307\u4ee4\u7ec4\u65f6\uff0c \u4f1a\u4f7f\u7528 I_imm; "),(0,i.kt)("p",null,"\u5f53\u6307\u4ee4\u4e3a OP\u6307\u4ee4\u7ec4\uff0c\u4f1a\u4f7f\u7528 rs2_val; "),(0,i.kt)("p",null,"\u5f53\u6307\u4ee4\u4e3a JAL\u6307\u4ee4\uff0c  \u4f1a\u4f7f\u7528 J_imm; "),(0,i.kt)("p",null,"\u5f53\u6307\u4ee4\u4e3a AUIPC\u6307\u4ee4\uff0c\u4f1a\u4f7f\u7528 U_imm; "),(0,i.kt)("p",null,"\u5f53\u6307\u4ee4\u4e3a STORE\u6307\u4ee4\u7ec4\uff0c\u4f1a\u4f7f\u7528 S_imm; "),(0,i.kt)("p",null,"\u8fd9\u4e9b\u6307\u4ee4\u5728\u67d0\u4e2a\u5177\u4f53\u65f6\u949f\u4e0b\uff0c\u53ea\u4f1a\u6709\u4e00\u79cd\u6307\u4ee4\u88ab\u8bd1\u7801\uff0c\u4e0d\u4f1a\u51fa\u73b0\u591a\u4e2a\u6307\u4ee4\u540c\u65f6\u6709\u6548\u7684\u60c5\u51b5\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6574\u7406\u64cd\u4f5c\u6570 1\uff0c2\uff1a")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"// rv32i_slti               rv32i_slt\nwire [ 33: 0 ] ext_opd1 = ({i_opimm_instr[1],i_op_instr[1]} != 0) ? {opd1[31],opd1[31],opd1} : {2\u2019b00, opd1};\nwire [ 33: 0 ] ext_opd2 = ({i_opimm_instr[1],i_op_instr[1]} != 0) ? {opd2[31],opd2[31],opd2} : {2\u2019b00, opd2};\n")),(0,i.kt)("p",null,"\u5c06\u64cd\u4f5c\u6570\u6269\u5c55\u4e3a34\u4f4d\uff0c\u537332\u4f4d\u7684\u64cd\u4f5c\u6570 + \u8fdb\u4f4d\u4f4d + \u7b26\u53f7\u4f4d\u3002slti, slt \u9700\u8981\u8fdb\u884c\u7b26\u53f7\u6269\u5c55\uff0c \u5176\u4ed6\u6307\u4ee4 \u90fd\u8ba4\u4e3a\u662f\u6b63\u6570\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u8d1f\u6570\u64cd\u4f5c\uff1a")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"wire [ 33: 0 ] comp_opd2 = ~ext_opd2 + 32\u2019b1; //2\u2019s complement\n")),(0,i.kt)("p",null,"\u5c06\u64cd\u4f5c\u65702 \u53d8\u4e3a\u8d1f\u6570, \u76f8\u5f53\u4e8e comp_opd2 = \u2013ext_opd2;"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"// rv32i_sub            rv32i_sltiu, rv32i_slti      rv32i_sltu, rv32i_slt\nwire [ 33: 0 ] comp_ext_opd2 = ({i_op_instr[8],     i_opimm_instr[2:1],        i_op_instr[2:1]} != 0) ? comp_opd2 : ext_opd2;\n")),(0,i.kt)("p",null,"\u5982\u679c\u5f53\u524d\u6307\u4ee4\u662f sub, sltiu, slti, sltu, slt \u65f6 \uff0c\u9700\u8981 \u64cd\u4f5c\u6570 \u53d8\u4e3a\u8d1f\u6570\uff0c \u5176\u4ed6\u6307\u4ee4\u4e0d\u9700\u8981\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u52a0\u6cd5\u64cd\u4f5c\uff1a")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"wire [ 33: 0 ] add_res = ext_opd1 + comp_ext_opd2;    \n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u5f02\u6216\u64cd\u4f5c\uff1a")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"wire [ 31: 0 ] xor_res = i_rs1_val ^ opd2;\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6216\u64cd\u4f5c\uff1a")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"wire [ 31: 0 ] or_res = i_rs1_val | opd2;\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u4e0e\u64cd\u4f5c\uff1a")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"wire [ 31: 0 ] and_res = i_rs1_val & opd2;\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u903b\u8f91\u5de6\u79fb\u64cd\u4f5c\uff1a")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"wire [ 31: 0 ] sll_res = i_rs1_val << opd2[ 4: 0 ];\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u903b\u8f91\u53f3\u79fb\u64cd\u4f5c\uff1a")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"wire [ 31: 0 ] srl_res = i_rs1_val >> opd2[ 4: 0 ];\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u7b97\u6570\u53f3\u79fb\u64cd\u4f5c\uff1a")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"wire [ 31: 0 ] eff_mask = ( ~( 32\u2019b0 ) ) >> opd2[ 4: 0 ];\nwire [ 31: 0 ] sra_res = ( srl_res & eff_mask ) | ( { 32{ i_rs1_val[ 31 ] } } & ( ~eff_mask ) );\n")),(0,i.kt)("p",null,"\u76f8\u5f53\u4e8e sra_res = i_rs1_val >>> opd2","[4:0]",";"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"assign o_rd_wen = i_OP_IMM | i_OP | i_LUI | i_AUIPC | i_JAL | i_JALR;\n")),(0,i.kt)("p",null,"\u8fd9\u4e9b\u6307\u4ee4\u9700\u8981\u5199\u56de32\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"assign o_J_vld = i_JAL | i_JALR;\n")),(0,i.kt)("p",null,"\u5f53\u4e3a JAL \uff0c JALR \u6307\u4ee4\u65f6\uff0c J_vld \u9700\u8981enable"),(0,i.kt)("h2",{id:"\u4e8cbranch\u6a21\u5757"},"\u4e8c\u3001branch\u6a21\u5757"),(0,i.kt)("p",null,"RISC-V \u7684",(0,i.kt)("strong",{parentName:"p"},"BRANCH \u6a21\u5757\u7528\u6765\u5904\u7406\u6307\u4ee4\u6761\u4ef6\u8df3\u8f6c\u90e8\u5206"),"\u3002\u8fd9\u4e2a\u6a21\u5757\u5c06\u4e4b\u524dITCM\u8bfb\u53d6\u7684\u6307\u4ee4\uff0c\u8bd1\u7801\u6a21\u5757\u5206\u79bb\u51fa\u6765\u7684\u6761\u4ef6\u8df3\u8f6c\u4fe1\u606f\u8fdb\u884c\u5904\u7406\u3002\u5728\u5904\u7406\u8fc7\u7a0b\u4e2d\uff0c\u5305\u62ec",(0,i.kt)("strong",{parentName:"p"},"\u8bfb\u53d632\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u5bf9pc \u6307\u9488\u7684\u66f4\u6539"),"\u7b49\u7b49\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"RISC-V cpu \u67b6\u6784\uff1a")),(0,i.kt)("p",null,(0,i.kt)("img",{src:t(31075).Z,width:"1349",height:"775"})),(0,i.kt)("p",null,"\u8fd9\u4e2a\u6a21\u5757\u96c6\u4e2d\u5904\u7406\uff1a"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"BEQ"),":  if (rs1 == rs2) pc += sext(offset)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"BGE"),":  if (rs1 \u2265s rs2) pc += sext(offset)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"BGEU"),": if (rs1 \u2265u rs2) pc += sext(offset)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"BLT"),":   if (rs1 <s rs2) pc += sext(offset)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"BLTU"),": if (rs1 <u rs2) pc += sext(offset)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"BNE"),":  if (rs1 \u2260 rs2) pc += sext(offset)"),(0,i.kt)("p",null,"\u6c47\u7f16\u8bed\u8a00\u4e2d\u7684\u7f16\u8bd1\u5668\u5728\u8fd96\u6761\u6307\u4ee4\u7684\u57fa\u7840\u4e0a\uff0c\u53c8\u589e\u52a0\u4e86\u76f8\u5173\u7684 \u4f2a\u6307\u4ee4\uff0c \u65b9\u4fbf\u7528\u6237\u7f16\u5199\u6c47\u7f16\u8bed\u8a00\u3002 \u6700\u540e\u5f62\u6210\u7684\u673a\u5668\u7801\u4f9d\u7136\u53ea\u6709\u8fd96\u6761\u6307\u4ee4\u3002"),(0,i.kt)("p",null,"\u76f8\u5173\u7684\u6587\u7ae0\u53ef\u4ee5\u53c2\u8003\uff1a",(0,i.kt)("a",{parentName:"p",href:"https://www.icfedu.cn/archives/13981"},"RISC-V \u4f2a\u6307\u4ee4\u67e5\u627e\u8868")),(0,i.kt)("h3",{id:"branch-\u6a21\u5757\u4ee3\u7801"},"branch \u6a21\u5757\u4ee3\u7801"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"module exu_BRANCH\n(\n    input sys_clk,                 // \u7cfb\u7edf\u65f6\u949f\n    input rst_n,\n\n    input i_EXE_vld,               // \u6267\u884cenable\n    input i_BRANCH,                // \u8bd1\u7801\u6a21\u5757\u63d0\u4f9b\u7684 branch \u6307\u4ee4\u7ec4\n    input [ 5: 0 ] i_branch_instr, // \u5177\u4f53branch \u6307\u4ee4\uff0c\u5305\u62ec{rv32i_bgeu,rv32i_bge,rv32i_bltu,rv32i_blt,rv32i_bne,rv32i_beq};\n\n    input [ 31: 0 ] i_rs1_val,     // rs1 \u901a\u7528\u5bc4\u5b58\u5668\n    input [ 31: 0 ] i_rs2_val,     // rs2 \u901a\u7528\u5bc4\u5b58\u5668\n\n    input [ 31: 0 ] i_PC,          // \u5f53\u524d\u6307\u4ee4pc\n    input [ 31: 0 ] i_B_imm,       // b-type \u7acb\u5373\u6570\n\n    output reg o_B_vld,            // \u8df3\u8f6c pc \u6709\u6548 branch valid\n    output [ 31: 0 ] o_PC          // \u51c6\u5907\u8df3\u8f6c\u7684pc \u503c\n\n) ;\n\nwire [ 31: 0 ] op1 = i_rs1_val;\nwire [ 31: 0 ] op2 = i_rs2_val;\n\nwire [ 31: 0 ] op_xor = op1 ^ op2;\nwire bit_or = |op_xor;\n\n//                         bge               blt\nwire [ 33: 0 ] ext_op1 = ({i_branch_instr[4],i_branch_instr[2]} != 0 ) ? {op1[31],op1[31],op1} : {1'b0,1'b0,op1};\n//                         bge               blt\nwire [ 33: 0 ] ext_op2 = ({i_branch_instr[4],i_branch_instr[2]} != 0 ) ? {op2[31],op2[31],op2} : {1'b0,1'b0,op2};\nwire [ 33: 0 ] comp_ext_op2 = ~ext_op2 + 1;\n\nwire [ 33: 0 ] op_sub = ext_op1 + comp_ext_op2; //ext_op1 - ext_op2;\n\nassign o_PC = i_PC + i_B_imm;\n\n//assign o_branch_instr = { rv32i_bgtu, rv32i_bgt, rv32i_bltu, rv32i_blt, rv32i_bne, rv32i_beq };\nalways @( * )\nbegin\n    o_B_vld <= 1'b0;\n\n    if ( i_EXE_vld & i_BRANCH )\n    begin\n        case ( i_branch_instr )\n        6'b00_0001:\n        begin //eq\n            if ( !bit_or )\n                o_B_vld <= 1'b1;\n        end\n        6'b00_0010:\n        begin //bne\n            if ( bit_or )\n                o_B_vld <= 1'b1;\n        end\n        6'b00_0100:\n        begin //blt\n            if ( op_sub[ 33 ] )\n                o_B_vld <= 1'b1;\n        end\n        6'b00_1000:\n        begin //bltu\n            if ( op_sub[ 33 ] )\n                o_B_vld <= 1'b1;\n        end\n        6'b01_0000:\n        begin //bge\n            if ( !op_sub[ 33 ] )\n                o_B_vld <= 1'b1;\n        end\n        6'b10_0000:\n        begin //bgeu\n            if ( !op_sub[ 33 ] )\n                o_B_vld <= 1'b1;\n        end\n        default: ;\n        endcase\n    end\nend\n\nendmodule\n")),(0,i.kt)("p",null,"\u6a21\u5757\u7aef\u53e3\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"input sys_clk,                             // \u7cfb\u7edf\u65f6\u949f\ninput rst_n,\n\ninput i_EXE_vld,                      // \u6267\u884cenable\ninput i_BRANCH,                     // \u8bd1\u7801\u6a21\u5757\u63d0\u4f9b\u7684 branch \u6307\u4ee4\u7ec4\ninput [ 5: 0 ] i_branch_instr, // \u5177\u4f53branch \u6307\u4ee4\uff0c\u5305\u62ec{rv32i_bgeu,rv32i_bge,rv32i_bltu,rv32i_blt,rv32i_bne,rv32i_beq};\n\ninput [ 31: 0 ] i_rs1_val,          // rs1 \u901a\u7528\u5bc4\u5b58\u5668\ninput [ 31: 0 ] i_rs2_val,          // rs2 \u901a\u7528\u5bc4\u5b58\u5668\n\ninput [ 31: 0 ] i_PC,                   // \u5f53\u524d\u6307\u4ee4pc\ninput [ 31: 0 ] i_B_imm,          // b-type \u7acb\u5373\u6570\n\noutput reg o_B_vld,                  // \u8df3\u8f6c pc \u6709\u6548 branch valid\noutput [ 31: 0 ] o_PC                 // \u51c6\u5907\u8df3\u8f6c\u7684pc \u503c\n")),(0,i.kt)("h3",{id:"\u6307\u4ee4\u64cd\u4f5c"},"\u6307\u4ee4\u64cd\u4f5c"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u64cd\u4f5c\u65701\uff0c2 \u6269\u5c55\uff1a")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"// bge                             blt\nwire [ 33: 0 ] ext_op1 = ({i_branch_instr[4],i_branch_instr[2]} != 0 ) ? {op1[31],op1[31],op1} : {1\u2019b0,1\u2019b0,op1};\n// bge                             blt\nwire [ 33: 0 ] ext_op2 = ({i_branch_instr[4],i_branch_instr[2]} != 0 ) ? {op2[31],op2[31],op2} : {1\u2019b0,1\u2019b0,op2};\n")),(0,i.kt)("p",null,"bge\uff0c blt \u6307\u4ee4\u9700\u8981\u8fdb\u884c\u7b26\u53f7\u6269\u5c55\uff0c \u5176\u4ed6\u6307\u4ee4\u4e0d\u9700\u8981\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u8d1f\u6570\u64cd\u4f5c\uff1a")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"wire [ 33: 0 ] comp_ext_op2 = ~ext_op2 + 1;\n")),(0,i.kt)("p",null,"\u76f8\u5f53\u4e8e comp_ext_op2 = -ext_op2;"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u51cf\u6cd5\u64cd\u4f5c\uff1a")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"wire [ 33: 0 ] op_sub = ext_op1 + comp_ext_op2; //ext_op1 \u2013 ext_op2;\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u5f02\u6216\uff0c \u6216 \u64cd\u4f5c\uff1a")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"wire [ 31: 0 ] op_xor = op1 ^ op2;\nwire bit_or = |op_xor;\n")),(0,i.kt)("p",null,"\u8fd9\u4e24\u4e2a\u64cd\u4f5c \u6700\u7ec8\u53ef\u5b9e\u73b0 op1 == op2 ;  op1 != op2 \u7684\u64cd\u4f5c\u3002 \u5f53bit_or == 1\u2019b1 \u65f6 op1 \u4e0d\u7b49\u4e8e op2\uff1b \u5f53 bit_or == 1\u2019b0 \u65f6 op1 \u7b49\u4e8e op2"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u51c6\u5907\u8df3\u8f6c\u7684\u65b0pc \u503c\uff1a")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-verilog"},"assign o_PC = i_PC + i_B_imm;\n")),(0,i.kt)("p",null,"\u9700\u8981\u914d\u5408o_B_vld \u4fe1\u53f7\uff0c \u5982\u679c o_B_vld == 1\uff0c o_PC \u662f\u6709\u6548\u7684\u8df3\u8f6cpc \uff1b \u5982\u679c o_B_vld == 0\uff0c o_PC  cpu \u5c06\u4e0d\u9700\u8981\u5173\u5fc3\u8fd9\u4e2a\u503c\uff1b"))}u.isMDXComponent=!0},526:(n,e,t)=>{t.d(e,{Z:()=>r});const r=t.p+"assets/images/94-c5b91596b45d05c44912f8edfbecbfd7.jpeg"},31075:(n,e,t)=>{t.d(e,{Z:()=>r});const r=t.p+"assets/images/95-90799f59c298346ffda3c9ca468b0a18.jpeg"}}]);