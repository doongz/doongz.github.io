"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[36388],{3905:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>f});var r=t(67294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var p=r.createContext({}),s=function(n){var e=r.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},c=function(n){var e=s(n.components);return r.createElement(p.Provider,{value:e},n.children)},u="mdxType",m={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,a=n.originalType,p=n.parentName,c=l(n,["components","mdxType","originalType","parentName"]),u=s(t),d=i,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||a;return t?r.createElement(f,o(o({ref:e},c),{},{components:t})):r.createElement(f,o({ref:e},c))}));function f(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var a=t.length,o=new Array(a);o[0]=d;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=n,l[u]="string"==typeof n?n:i,o[1]=l;for(var s=2;s<a;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},74162:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=t(87462),i=(t(67294),t(3905));const a={},o=void 0,l={unversionedId:"Algorithm/\u7cfb\u5217\u9898\u76ee/\u56de\u6587\u95ee\u9898/<\u4e2d\u5fc3\u6269\u6563+\u8d2a\u5fc3>-\u4e0d\u91cd\u53e0\u56de\u6587\u5b50\u5b57\u7b26\u4e32\u7684\u6700\u5927\u6570\u76ee",id:"Algorithm/\u7cfb\u5217\u9898\u76ee/\u56de\u6587\u95ee\u9898/<\u4e2d\u5fc3\u6269\u6563+\u8d2a\u5fc3>-\u4e0d\u91cd\u53e0\u56de\u6587\u5b50\u5b57\u7b26\u4e32\u7684\u6700\u5927\u6570\u76ee",title:"<\u4e2d\u5fc3\u6269\u6563+\u8d2a\u5fc3>-\u4e0d\u91cd\u53e0\u56de\u6587\u5b50\u5b57\u7b26\u4e32\u7684\u6700\u5927\u6570\u76ee",description:"2472. \u4e0d\u91cd\u53e0\u56de\u6587\u5b50\u5b57\u7b26\u4e32\u7684\u6700\u5927\u6570\u76ee",source:"@site/docs/Algorithm/6-\u7cfb\u5217\u9898\u76ee/04-\u56de\u6587\u95ee\u9898/2472-<\u4e2d\u5fc3\u6269\u6563+\u8d2a\u5fc3>-\u4e0d\u91cd\u53e0\u56de\u6587\u5b50\u5b57\u7b26\u4e32\u7684\u6700\u5927\u6570\u76ee.md",sourceDirName:"Algorithm/6-\u7cfb\u5217\u9898\u76ee/04-\u56de\u6587\u95ee\u9898",slug:"/Algorithm/\u7cfb\u5217\u9898\u76ee/\u56de\u6587\u95ee\u9898/<\u4e2d\u5fc3\u6269\u6563+\u8d2a\u5fc3>-\u4e0d\u91cd\u53e0\u56de\u6587\u5b50\u5b57\u7b26\u4e32\u7684\u6700\u5927\u6570\u76ee",permalink:"/docs/Algorithm/\u7cfb\u5217\u9898\u76ee/\u56de\u6587\u95ee\u9898/<\u4e2d\u5fc3\u6269\u6563+\u8d2a\u5fc3>-\u4e0d\u91cd\u53e0\u56de\u6587\u5b50\u5b57\u7b26\u4e32\u7684\u6700\u5927\u6570\u76ee",draft:!1,tags:[],version:"current",sidebarPosition:2472,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<\u68c0\u67e5\u6bcf\u4e00\u4e2a\u5b57\u7b26>-\u957f\u5ea6\u4e3a3\u7684\u4e0d\u540c\u56de\u6587\u5b50\u5e8f\u5217",permalink:"/docs/Algorithm/\u7cfb\u5217\u9898\u76ee/\u56de\u6587\u95ee\u9898/<\u68c0\u67e5\u6bcf\u4e00\u4e2a\u5b57\u7b26>-\u957f\u5ea6\u4e3a3\u7684\u4e0d\u540c\u56de\u6587\u5b50\u5e8f\u5217"},next:{title:"\u5251\u6307Offer-II-018-<\u5de6\u53f3\u53cc\u6307\u9488>-\u6709\u6548\u7684\u56de\u6587",permalink:"/docs/Algorithm/\u7cfb\u5217\u9898\u76ee/\u56de\u6587\u95ee\u9898/\u5251\u6307Offer-II-018-<\u5de6\u53f3\u53cc\u6307\u9488>-\u6709\u6548\u7684\u56de\u6587"}},p={},s=[{value:"2472. \u4e0d\u91cd\u53e0\u56de\u6587\u5b50\u5b57\u7b26\u4e32\u7684\u6700\u5927\u6570\u76ee",id:"2472-\u4e0d\u91cd\u53e0\u56de\u6587\u5b50\u5b57\u7b26\u4e32\u7684\u6700\u5927\u6570\u76ee",level:4},{value:"\u4e2d\u5fc3\u6269\u6563 + \u8d2a\u5fc3",id:"\u4e2d\u5fc3\u6269\u6563--\u8d2a\u5fc3",level:2}],c={toc:s};function u(n){let{components:e,...t}=n;return(0,i.kt)("wrapper",(0,r.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"2472-\u4e0d\u91cd\u53e0\u56de\u6587\u5b50\u5b57\u7b26\u4e32\u7684\u6700\u5927\u6570\u76ee"},(0,i.kt)("a",{parentName:"h4",href:"https://leetcode.cn/problems/maximum-number-of-non-overlapping-palindrome-substrings/"},"2472. \u4e0d\u91cd\u53e0\u56de\u6587\u5b50\u5b57\u7b26\u4e32\u7684\u6700\u5927\u6570\u76ee")),(0,i.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," \u548c\u4e00\u4e2a ",(0,i.kt)("strong",{parentName:"p"},"\u6b63")," \u6574\u6570 ",(0,i.kt)("inlineCode",{parentName:"p"},"k")," \u3002"),(0,i.kt)("p",null,"\u4ece\u5b57\u7b26\u4e32 ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," \u4e2d\u9009\u51fa\u4e00\u7ec4\u6ee1\u8db3\u4e0b\u8ff0\u6761\u4ef6\u4e14 ",(0,i.kt)("strong",{parentName:"p"},"\u4e0d\u91cd\u53e0")," \u7684\u5b50\u5b57\u7b26\u4e32\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u6bcf\u4e2a\u5b50\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 ",(0,i.kt)("strong",{parentName:"li"},"\u81f3\u5c11")," \u4e3a ",(0,i.kt)("inlineCode",{parentName:"li"},"k")," \u3002"),(0,i.kt)("li",{parentName:"ul"},"\u6bcf\u4e2a\u5b50\u5b57\u7b26\u4e32\u662f\u4e00\u4e2a ",(0,i.kt)("strong",{parentName:"li"},"\u56de\u6587\u4e32")," \u3002")),(0,i.kt)("p",null,"\u8fd4\u56de\u6700\u4f18\u65b9\u6848\u4e2d\u80fd\u9009\u62e9\u7684\u5b50\u5b57\u7b26\u4e32\u7684 ",(0,i.kt)("strong",{parentName:"p"},"\u6700\u5927")," \u6570\u76ee\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u5b50\u5b57\u7b26\u4e32")," \u662f\u5b57\u7b26\u4e32\u4e2d\u4e00\u4e2a\u8fde\u7eed\u7684\u5b57\u7b26\u5e8f\u5217\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'\u793a\u4f8b 1 \uff1a\n\n\u8f93\u5165\uff1as = "abaccdbbd", k = 3\n\u8f93\u51fa\uff1a2\n\u89e3\u91ca\uff1a\u53ef\u4ee5\u9009\u62e9 s = "abaccdbbd" \u4e2d\u659c\u4f53\u52a0\u7c97\u7684\u5b50\u5b57\u7b26\u4e32\u3002"aba" \u548c "dbbd" \u90fd\u662f\u56de\u6587\uff0c\u4e14\u957f\u5ea6\u81f3\u5c11\u4e3a k = 3 \u3002\n\u53ef\u4ee5\u8bc1\u660e\uff0c\u65e0\u6cd5\u9009\u51fa\u4e24\u4e2a\u4ee5\u4e0a\u7684\u6709\u6548\u5b50\u5b57\u7b26\u4e32\u3002\n\n\u793a\u4f8b 2 \uff1a\n\n\u8f93\u5165\uff1as = "adbcda", k = 2\n\u8f93\u51fa\uff1a0\n\u89e3\u91ca\uff1a\u5b57\u7b26\u4e32\u4e2d\u4e0d\u5b58\u5728\u957f\u5ea6\u81f3\u5c11\u4e3a 2 \u7684\u56de\u6587\u5b50\u5b57\u7b26\u4e32\u3002\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u63d0\u793a\uff1a")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= k <= s.length <= 2000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"s")," \u4ec5\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"\u4e2d\u5fc3\u6269\u6563--\u8d2a\u5fc3"},"\u4e2d\u5fc3\u6269\u6563 + \u8d2a\u5fc3"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"\u4e2d\u5fc3\u6269\u6563\uff0c\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u4e32"),(0,i.kt)("li",{parentName:"ol"},"\u8d2a\u5fc3\uff0c\u4ee5\u53f3\u7aef\u70b9\u8fdb\u884c\u6392\u5e8f\uff0c\u4f18\u5148\u9009\u53f3\u7aef\u70b9\u5c0f\u7684\uff0c\u53f3\u7aef\u70b9\u8d8a\u5c0f\uff0c\u8d8a\u53ef\u80fd\u518d\u540e\u653e\u591a\u9009\u4e00\u4e9b\u5b57\u4e32"),(0,i.kt)("li",{parentName:"ol"},"\u7edf\u8ba1")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},'class Solution {\npublic:\n    int n;\n    int K;\n    string str;\n    vector<pair<int, int>> tmp;\n\n    void mid(int i) {\n        // \u4e0d\u80fd\u9009\u6700\u5927\u7684\uff0c\u8981\u9009\u6240\u6709\u7684\n        int l = i;\n        int r = i;\n\n        while (l >= 0 && r < n) {\n            if (str[l] == str[r]) {\n                // cout << l << " " << r << endl;\n                if (r - l + 1 >= K) {\n                    tmp.push_back({l, r});\n                }\n            } else {\n                break;\n            }\n            l--;\n            r++;\n        }\n        return;\n    }\n\n    void gap(int i) {  // i\u4e0b\u6807\u540e\u7684\u95f4\u9699\n        // \u4e0d\u80fd\u9009\u6700\u5927\u7684\uff0c\u8981\u9009\u6240\u6709\u7684\n        int l = i;\n        int r = i + 1;\n\n        while (l >= 0 && r < n) {\n            if (str[l] == str[r]) {\n                // cout << l << " " << r << endl;\n                if (r - l + 1 >= K) {\n                    tmp.push_back({l, r});\n                }\n            } else {\n                break;\n            }\n            l--;\n            r++;\n        }\n        return;\n    }\n\n    int maxPalindromes(string s, int k) {\n        str = s;\n        n = s.size();\n        K = k;\n        // \u4e2d\u5fc3\u6269\u6563\uff0c\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u4e32\n        for (int i = 0; i < n; i++) {  // \u4ece\u4e2d\u5fc3\u70b9\u6269\u6563\n            mid(i);\n        }\n        // cout << "*****" << endl;\n        for (int i = 0; i < n - 1; i++) {  // \u4ece\u95f4\u9699\u6269\u6563\n            gap(i);\n        }\n        // cout << "*****" << endl;\n\n        // \u8d2a\u5fc3\uff0c\u4ee5\u53f3\u7aef\u70b9\u8fdb\u884c\u6392\u5e8f\uff0c\u4f18\u5148\u9009\u53f3\u7aef\u70b9\u5c0f\u7684\uff0c\u53f3\u7aef\u70b9\u8d8a\u5c0f\uff0c\u8d8a\u53ef\u80fd\u518d\u540e\u653e\u591a\u9009\u4e00\u4e9b\u5b57\u4e32\n        auto cmp = [&](const auto &a, const auto &b) {\n            if (a.second != b.second) {\n                return a.second < b.second;\n            }\n            return a.first < b.first;\n        };\n        sort(tmp.begin(), tmp.end(), cmp);\n        // for (auto t : tmp) {\n        //     cout << t.first << " " << t.second << " " << s.substr(t.first, t.second - t.first + 1) << endl;\n        // }\n\n        if (tmp.size() == 0) return 0;\n\n        int ans = 1;\n        int right = tmp[0].second;\n\n        for (int i = 1; i < tmp.size(); i++) {\n            if (tmp[i].first > right) {\n                ans++;\n                right = tmp[i].second;\n            }\n        }\n\n        return ans;\n    }\n};\n')))}u.isMDXComponent=!0}}]);