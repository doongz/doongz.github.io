"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[43995],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var r=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=r.createContext({}),d=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=d(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},k=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=d(t),k=l,f=u["".concat(p,".").concat(k)]||u[k]||c[k]||o;return t?r.createElement(f,a(a({ref:n},s),{},{components:t})):r.createElement(f,a({ref:n},s))}));function f(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,a=new Array(o);a[0]=k;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[u]="string"==typeof e?e:l,a[1]=i;for(var d=2;d<o;d++)a[d]=t[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}k.displayName="MDXCreateElement"},91137:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var r=t(87462),l=(t(67294),t(3905));const o={},a=void 0,i={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/5-1-\u6811\u548c\u4e8c\u53c9\u6811",id:"Algorithm/\u6570\u636e\u7ed3\u6784/5-1-\u6811\u548c\u4e8c\u53c9\u6811",title:"5-1-\u6811\u548c\u4e8c\u53c9\u6811",description:"\u6811\u548c\u4e8c\u53c9\u6811",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/5-1-\u6811\u548c\u4e8c\u53c9\u6811.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/5-1-\u6811\u548c\u4e8c\u53c9\u6811",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/5-1-\u6811\u548c\u4e8c\u53c9\u6811",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"\u5806&\u4f18\u5148\u961f\u5217",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u5806"},next:{title:"\u6811\u7684\u62d3\u5c55",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/5-2-\u6811\u7684\u62d3\u5c55"}},p={},d=[{value:"\u6811\u548c\u4e8c\u53c9\u6811",id:"\u6811\u548c\u4e8c\u53c9\u6811",level:5},{value:"\u4e00\u3001\u6811\u7684\u57fa\u672c\u6982\u5ff5",id:"\u4e00\u6811\u7684\u57fa\u672c\u6982\u5ff5",level:2},{value:"\u6811\u7684\u79cd\u7c7b",id:"\u6811\u7684\u79cd\u7c7b",level:3},{value:"\u4e8c\u3001\u4e8c\u53c9\u6811",id:"\u4e8c\u4e8c\u53c9\u6811",level:2},{value:"1\u3001\u4e8c\u53c9\u6811\u7684\u6982\u5ff5",id:"1\u4e8c\u53c9\u6811\u7684\u6982\u5ff5",level:3},{value:"2\u3001\u4e8c\u53c9\u6811\u7684\u904d\u5386",id:"2\u4e8c\u53c9\u6811\u7684\u904d\u5386",level:3},{value:"1\uff09\u9012\u5f52\u6cd5",id:"1\u9012\u5f52\u6cd5",level:4},{value:"2\uff09\u8fed\u4ee3\u6cd5",id:"2\u8fed\u4ee3\u6cd5",level:4},{value:"3\uff09Morris \u904d\u5386\u7b97\u6cd5",id:"3morris-\u904d\u5386\u7b97\u6cd5",level:4},{value:"4\uff09\u5c42\u904d\u5386",id:"4\u5c42\u904d\u5386",level:4},{value:"3\u3001\u4e8c\u53c9\u6811\u7684\u6784\u9020",id:"3\u4e8c\u53c9\u6811\u7684\u6784\u9020",level:3},{value:"\u7531\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",id:"\u7531\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",level:4},{value:"105. \u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",id:"105-\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",level:4},{value:"106. \u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",id:"106-\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",level:4},{value:"449. \u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811",id:"449-\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811",level:4},{value:"297. \u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316",id:"297-\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316",level:4},{value:"4\u3001\u7ebf\u7d22\u4e8c\u53c9\u6811",id:"4\u7ebf\u7d22\u4e8c\u53c9\u6811",level:3},{value:"\u4e09\u3001\u6811\u548c\u68ee\u6797",id:"\u4e09\u6811\u548c\u68ee\u6797",level:2},{value:"1\u3001\u6811\u7684\u5b58\u50a8",id:"1\u6811\u7684\u5b58\u50a8",level:3},{value:"1\uff09\u53cc\u4eb2\u8868\u793a\u6cd5",id:"1\u53cc\u4eb2\u8868\u793a\u6cd5",level:4},{value:"2\uff09\u5b69\u5b50\u8868\u793a\u6cd5",id:"2\u5b69\u5b50\u8868\u793a\u6cd5",level:4},{value:"3\uff09\u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5",id:"3\u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5",level:4},{value:"2\u3001\u6811\u3001\u68ee\u6797\u548c\u4e8c\u53c9\u6811\u7684\u8f6c\u6362",id:"2\u6811\u68ee\u6797\u548c\u4e8c\u53c9\u6811\u7684\u8f6c\u6362",level:3},{value:"3\u3001\u6811\u548c\u68ee\u6797\u7684\u904d\u5386",id:"3\u6811\u548c\u68ee\u6797\u7684\u904d\u5386",level:3}],s={toc:d};function u(e){let{components:n,...o}=e;return(0,l.kt)("wrapper",(0,r.Z)({},s,o,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h5",{id:"\u6811\u548c\u4e8c\u53c9\u6811"},"\u6811\u548c\u4e8c\u53c9\u6811"),(0,l.kt)("h2",{id:"\u4e00\u6811\u7684\u57fa\u672c\u6982\u5ff5"},"\u4e00\u3001\u6811\u7684\u57fa\u672c\u6982\u5ff5"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"5-1",src:t(93891).Z,width:"1972",height:"1490"})),(0,l.kt)("h3",{id:"\u6811\u7684\u79cd\u7c7b"},"\u6811\u7684\u79cd\u7c7b"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u6709\u5e8f\u6811\uff0c\u6811\u4e2d\u7ed3\u70b9\u7684\u5404\u5b50\u6811\u4ece\u5de6\u5230\u53f3\u662f\u6709\u6b21\u5e8f\u7684\uff0c\u4e0d\u80fd\u4e92\u6362"),(0,l.kt)("li",{parentName:"ul"},"\u65e0\u5e8f\u6811\uff0c\u7ed3\u70b9\u7684\u5404\u5b50\u6811\u65e0\u5e8f\u7684"),(0,l.kt)("li",{parentName:"ul"},"\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u6700\u591a\u6709\u4e24\u4e2a\u5b50\u6811"),(0,l.kt)("li",{parentName:"ul"},"\u6ee1\u4e8c\u53c9\u6811\uff0c\u6811\u4e2d\u7684\u6bcf\u5c42\u90fd\u6709\u6700\u591a\u7684\u7ed3\u70b9\uff0c\u53f6\u5b50\u7ed3\u70b9\u90fd\u5728\u6700\u4e0b\u5c42"),(0,l.kt)("li",{parentName:"ul"},"\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u9ad8\u5ea6\u4e3ah\u3001\u6709n\u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u4e0e\u9ad8\u5ea6\u4e3ah\u7684\u6ee1\u4e8c\u53c9\u6811\u4e2d\u7f16\u53f7\u4e3a1\uff5en\u7684\u7ed3\u70b9\u4e00\u4e00\u5bf9\u5e94\uff08\u76f8\u5f53\u4e8e\u6ee1\u4e8c\u53c9\u6811\u4ece\u53f3\u4e0b\u89d2\u5f00\u59cb\uff0c\u4ece\u53f3\u5f80\u5de6\uff0c\u4ece\u4e0b\u5f80\u4e0a\uff0c\u8fdb\u884c\u6d88\u9000\uff09"),(0,l.kt)("li",{parentName:"ul"},"\u4e8c\u53c9\u6392\u5e8f\u6811\uff0c\u5de6\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u5747\u5c0f\u4e8e\u6839\u7ed3\u70b9\u7684\u5173\u952e\u5b57\uff1a\u53f3\u5b50\u6811\u4e0a\u7684\u6240\u6709\u7ed3\u70b9\u7684\u5173\u952e\u5b57\u5747\u5927\u4e8e\u6839\u7ed3\u70b9\u7684\u5173\u952e\u5b57\uff1b\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u53c8\u5404\u662f\u4e00\u68f5\u4e8c\u53c9\u6392\u5e8f\u6811"),(0,l.kt)("li",{parentName:"ul"},"\u5e73\u8861\u4e8c\u53c9\u6811\uff08AVL\u6811\uff09\uff0c\u6811\u4e0a\u4efb\u4e00\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7684\u6df1\u5ea6\u4e4b\u5dee\u4e0d\u8d85\u8fc7 1"),(0,l.kt)("li",{parentName:"ul"},"\u7ebf\u7d22\u4e8c\u53c9\u6811\uff0c\u5229\u7528\u7ed3\u70b9\u4e2d\u7684\u7a7a\u6307\u9488\u5b58\u50a8\u8be5\u7ed3\u70b9\u7684\u524d\u9a71\u548c\u540e\u7ee7")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"5-9",src:t(96616).Z,width:"1288",height:"370"})),(0,l.kt)("p",null,(0,l.kt)("img",{src:t(45547).Z,width:"555",height:"464"})),(0,l.kt)("p",null,(0,l.kt)("img",{src:t(50227).Z,width:"434",height:"412"})),(0,l.kt)("h2",{id:"\u4e8c\u4e8c\u53c9\u6811"},"\u4e8c\u3001\u4e8c\u53c9\u6811"),(0,l.kt)("h3",{id:"1\u4e8c\u53c9\u6811\u7684\u6982\u5ff5"},"1\u3001\u4e8c\u53c9\u6811\u7684\u6982\u5ff5"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"5-2",src:t(87047).Z,width:"2642",height:"1516"})),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"5-3",src:t(63628).Z,width:"2578",height:"1626"})),(0,l.kt)("h3",{id:"2\u4e8c\u53c9\u6811\u7684\u904d\u5386"},"2\u3001\u4e8c\u53c9\u6811\u7684\u904d\u5386"),(0,l.kt)("p",null,(0,l.kt)("img",{src:t(28660).Z,width:"784",height:"572"})),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u524d\u5e8f\u904d\u5386\uff08\u4e2d\u5de6\u53f3\uff09\uff1a5 4 1 2 6 7 8"),(0,l.kt)("li",{parentName:"ul"},"\u4e2d\u5e8f\u904d\u5386\uff08\u5de6\u4e2d\u53f3\uff09\uff1a1 4 2 5 7 6 8"),(0,l.kt)("li",{parentName:"ul"},"\u540e\u5e8f\u904d\u5386\uff08\u5de6\u53f3\u4e2d\uff09\uff1a1 2 4 7 8 6 5"),(0,l.kt)("li",{parentName:"ul"},"\u5c42\u5e8f\u904d\u5386\uff1a5 4 6 1 2 7 8")),(0,l.kt)("p",null,"\u9898\u76ee\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://leetcode.cn/problems/binary-tree-preorder-traversal/"},"144. \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://leetcode.cn/problems/binary-tree-inorder-traversal/"},"94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://leetcode.cn/problems/binary-tree-postorder-traversal/"},"145. \u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://leetcode.cn/problems/binary-tree-level-order-traversal/"},"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386"))),(0,l.kt)("h4",{id:"1\u9012\u5f52\u6cd5"},"1\uff09\u9012\u5f52\u6cd5"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570\u3002\u6bcf\u4e00\u4e2a\u8282\u70b9\u6070\u597d\u88ab\u904d\u5386\u4e00\u6b21\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u4e3a\u9012\u5f52\u8fc7\u7a0b\u4e2d\u6808\u7684\u5f00\u9500\uff0c\u5e73\u5747\u60c5\u51b5\u4e0b\u4e3a O(log n)\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u6811\u5448\u73b0\u94fe\u72b6\uff0c\u4e3a O(n)\u3002")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u524d\u5e8f\u904d\u5386")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    void dfs(TreeNode *cur, vector<int> &vec) {\n        if (cur == NULL) return;\n        vec.push_back(cur->val);  // \u4e2d\n        dfs(cur->left, vec);      // \u5de6\n        dfs(cur->right, vec);     // \u53f3\n    }\n    vector<int> preorderTraversal(TreeNode *root) {\n        vector<int> res;\n        dfs(root, res);\n        return res;\n    }\n};\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u4e2d\u5e8f\u904d\u5386")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    void dfs(TreeNode *cur, vector<int> &vec) {\n        if (cur == NULL) return;\n        dfs(cur->left, vec);\n        vec.push_back(cur->val);\n        dfs(cur->right, vec);\n    }\n\n    vector<int> inorderTraversal(TreeNode *root) {\n        vector<int> res;\n        dfs(root, res);\n        return res;\n    }\n};\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u540e\u5e8f\u904d\u5386")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    void dfs(TreeNode *cur, vector<int> &vec) {\n        if (cur == NULL) return;\n        dfs(cur->left, vec);\n        dfs(cur->right, vec);\n        vec.push_back(cur->val);\n    }\n\n    vector<int> postorderTraversal(TreeNode *root) {\n        vector<int> res;\n        dfs(root, res);\n        return res;\n    }\n};\n")),(0,l.kt)("h4",{id:"2\u8fed\u4ee3\u6cd5"},"2\uff09\u8fed\u4ee3\u6cd5"),(0,l.kt)("p",null,"\u672c\u8d28\u4e0a\u662f\u5728\u6a21\u62df\u9012\u5f52"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n",(0,l.kt)("em",{parentName:"li"},"n")," \u662f\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570\u3002\u6bcf\u4e00\u4e2a\u8282\u70b9\u6070\u597d\u88ab\u904d\u5386\u4e00\u6b21\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u4e3a\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u663e\u5f0f\u6808\u7684\u5f00\u9500\uff0c\u5e73\u5747\u60c5\u51b5\u4e0b\u4e3a O(log n)\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u6811\u5448\u73b0\u94fe\u72b6\uff0c\u4e3a O(n)\u3002")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u524d\u5e8f\u904d\u5386")),(0,l.kt)("p",null,"\u9996\u5148\u6211\u4eec\u5e94\u8be5\u521b\u5efa\u4e00\u4e2a",(0,l.kt)("inlineCode",{parentName:"p"},"Stack"),"\u7528\u6765\u5b58\u653e\u8282\u70b9\uff0c\u9996\u5148\u6211\u4eec\u60f3\u8981\u6253\u5370\u6839\u8282\u70b9\u7684\u6570\u636e\uff0c\u6b64\u65f6",(0,l.kt)("inlineCode",{parentName:"p"},"Stack"),"\u91cc\u9762\u7684\u5185\u5bb9\u4e3a\u7a7a\uff0c\u6240\u4ee5\u6211\u4eec\u4f18\u5148\u5c06\u5934\u7ed3\u70b9\u52a0\u5165",(0,l.kt)("inlineCode",{parentName:"p"},"Stack"),"\uff0c\u7136\u540e\u6253\u5370\u3002"),(0,l.kt)("p",null,"\u4e4b\u540e\u6211\u4eec\u5e94\u8be5\u5148\u6253\u5370\u5de6\u5b50\u6811\uff0c\u7136\u540e\u53f3\u5b50\u6811\u3002\u6240\u4ee5\u5148\u52a0\u5165",(0,l.kt)("inlineCode",{parentName:"p"},"Stack"),"\u7684\u5c31\u662f\u53f3\u5b50\u6811\uff0c\u7136\u540e\u5de6\u5b50\u6811\u3002"),(0,l.kt)("p",null,"\u6b64\u65f6\u4f60\u80fd\u5f97\u5230\u7684\u6d41\u7a0b\u5982\u4e0b:"),(0,l.kt)("p",null,(0,l.kt)("img",{src:t(24440).Z,width:"1356",height:"802"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    vector<int> preorderTraversal(TreeNode* root) {\n        vector<int> res;\n        if (root == nullptr) {\n            return res;\n        }\n\n        stack<TreeNode*> stk;\n        TreeNode* node = root;\n        while (!stk.empty() || node != nullptr) {\n            while (node != nullptr) {\n                res.emplace_back(node->val);\n                stk.emplace(node);\n                node = node->left;\n            }\n            node = stk.top();\n            stk.pop();\n            node = node->right;\n        }\n        return res;\n    }\n};\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u4e2d\u5e8f\u904d\u5386")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"\u540c\u7406\u521b\u5efa\u4e00\u4e2a",(0,l.kt)("inlineCode",{parentName:"li"},"Stack"),"\uff0c\u7136\u540e\u6309 \u5de6 \u4e2d \u53f3\u7684\u987a\u5e8f\u8f93\u51fa\u8282\u70b9\u3002"),(0,l.kt)("li",{parentName:"ol"},"\u5c3d\u53ef\u80fd\u7684\u5c06\u8fd9\u4e2a\u8282\u70b9\u7684\u5de6\u5b50\u6811\u538b\u5165",(0,l.kt)("inlineCode",{parentName:"li"},"Stack"),"\uff0c\u6b64\u65f6\u6808\u9876\u7684\u5143\u7d20\u662f\u6700\u5de6\u4fa7\u7684\u5143\u7d20\uff0c",(0,l.kt)("strong",{parentName:"li"},"\u5176\u76ee\u7684\u662f\u627e\u5230\u4e00\u4e2a\u6700\u5c0f\u5355\u4f4d\u7684\u5b50\u6811"),"(\u4e5f\u5c31\u662f\u6700\u5de6\u4fa7\u7684\u4e00\u4e2a\u8282\u70b9)\uff0c",(0,l.kt)("em",{parentName:"li"},"\u5e76\u4e14\u5728\u5bfb\u627e\u7684\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u4e86\u6765\u6e90\uff0c\u624d\u80fd\u8fd4\u56de\u4e0a\u5c42"),",\u540c\u65f6\u5728\u8fd4\u56de\u4e0a\u5c42\u7684\u65f6\u5019\u5df2\u7ecf\u5904\u7406\u5b8c\u6bd5\u5de6\u5b50\u6811\u4e86\u3002"),(0,l.kt)("li",{parentName:"ol"},"\u5f53\u5904\u7406\u5b8c\u6700\u5c0f\u5355\u4f4d\u7684\u5b50\u6811\u65f6\uff0c\u8fd4\u56de\u5230\u4e0a\u5c42\u5904\u7406\u4e86\u4e2d\u95f4\u8282\u70b9\u3002\uff08\u5982\u679c\u628a\u6574\u4e2a\u5de6\u4e2d\u53f3\u7684\u904d\u5386\u90fd\u7406\u89e3\u6210\u5b50\u6811\u7684\u8bdd\uff0c\u5c31\u662f\u5904\u7406\u5b8c ",(0,l.kt)("inlineCode",{parentName:"li"},"\u5de6\u5b50\u6811->\u4e2d\u95f4(\u5c31\u662f\u4e00\u4e2a\u8282\u70b9)->\u53f3\u5b50\u6811"),"\uff09"),(0,l.kt)("li",{parentName:"ol"},"\u5982\u679c\u6709\u53f3\u8282\u70b9\uff0c\u5176\u4e5f\u8981\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386\u3002")),(0,l.kt)("p",null,"\u5f53\u6574\u4e2a\u5de6\u5b50\u6811\u9000\u6808\u7684\u65f6\u5019\u8fd9\u4e2a\u65f6\u5019\u8f93\u51fa\u4e86\u8be5\u5b50\u6811\u7684\u6839\u8282\u70b9 2\uff0c\u4e4b\u540e\u8f93\u51fa\u4e2d\u95f4\u8282\u70b9 1\u3002\u7136\u540e\u5904\u7406\u6839\u8282\u70b9\u4e3a3\u53f3\u5b50\u6811\u3002"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"\u4e2d\u5e8f\u904d\u5386",src:t(73057).Z,width:"1438",height:"1044"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<int> res;\n        stack<TreeNode*> stk;\n        while (root != nullptr || !stk.empty()) {\n            while (root != nullptr) {\n                stk.push(root);\n                root = root->left;\n            }\n            root = stk.top();\n            stk.pop();\n            res.push_back(root->val);\n            root = root->right;\n        }\n        return res;\n    }\n};\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u540e\u5e8f\u904d\u5386")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"\u7528\u4e00\u4e2a\u6307\u9488",(0,l.kt)("inlineCode",{parentName:"li"},"cur"),"\u6807\u8bb0\u5f53\u524d\u9000\u51fa\u7684\u8282\u70b9\u662f\u4ec0\u4e48\u3002"),(0,l.kt)("li",{parentName:"ol"},"\u540e\u5e8f\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u5728\u904d\u5386\u5b8c\u5de6\u5b50\u6811\u8ddf\u53f3\u5b50\u6811",(0,l.kt)("inlineCode",{parentName:"li"},"cur"),"\u90fd\u4f1a\u56de\u5230\u6839\u7ed3\u70b9\u3002\u6240\u4ee5\u5f53\u524d\u4e0d\u7ba1\u662f\u4ece\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811\u56de\u5230\u6839\u7ed3\u70b9\u90fd\u4e0d\u5e94\u8be5\u518d\u64cd\u4f5c\u4e86\uff0c\u5e94\u8be5\u9000\u56de\u4e0a\u5c42\u3002"),(0,l.kt)("li",{parentName:"ol"},"\u5982\u679c\u662f\u4ece\u53f3\u8fb9\u518d\u8fd4\u56de\u6839\u7ed3\u70b9\uff0c\u5e94\u8be5\u56de\u5230\u4e0a\u5c42\u3002")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    vector<int> postorderTraversal(TreeNode *root) {\n        vector<int> res;\n        if (root == nullptr) {\n            return res;\n        }\n\n        stack<TreeNode *> stk;\n        TreeNode *prev = nullptr;\n        while (root != nullptr || !stk.empty()) {\n            while (root != nullptr) {\n                stk.emplace(root);\n                root = root->left;\n            }\n            root = stk.top();\n            stk.pop();\n            if (root->right == nullptr || root->right == prev) {\n                res.emplace_back(root->val);\n                prev = root;\n                root = nullptr;\n            } else {\n                stk.emplace(root);\n                root = root->right;\n            }\n        }\n        return res;\n    }\n};\n")),(0,l.kt)("h4",{id:"3morris-\u904d\u5386\u7b97\u6cd5"},"3\uff09Morris \u904d\u5386\u7b97\u6cd5"),(0,l.kt)("p",null,"\u6709\u4e00\u79cd\u5de7\u5999\u7684\u65b9\u6cd5\u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4\u5185\uff0c\u53ea\u5360\u7528\u5e38\u6570\u7a7a\u95f4\u6765\u5b9e\u73b0\u540e\u5e8f\u904d\u5386\u3002\u8fd9\u79cd\u65b9\u6cd5\u7531 J. H. Morris \u5728 1979 \u5e74\u7684\u8bba\u6587\u300cTraversing Binary Trees Simply and Cheaply\u300d\u4e2d\u9996\u6b21\u63d0\u51fa\uff0c\u56e0\u6b64\u88ab\u79f0\u4e3a Morris \u904d\u5386\u3002"),(0,l.kt)("p",null,"Morris \u904d\u5386\u7684\u6838\u5fc3\u601d\u60f3\u662f\u5229\u7528\u6811\u7684\u5927\u91cf\u7a7a\u95f2\u6307\u9488\uff0c\u5b9e\u73b0\u7a7a\u95f4\u5f00\u9500\u7684\u6781\u9650\u7f29\u51cf\u3002"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u4e3a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u8282\u70b9\u4e2a\u6570\u3002Morris \u904d\u5386\u4e2d\u6bcf\u4e2a\u8282\u70b9\u4f1a\u88ab\u8bbf\u95ee\u4e24\u6b21\uff0c\u56e0\u6b64\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(2n)=O(n)\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002\u53ea\u64cd\u4f5c\u5df2\u7ecf\u5b58\u5728\u7684\u6307\u9488\uff08\u6811\u7684\u7a7a\u95f2\u6307\u9488\uff09\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u5e38\u6570\u7684\u989d\u5916\u7a7a\u95f4\u3002")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Morris"),"\u7684\u901a\u7528\u89e3\u6cd5\u8fc7\u7a0b\u3002"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0",src:t(72208).Z,width:"2020",height:"1122"})),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Morris"),"\u7684\u6574\u4f53\u601d\u8def\u5c31\u662f\u5c06 ",(0,l.kt)("em",{parentName:"p"},"\u4ee5\u67d0\u4e2a\u6839\u7ed3\u70b9\u5f00\u59cb\uff0c\u627e\u5230\u5b83\u5de6\u5b50\u6811\u7684\u6700\u53f3\u4fa7\u8282\u70b9\u4e4b\u540e\u4e0e\u8fd9\u4e2a\u6839\u7ed3\u70b9\u8fdb\u884c\u8fde\u63a5")),(0,l.kt)("p",null,"\u6211\u4eec\u53ef\u4ee5\u4ece ",(0,l.kt)("strong",{parentName:"p"},"\u56fe2")," \u770b\u5230\uff0c\u5982\u679c\u8fd9\u4e48\u8fde\u63a5\u4e4b\u540e\uff0c",(0,l.kt)("strong",{parentName:"p"},"cur")," \u8fd9\u4e2a\u6307\u9488\u662f\u53ef\u4ee5\u5b8c\u6574\u7684\u4ece\u4e00\u4e2a\u8282\u70b9\u987a\u7740\u4e0b\u4e00\u4e2a\u8282\u70b9\u904d\u5386\uff0c\u5c06\u6574\u68f5\u6811\u904d\u5386\u5b8c\u6bd5\uff0c\u76f4\u5230 ",(0,l.kt)("strong",{parentName:"p"},"7")," \u8fd9\u4e2a\u8282\u70b9\u53f3\u4fa7\u6ca1\u6709\u6307\u5411\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"// Java Code\npublic static void preOrderMorris(TreeNode head) {\n    if (head == null) {\n        return;\n    }\n    TreeNode cur1 = head;//\u5f53\u524d\u5f00\u59cb\u904d\u5386\u7684\u8282\u70b9\n    TreeNode cur2 = null;//\u8bb0\u5f55\u5f53\u524d\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\n    while (cur1 != null) {\n        cur2 = cur1.left;\n        if (cur2 != null) {\n            while (cur2.right != null && cur2.right != cur1) {//\u627e\u5230\u5f53\u524d\u5de6\u5b50\u6811\u7684\u6700\u53f3\u4fa7\u8282\u70b9\uff0c\u4e14\u8fd9\u4e2a\u8282\u70b9\u5e94\u8be5\u5728\u6307\u5411\u6839\u7ed3\u70b9\u4e4b\u524d\uff0c\u5426\u5219\u6574\u4e2a\u8282\u70b9\u53c8\u56de\u5230\u4e86\u6839\u7ed3\u70b9\u3002\n                cur2 = cur2.right;\n            }\n            if (cur2.right == null) {//\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u6700\u53f3\u4fa7\u8fd9\u4e2a\u8282\u70b9\u7684\u53f3\u6307\u9488\u6ca1\u6709\u6307\u5411\u6839\u7ed3\u70b9\uff0c\u521b\u5efa\u8fde\u63a5\u7136\u540e\u5f80\u4e0b\u4e00\u4e2a\u5de6\u5b50\u6811\u7684\u6839\u7ed3\u70b9\u8fdb\u884c\u8fde\u63a5\u64cd\u4f5c\u3002\n                cur2.right = cur1;\n                cur1 = cur1.left;\n                continue;\n            } else {//\u5f53\u5de6\u5b50\u6811\u7684\u6700\u53f3\u4fa7\u8282\u70b9\u6709\u6307\u5411\u6839\u7ed3\u70b9\uff0c\u6b64\u65f6\u8bf4\u660e\u6211\u4eec\u5df2\u7ecf\u56de\u5230\u4e86\u6839\u7ed3\u70b9\u5e76\u91cd\u590d\u4e86\u4e4b\u524d\u7684\u64cd\u4f5c\uff0c\u540c\u65f6\u5728\u56de\u5230\u6839\u7ed3\u70b9\u7684\u65f6\u5019\u6211\u4eec\u5e94\u8be5\u5df2\u7ecf\u5904\u7406\u5b8c \u5de6\u5b50\u6811\u7684\u6700\u53f3\u4fa7\u8282\u70b9 \u4e86\uff0c\u628a\u8def\u65ad\u5f00\u3002\n                cur2.right = null;\n            }\n        } \n        cur1 = cur1.right;//\u4e00\u76f4\u5f80\u53f3\u8fb9\u8d70\uff0c\u53c2\u8003\u56fe\n    }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u524d\u5e8f\u904d\u5386")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"\u5728\u67d0\u4e2a\u6839\u7ed3\u70b9\u521b\u5efa\u8fde\u7ebf\u7684\u65f6\u5019\u6253\u5370\u3002\u56e0\u4e3a\u6211\u4eec\u662f\u987a\u7740\u5de6\u8fb9\u7684\u6839\u8282\u70b9\u6765\u521b\u5efa\u8fde\u7ebf\uff0c\u4e14\u521b\u5efa\u7684\u8fc7\u7a0b\u53ea\u6709\u4e00\u6b21\u3002"),(0,l.kt)("li",{parentName:"ol"},"\u6253\u5370\u67d0\u4e9b\u81ea\u8eab\u65e0\u6cd5\u521b\u5efa\u8fde\u7ebf\u7684\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u53f6\u5b50\u8282\u70b9\u3002")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    vector<int> preorderTraversal(TreeNode *root) {\n        vector<int> res;\n        if (root == nullptr) {\n            return res;\n        }\n\n        TreeNode *p1 = root, *p2 = nullptr;\n\n        while (p1 != nullptr) {\n            p2 = p1->left;\n            if (p2 != nullptr) {\n                while (p2->right != nullptr && p2->right != p1) {\n                    p2 = p2->right;\n                }\n                if (p2->right == nullptr) {\n                    res.emplace_back(p1->val);\n                    p2->right = p1;\n                    p1 = p1->left;\n                    continue;\n                } else {\n                    p2->right = nullptr;\n                }\n            } else {\n                res.emplace_back(p1->val);\n            }\n            p1 = p1->right;\n        }\n        return res;\n    }\n};\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u4e2d\u5e8f\u904d\u5386")),(0,l.kt)("p",null,"\u4ece\u6700\u5de6\u4fa7\u5f00\u59cb\u987a\u7740\u53f3\u8282\u70b9\u6253\u5370\u3002\u4e5f\u5c31\u662f\u5728\u5c06cu1\u5207\u6362\u5230\u4e0a\u5c42\u8282\u70b9\u7684\u65f6\u5019\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<int> res;\n        TreeNode *predecessor = nullptr;\n\n        while (root != nullptr) {\n            if (root->left != nullptr) {\n                // predecessor \u8282\u70b9\u5c31\u662f\u5f53\u524d root \u8282\u70b9\u5411\u5de6\u8d70\u4e00\u6b65\uff0c\u7136\u540e\u4e00\u76f4\u5411\u53f3\u8d70\u81f3\u65e0\u6cd5\u8d70\u4e3a\u6b62\n                predecessor = root->left;\n                while (predecessor->right != nullptr && predecessor->right != root) {\n                    predecessor = predecessor->right;\n                }\n                \n                // \u8ba9 predecessor \u7684\u53f3\u6307\u9488\u6307\u5411 root\uff0c\u7ee7\u7eed\u904d\u5386\u5de6\u5b50\u6811\n                if (predecessor->right == nullptr) {\n                    predecessor->right = root;\n                    root = root->left;\n                }\n                // \u8bf4\u660e\u5de6\u5b50\u6811\u5df2\u7ecf\u8bbf\u95ee\u5b8c\u4e86\uff0c\u6211\u4eec\u9700\u8981\u65ad\u5f00\u94fe\u63a5\n                else {\n                    res.push_back(root->val);\n                    predecessor->right = nullptr;\n                    root = root->right;\n                }\n            }\n            // \u5982\u679c\u6ca1\u6709\u5de6\u5b69\u5b50\uff0c\u5219\u76f4\u63a5\u8bbf\u95ee\u53f3\u5b69\u5b50\n            else {\n                res.push_back(root->val);\n                root = root->right;\n            }\n        }\n        return res;\n    }\n};\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u540e\u5e8f\u904d\u5386")),(0,l.kt)("p",null,"\u540e\u5e8f\u904d\u5386\u5c31\u6bd4\u8f83\u590d\u6742\u4e86\u54c8\uff0c\u5148\u770b\u4e00\u4e0b\u56fe"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0",src:t(30215).Z,width:"1064",height:"894"})),(0,l.kt)("p",null,"\u5f53\u6211\u4eec\u5230\u8fbe\u6700\u5de6\u4fa7\uff0c\u4e5f\u5c31\u662f\u5de6\u8fb9\u8fde\u7ebf\u5df2\u7ecf\u521b\u5efa\u5b8c\u6bd5\u4e86\u3002"),(0,l.kt)("p",null,"\u6253\u5370 4\n\u6253\u5370 5 2\n\u6253\u5370 6\n\u6253\u5370 7 3 1"),(0,l.kt)("p",null,"\u6211\u4eec\u5c06\u4e00\u4e2a\u8282\u70b9\u7684\u8fde\u7eed\u53f3\u8282\u70b9\u5f53\u6210\u4e00\u4e2a\u5355\u94fe\u8868\u6765\u770b\u5f85\u3002"),(0,l.kt)("p",null,"\u5f53\u6211\u4eec\u8fd4\u56de\u4e0a\u5c42\u4e4b\u540e\uff0c\u4e5f\u5c31\u662f\u5c06\u8fde\u7ebf\u65ad\u5f00\u7684\u65f6\u5019\uff0c\u6253\u5370\u4e0b\u5c42\u7684\u5355\u94fe\u8868\u3002"),(0,l.kt)("p",null,"\u6bd4\u5982\u8fd4\u56de\u5230\u3000\uff12\uff0c\u6b64\u65f6\u6253\u5370\u3000\uff14\n\u6bd4\u5982\u8fd4\u56de\u5230\u3000\uff11\uff0c\u6b64\u65f6\u6253\u5370\u3000\uff15\u3000\uff12\n\u6bd4\u5982\u8fd4\u56de\u5230\u3000\uff13\uff0c\u6b64\u65f6\u6253\u5370\u3000\uff16"),(0,l.kt)("p",null,"\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5c06\u8fd9\u4e2a\u5355\u94fe\u8868\u9006\u5e8f\u6253\u5370\u5c31\u884c\u4e86\uff0c\u4e0b\u6587\u4e5f\u7ed9\u51fa\u4e86 ",(0,l.kt)("strong",{parentName:"p"},"\u5355\u94fe\u8868\u9006\u5e8f\u4ee3\u7801")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"\u8fd9\u91cc\u4e0d\u5e94\u8be5\u6253\u5370\u5f53\u524d\u5c42\uff0c\u800c\u662f\u4e0b\u4e00\u5c42\uff0c\u5426\u5219\u6839\u7ed3\u70b9\u4f1a\u5148\u4e0e\u53f3\u8fb9\u6253\u5370\u3002")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    void addPath(vector<int> &vec, TreeNode *node) {\n        int count = 0;\n        while (node != nullptr) {\n            ++count;\n            vec.emplace_back(node->val);\n            node = node->right;\n        }\n        reverse(vec.end() - count, vec.end());\n    }\n\n    vector<int> postorderTraversal(TreeNode *root) {\n        vector<int> res;\n        if (root == nullptr) {\n            return res;\n        }\n\n        TreeNode *p1 = root, *p2 = nullptr;\n\n        while (p1 != nullptr) {\n            p2 = p1->left;\n            if (p2 != nullptr) {\n                while (p2->right != nullptr && p2->right != p1) {\n                    p2 = p2->right;\n                }\n                if (p2->right == nullptr) {\n                    p2->right = p1;\n                    p1 = p1->left;\n                    continue;\n                } else {\n                    p2->right = nullptr;\n                    addPath(res, p1->left);\n                }\n            }\n            p1 = p1->right;\n        }\n        addPath(res, root);\n        return res;\n    }\n};\n")),(0,l.kt)("h4",{id:"4\u5c42\u904d\u5386"},"4\uff09\u5c42\u904d\u5386"),(0,l.kt)("p",null,"\u6bcf\u4e00\u5c42\u653e\u5165\u4e00\u4e2a vector \u5199\u6cd5\uff0c\u5982\uff1a[","[3]",",","[9,20]",",","[15,7]","]"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode *root) {\n        vector<vector<int>> res;\n        if (!root) return res;\n\n        queue<TreeNode *> q;\n        q.push(root);\n        while (!q.empty()) {\n            int layerSz = q.size();\n            vector<int> layer;\n            for (int i = 0; i < layerSz; i++) {\n                auto node = q.front();\n                q.pop();\n                layer.push_back(node->val);\n                if (node->left) q.push(node->left);\n                if (node->right) q.push(node->right);\n            }\n            res.push_back(layer);\n        }\n        return res;\n    }\n};\n")),(0,l.kt)("p",null,"\u5168\u90e8\u653e\u4e00\u8d77\uff0c\u5982\uff1a","[3 9 20 15 7 ]"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},'class Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode *root) {\n        vector<int> res;\n        queue<TreeNode *> q;\n        q.push(root);\n        while (!q.empty()) {\n            auto node = q.front();\n            q.pop();\n            res.push_back(node->val);\n            if (node->left) q.push(node->left);\n            if (node->right) q.push(node->right);\n        }\n        for (const auto &c : res) cout << c << " ";\n        return res;\n    }\n};\n')),(0,l.kt)("h3",{id:"3\u4e8c\u53c9\u6811\u7684\u6784\u9020"},"3\u3001\u4e8c\u53c9\u6811\u7684\u6784\u9020"),(0,l.kt)("h4",{id:"\u7531\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"},"\u7531\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u7531\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u5e8f\u5217\u548c\u4e2d\u5e8f\u5e8f\u5217\u53ef\u4ee5\u552f\u4e00\u5730\u786e\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811")),(0,l.kt)("p",null,"\u5728\u5148\u5e8f\u904d\u5386\u5e8f\u5217\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u4e00\u5b9a\u662f\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\uff1a\u800c\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\uff0c\u6839\u7ed3\u70b9\u5fc5\u7136\u5c06\u4e2d\u5e8f\u5e8f\u5217\u5206\u5272\u6210\u4e24\u4e2a\u5b50\u5e8f\u5217\uff0c\u524d\u4e00\u4e2a\u5b50\u5e8f\u5217\u662f\u6839\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u7684\u4e2d\u5e8f\u5e8f\u5217\uff0c\u540e\u4e00\u4e2a\u5b50\u5e8f\u5217\u662f\u6839\u7ed3\u70b9\u7684\u53f3\u5b50\u6811\u7684\u4e2d\u5e8f\u5e8f\u5217\u3002\u6839\u636e\u8fd9\u4e24\u4e2a\u5b50\u5e8f\u5217\uff0c\u5728\u5148\u5e8f\u5e8f\u5217\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u5de6\u5b50\u5e8f\u5217\u548c\u53f3\u5b50\u5e8f\u5217\u3002\u5728\u5148\u5e8f\u5e8f\u5217\u4e2d\uff0c\u5de6\u5b50\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u662f\u5de6\u5b50\u6811\u7684\u6839\u7ed3\u70b9\uff0c\u53f3\u5b50\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u662f\u53f3\u5b50\u6811\u7684\u6839\u7ed3\u70b9\u3002\u5982\u6b64\u9012\u5f52\u5730\u8fdb\u884c\u4e0b\u53bb\uff0c\u4fbf\u80fd\u552f\u4e00\u5730\u786e\u5b9a\u8fd9\u68f5\u4e8c\u53c9\u6811\u3002"),(0,l.kt)("p",null,"\u540c\u7406\uff0c",(0,l.kt)("strong",{parentName:"p"},"\u7531\u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u5e8f\u5217\u548c\u4e2d\u5e8f\u5e8f\u5217\u4e5f\u53ef\u4ee5\u552f\u4e00\u5730\u786e\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811")),(0,l.kt)("p",null,"\u56e0\u4e3a\u540e\u5e8f\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u5c31\u5982\u540c\u5148\u5e8f\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u7ed3\u70b9\uff0c\u53ef\u4ee5\u5c06\u4e2d\u5e8f\u5e8f\u5217\u5206\u5272\u6210\u4e24\u4e2a\u5b50\u5e8f\u5217\uff0c\u7136\u540e\u91c7\u7528\u7c7b\u4f3c\u7684\u65b9\u6cd5\u9012\u5f52\u5730\u8fdb\u884c\u5212\u5206\uff0c\u8fdb\u800c\u5f97\u5230\u4e00\u682a\u4e8c\u53c9\u6811\u3002"),(0,l.kt)("p",null,"\u7531\u4e8c\u53c9\u6811\u7684",(0,l.kt)("strong",{parentName:"p"},"\u5c42\u5e8f\u5e8f\u5217\u548c\u4e2d\u5e8f\u5e8f\u5217\u4e5f\u53ef\u4ee5\u552f\u4e00\u5730\u786e\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811"),"\uff0c\u5b9e\u73b0\u65b9\u6cd5\u7559\u7ed9\u8bfb\u8005\u601d\u8003\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u82e5",(0,l.kt)("strong",{parentName:"p"},"\u53ea\u77e5\u9053\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u5e8f\u5217\u548c\u540e\u5e8f\u5e8f\u5217\uff0c\u5219\u65e0\u6cd5\u552f\u4e00\u786e\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811"),"\u3002"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u4f46\u662f\uff0c\u5982\u679c\u8f93\u5165\u4e2d\u6709 None \u6765\u6807\u8bb0\u6ca1\u6709\u8282\u70b9\u4e86\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u524d\u5e8f\u5c31\u80fd\u6062\u590d")),(0,l.kt)("h4",{id:"105-\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"},(0,l.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/"},"105. \u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811")),(0,l.kt)("p",null,"1\u3001\u9898\u76ee\u544a\u8bc9\u6211\u4eec\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u624d\u53ef\u4ee5\u7528 inorderIdx \u8bb0\u5f55\u5176\u4e2d\u8282\u70b9\u7684index"),(0,l.kt)("p",null,"2\u3001Input: preorder = ","[3,9,20,15,7]",", inorder = ","[9,3,15,20,7]"),(0,l.kt)("p",null," \t\u5982\u679c\u8f93\u5165\u4e2d\u6709 None \u6765\u6807\u8bb0\u6ca1\u6709\u8282\u70b9\u4e86\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u524d\u5e8f\u5c31\u80fd\u6062\u590d"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:\n        # \u5148\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u662f\u6839\u8282\u70b9\uff0c\u5de6\u5b50\u6811\uff0c\u53f3\u5b50\u6811\u3002\u4e2d\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u662f\u5de6\u5b50\u6811\uff0c\u6839\u8282\u70b9\uff0c\u53f3\u5b50\u6811\u3002\n        # \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u6839\u636e\u5148\u5e8f\u904d\u5386\u5f97\u5230\u6839\u8282\u70b9\uff0c\u7136\u540e\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u5230\u6839\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u5b83\u7684\u5de6\u8fb9\u5c31\u662f\u5de6\u5b50\u6811\u7684\u8282\u70b9\uff0c\u53f3\u8fb9\u5c31\u662f\u53f3\u5b50\u6811\u7684\u8282\u70b9\u3002\n        # \u751f\u6210\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u5c31\u53ef\u4ee5\u9012\u5f52\u7684\u8fdb\u884c\u4e86\u3002\n        inorderIdx = collections.defaultdict(int)\n        for i, v in enumerate(inorder):\n            inorderIdx[v] = i\n\n        def dfs(preStart, preEnd, inStart, inEnd):\n            # preStart  \u6307\u5411\u524d\u5e8f\u7684\u8d77\u70b9\n            # preEnd    \u6307\u5411\u524d\u5e8f\u7684\u7ec8\u70b9\n            # inStart   \u6307\u5411\u4e2d\u5e8f\u7684\u8d77\u70b9\n            # inEnd     \u6307\u5411\u4e2d\u5e8f\u7684\u7ec8\u70b9\n            if preStart > preEnd or inStart > inEnd:\n                return None\n\n            root_val = preorder[preStart]\n            root_in_idx = inorderIdx[root_val]\n            left_size = root_in_idx - inStart\n\n            node = TreeNode(root_val)\n            node.left = dfs(preStart+1, preStart+left_size, inStart, root_in_idx-1)\n            node.right = dfs(preStart+left_size+1, preEnd, root_in_idx+1, inEnd)\n            # \u5de6\u5b50\u6811\uff1a\u524d\u5e8f\u8d77\u70b9+1            \u524d\u5e8f\u8d77\u70b9+\u5de6\u5b50\u6811\u5bbd\u5ea6 \u4e2d\u5e8f\u8d77\u70b9    \u8282\u70b9\u4e2d\u5e8f-1\n            # \u53f3\u5b50\u6811\uff1a\u524d\u5e8f\u8d77\u70b9+\u5de6\u5b50\u6811\u5bbd\u5ea6+1 \u524d\u5e8f\u7ec8\u70b9            \u8282\u70b9\u4e2d\u5e8f+1  \u4e2d\u5e8f\u7ec8\u70b9\n            # \u8f85\u52a9\u8bb0\u5fc6\n            # \u524d\u5e8f\uff1a\u8282\u70b9 + \u524d\u5e8f\u8d77\u70b9+1 -> \u524d\u5e8f\u8d77\u70b9+\u5de6\u5b50\u6811\u5bbd\u5ea6 -> \u524d\u5e8f\u8d77\u70b9+\u5de6\u5b50\u6811\u5bbd\u5ea6+1 -> \u524d\u5e8f\u7ec8\u70b9\n            # \u4e2d\u5e8f\uff1a\u4e2d\u5e8f\u8d77\u70b9 -> \u8282\u70b9\u4e2d\u5e8f-1 + \u8282\u70b9 + \u8282\u70b9\u4e2d\u5e8f+1 -> \u4e2d\u5e8f\u7ec8\u70b9\n            \n            return node\n\n        return dfs(0, len(preorder) - 1, 0, len(inorder) - 1)\n")),(0,l.kt)("h4",{id:"106-\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"},(0,l.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/"},"106. \u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811")),(0,l.kt)("p",null,"\u4e0e\u4e0a\u9898\u540c\u7406"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> TreeNode:\n\n        node_in_idx = collections.defaultdict(int)\n        for i, v in enumerate(inorder):\n            node_in_idx[v] = i\n\n        def dfs(postStart, postEnd, inStart, inEnd):\n            if postStart > postEnd or inStart > inEnd:\n                return None\n            \n            node_val = postorder[postEnd]\n            node_idx = node_in_idx[node_val]\n            left_size = node_idx - inStart\n\n            node = TreeNode(node_val)\n            node.left = dfs(postStart, postStart+left_size-1, inStart, node_idx-1)\n            node.right = dfs(postStart+left_size, postEnd-1, node_idx+1, inEnd)\n            return node\n        \n        return dfs(0, len(postorder)-1, 0, len(inorder)-1)\n")),(0,l.kt)("h4",{id:"449-\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811"},(0,l.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/serialize-and-deserialize-bst/"},"449. \u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u4e3a\u9012\u589e\u7684")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u5982\u679c\u5df2\u77e5\u641c\u7d22\u6811\u7684\u5148\u5e8f\u6216\u8005\u540e\u5e8f\uff0c\u6392\u4e2a\u5e8f\uff0c\u5c31\u53ef\u5f97\u5230\u4e2d\u5e8f")),(0,l.kt)("p",null,"\u65b9\u6cd5\u4e00\uff1a\u6b64\u9898\u4e2d\u5143\u7d20\u7684\u503c\u662f\u6709\u91cd\u590d\u7684\uff0c\u4f46\u662f\u5b83\u662f\u4e2a\u641c\u7d22\u6811\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u7528 inOrderIdx \u8bb0\u5f55\u8282\u70b9\u7684index\uff08\u6b64\u60f3\u6cd5\u4e0d\u4e00\u5b9a\u5bf9\uff09"),(0,l.kt)("p",null,"\u65b9\u6cd5\u4e8c\uff1a\u6216\u8005",(0,l.kt)("strong",{parentName:"p"},"\u5728\u5e8f\u5217\u5316\u65f6\u5019\uff0c\u5c06\u6ca1\u6709\u7684\u8282\u70b9\u7528 None \u6765\u8bb0\u5f55"),"\uff0c\u5c31\u53ef\u4ee5\u7528\u540c\u6837\u7684\u6392\u5e8f\uff08\u53ea\u7528\u4e00\u4e2a\u524d\u5e8f\uff09\u6062\u590d\u4e3a\u6811\uff0c\u8fd8\u53ef\u4ee5\u6709\u6548\u907f\u514d\u5143\u7d20\u7684\u503c\u91cd\u590d\uff0c\u5f3a\u70c8\u5efa\u8bae\u7528\u65b9\u6cd5\u4e8c"),(0,l.kt)("p",null,"\u9898\u89e3\uff1a",(0,l.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/serialize-and-deserialize-bst/solution/xu-lie-hua-he-fan-xu-lie-hua-er-cha-sou-0fq67/"},"https://leetcode-cn.com/problems/serialize-and-deserialize-bst/solution/xu-lie-hua-he-fan-xu-lie-hua-er-cha-sou-0fq67/")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# \u65b9\u6cd5\u4e00 76 ms 19.7 MB\nclass Codec:\n\n    def serialize(self, root: TreeNode) -> str:\n        """Encodes a tree to a single string.\n        """\n        # https://oi-wiki.org/ds/bst/\n        # \u641c\u7d22\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u6392\u5217\u65f6\u4ece\u5c0f\u5230\u5927\u7684\n        # \u8fd4\u56de\u524d\u5e8f\u6392\u5217\uff0c\u89e3\u7801\u65f6\u5c06\u524d\u5e8f\u6392\u5217\u6392\u4e2a\u5e8f\uff0c\u5c31\u662f\u4e2d\u5e8f\u6392\u5217\n        def dfs(node):\n            if not node:\n                return\n            preOrder.append(node.val)\n            dfs(node.left)\n            dfs(node.right)\n\n        preOrder = []\n        dfs(root)\n        return ",".join(map(str, preOrder))\n        \n    def deserialize(self, data: str) -> TreeNode:\n        """Decodes your encoded data to tree.\n        """\n        # \u4ece\u524d\u5e8f\u6392\u5217\uff0c\u6839\u636e\u4e8c\u53c9\u641c\u7d22\u6811\u7279\u6027\u5f97\u51fa\u4e2d\u5e8f\u6392\u5217\n        if data == "":\n            return None\n        preOrder = [int(x) for x in data.split(",")]\n        inOrder = sorted(preOrder)\n        \n        # \u5982\u679c\u8282\u70b9\u7684\u6570\u503c\u6709\u91cd\u590d\u7684\uff0c\u5c31\u4e0d\u80fd\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\u8bb0\u5f55\u4f4d\u7f6e\u4e86\uff0c\u800c\u662f\u5728\u6bcf\u6b21\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u627e\n        inOrderIdx = collections.defaultdict(int)\n        for i, v in enumerate(inOrder):\n            inOrderIdx[v] = i\n\n        def dfs(preStart, preEnd, inStart, inEnd):\n            if preStart > preEnd or inStart > inEnd:\n                return None\n            \n            node_val = preOrder[preStart]\n            # node_in_idx = inStart\n            # while inOrder[node_in_idx] != node_val:\n            #     node_in_idx += 1\n            node_in_idx = inOrderIdx[node_val]\n\n            left_size = node_in_idx - inStart\n\n            node = TreeNode(node_val)\n            node.left = dfs(preStart+1, preStart+left_size, inStart, node_in_idx-1)\n            node.right = dfs(preStart+left_size+1, preEnd, node_in_idx+1, inEnd)\n            return node\n\n        return dfs(0, len(preOrder)-1, 0, len(inOrder)-1)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# \u65b9\u6cd5\u4e8c 72 ms 19.6 MB\nclass Codec:\n\n    def serialize(self, root: TreeNode) -> str:\n        """Encodes a tree to a single string.\n        """\n        def dfs(node):\n            if not node:\n                preOrder.append("None")\n                return\n            preOrder.append(str(node.val))\n            dfs(node.left)\n            dfs(node.right)\n        \n        preOrder = []\n        dfs(root)\n        return ",".join(preOrder)\n        \n\n    def deserialize(self, data: str) -> TreeNode:\n        """Decodes your encoded data to tree.\n        """\n        if data == "":\n            return None\n        # \u5f3a\u70c8\u5efa\u8bae\uff0c\u8fd9\u91cc\u4e0d\u8981\u7528 [] (580 ms 19.9 MB),\u8981\u7528 collections.deque (72 ms 19.6 MB)\n        preOrder = collections.deque([i for i in data.split(",")])\n        def dfs(preOrder):\n            node_val = preOrder.popleft()\n            if node_val == "None":\n                return None\n            node = TreeNode(int(node_val))\n            node.left = dfs(preOrder)\n            node.right = dfs(preOrder)\n            return node\n        return dfs(preOrder)\n')),(0,l.kt)("h4",{id:"297-\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316"},(0,l.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/"},"297. \u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u539f\u7406\uff1a\u53ef\u4ee5\u5728\u8f93\u5165\u4e2d\u901a\u8fc7 None \u6765\u6807\u8bb0\u6ca1\u6709\u8282\u70b9\u4e86\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u524d\u5e8f\uff08\u6216\u8005\u4e2d\u5e8f\u3001\u6216\u8005\u540e\u5e8f\uff09\u5c31\u80fd\u6062\u590d")),(0,l.kt)("p",null,"dfs \u7528\u540c\u6837\u7684\u65b9\u6cd5\u653b\u7834 104 ms 19.6 MB \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'class Codec:\n\n    def serialize(self, root):\n        """Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        """\n        def dfs(node):\n            if not node:\n                inOrder.append("None")\n                return \n            inOrder.append(str(node.val))\n            dfs(node.left)\n            dfs(node.right)\n\n        inOrder = collections.deque()\n        dfs(root)\n        return ",".join(inOrder)\n\n    def deserialize(self, data):\n        """Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        """\n        if data == "":\n            return None\n        \n        def dfs():\n            node_val = inOrder.popleft()\n            if node_val == "None":\n                return\n            node = TreeNode(node_val)\n            node.left = dfs()\n            node.right = dfs()\n            return node\n\n        inOrder = collections.deque([i for i in data.split(",")])\n        return dfs()\n')),(0,l.kt)("p",null,"bfs: 100 ms 19.7 MB \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'class Codec:\n\n    def serialize(self, root):\n        """Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        """\n        if not root:\n            return ""\n        layerOrder = []\n        queue = collections.deque()\n        queue.append(root)\n\n        while queue:\n            node = queue.popleft()\n            if node:\n                queue.append(node.left)\n                queue.append(node.right)\n                layerOrder.append(str(node.val))\n            else:\n                layerOrder.append("None")\n        print(",".join(layerOrder))\n        return ",".join(layerOrder)\n        \n    def deserialize(self, data):\n        """Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        """\n        if data == "":\n            return None\n            \n        layerOrder = [i for i in data.split(",")]\n        queue = collections.deque()\n\n        root = TreeNode(layerOrder[0])\n        queue.append(root)\n        idx = 1\n        while queue:\n            node = queue.popleft()\n            if layerOrder[idx] != "None":\n                node.left = TreeNode(int(layerOrder[idx]))\n                queue.append(node.left)\n            idx += 1\n            if layerOrder[idx] != "None":\n                node.right = TreeNode(int(layerOrder[idx]))\n                queue.append(node.right)\n            idx += 1\n        return root\n')),(0,l.kt)("h3",{id:"4\u7ebf\u7d22\u4e8c\u53c9\u6811"},"4\u3001\u7ebf\u7d22\u4e8c\u53c9\u6811"),(0,l.kt)("p",null,"\u904d\u5386\u4e8c\u53c9\u6811\u662f\u4ee5\u4e00\u5b9a\u7684\u89c4\u5219\u5c06\u4e8c\u53c9\u6811\u4e2d\u7684\u7ed3\u70b9\u6392\u5217\u6210\u4e00\u4e2a\u7ebf\u6027\u5e8f\u5217\uff0c\u4ece\u800c\u5f97\u5230\u51e0\u79cd\u904d\u5386\u5e8f\u5217\uff0c",(0,l.kt)("strong",{parentName:"p"},"\u4f7f\u5f97\u8be5\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u7ed3\u70b9(\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u9664\u5916\uff09\u90fd\u6709\u4e00\u4e2a\u76f4\u63a5\u524d\u9a71\u548c\u76f4\u63a5\u540e\u7ee7"),"\u3002"),(0,l.kt)("p",null,"\u4f20\u7edf\u7684\u4e8c\u53c9\u94fe\u8868\u5b58\u50a8\u4ec5\u80fd\u4f53\u73b0\u4e00\u79cd\u7236\u5b50\u5173\u7cfb\uff0c\u4e0d\u80fd\u76f4\u63a5\u5f97\u5230\u7ed3\u70b9\u5728\u904d\u5386\u4e2d\u7684\u524d\u9a71\u6216\u540e\u7ee7\u3002\u524d\u9762\u63d0\u5230\uff0c\u5728\u542bn\u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\u4e2d\uff0c\u6709n+1\u4e2a\u7a7a\u6307\u9488\u3002\u8fd9\u662f\u56e0\u4e3a\u6bcf\u4e2a\u53f6\u7ed3\u70b9\uff08n0\u4e2a\uff09\u67092\u4e2a\u7a7a\u6307\u9488\uff0c\u6bcf\u4e2a\u5ea6\u4e3a1\u7684\u7ed3\u70b9\uff08n1\u4e2a\uff09\u67091\u4e2a\u7a7a\u6307\u9488\uff0c\u5ea6\u4e3a2\u7684\u7ed3\u70b9\u6709n2\u4e2a\uff0c\u7a7a\u6307\u9488\u603b\u6570\u4e3a ",(0,l.kt)("inlineCode",{parentName:"p"},"2*n0+n1"),"\uff0c\u53c8\u56e0\u4e3a ",(0,l.kt)("inlineCode",{parentName:"p"},"n0=n2+1"),"\uff0c\u6240\u4ee5\u7a7a\u6307\u9488\u603b\u6570\u4e3a ",(0,l.kt)("inlineCode",{parentName:"p"},"n0+n1+n2+1=n+1"),"\u3002"),(0,l.kt)("p",null,"\u7531\u6b64\u8bbe\u60f3\u5229\u7528\u8fd9\u4e9b\u7a7a\u6307\u9488\u6765\u5b58\u653e\u6307\u5411\u5176\u524d\u9a71\u6216\u540e\u7ee7\u7684\u6307\u9488\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u50cf",(0,l.kt)("strong",{parentName:"p"},"\u904d\u5386\u5355\u94fe\u8868\u90a3\u6837\u65b9\u4fbf\u5730\u904d\u5386\u4e8c\u53c9\u6811"),"\u3002"),(0,l.kt)("p",null,"\u5f15\u5165\u7ebf\u7d22\u4e8c\u53c9\u6811\u6b63\u662f\u4e3a\u4e86",(0,l.kt)("strong",{parentName:"p"},"\u52a0\u5feb\u67e5\u627e\u7ed3\u70b9\u524d\u9a71\u548c\u540e\u7ee7\u7684\u901f\u5ea6"),"\u3002"),(0,l.kt)("p",null,(0,l.kt)("img",{src:t(7572).Z,width:"1482",height:"842"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u53ef\u5229\u7528\u4e2d\u5e8f\u3001\u524d\u5e8f\u3001\u540e\u5e8f\u7684\u65b9\u5f0f\u6784\u9020\u7ebf\u7d22\u4e8c\u53c9\u6811")),(0,l.kt)("p",null,"\u6570\u636e\u7ed3\u6784-136\u9875"),(0,l.kt)("h2",{id:"\u4e09\u6811\u548c\u68ee\u6797"},"\u4e09\u3001\u6811\u548c\u68ee\u6797"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"5-4",src:t(16839).Z,width:"2722",height:"1236"})),(0,l.kt)("h3",{id:"1\u6811\u7684\u5b58\u50a8"},"1\u3001\u6811\u7684\u5b58\u50a8"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u6ce8\u610f\uff1a\u533a\u522b\u6811\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u4e0e\u4e8c\u53c9\u6811\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784")),(0,l.kt)("p",null,"\u5728\u6811\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u4e2d\uff0c\u6570\u7ec4\u4e0b\u6807\u4ee3\u8868\u7ed3\u70b9\u7684\u7f16\u53f7\uff0c\u4e0b\u6807\u4e2d\u6240\u5b58\u7684\u5185\u5bb9\u6307\u793a\u4e86\u7ed3\u70b9\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u800c\u5728\u4e8c\u53c9\u6811\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784\u4e2d\uff0c\u6570\u7ec4\u4e0b\u6807\u65e2\u4ee3\u8868\u4e86\u7ed3\u70b9\u7684\u7f16\u53f7\uff0c\u53c8\u6307\u793a\u4e86\u4e8c\u53c9\u6811\u4e2d\u5404\u7ed3,\u70b9\u4e4b\u95ee\u7684\u5173\u7cfb\u3002\u5f53\u7136\uff0c\u4e8c\u53c9\u6811\u5c5e\u4e8e\u6811\uff0c\u56e0\u6b64",(0,l.kt)("strong",{parentName:"p"},"\u4e8c\u53c9\u6811\u90fd\u53ef\u4ee5\u7528\u6811\u7684\u5b58\u50a8\u7ed3\u6784\u6765\u5b58\u50a8\uff0c\u4f46\u6811\u5374\u4e0d\u90fd\u80fd\u7528\u4e8c\u53c9\u6811\u7684\u5b58\u50a8\u7ed3\u6784\u6765\u5b58\u50a8"),"\u3002"),(0,l.kt)("h4",{id:"1\u53cc\u4eb2\u8868\u793a\u6cd5"},"1\uff09\u53cc\u4eb2\u8868\u793a\u6cd5"),(0,l.kt)("p",null,"\u8fd9\u79cd\u5b58\u50a8\u65b9\u5f0f",(0,l.kt)("strong",{parentName:"p"},"\u91c7\u7528\u4e00\u7ec4\u8fde\u7eed\u7a7a\u95f4\u6765\u5b58\u50a8\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u540c\u65f6\u5728\u6bcf\u4e2a\u7ed3\u70b9\u4e2d\u589e\u8bbe\u4e00\u4e2a\u4f2a\u6307\u9488\uff0c\u6307\u793a\u5176\u53cc\u4eb2\u7ed3\u70b9\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e"),"\u3002"),(0,l.kt)("p",null,(0,l.kt)("img",{src:t(31656).Z,width:"1224",height:"544"})),(0,l.kt)("p",null,"\u8be5\u5b58\u50a8\u7ed3\u6784\u5229\u7528\u4e86\u6bcf\u4e2a\u7ed3\u70b9\uff08\u6839\u7ed3\u70b9\u9664\u5916\uff09\u53ea\u6709\u552f\u4e00\u53cc\u4eb2\u7684\u6027\u8d28\uff0c",(0,l.kt)("strong",{parentName:"p"},"\u53ef\u4ee5\u5f88\u5feb\u5f97\u5230\u6bcf\u4e2a\u7ed3\u70b9\u7684\u53cc\u4eb2\u7ed3\u70b9"),"\uff0c\u4f46",(0,l.kt)("strong",{parentName:"p"},"\u6c42\u7ed3\u70b9\u7684\u5b69\u5b50\u65f6\u9700\u8981\u904d\u5386\u6574\u4e2a\u7ed3\u6784"),"\u3002"),(0,l.kt)("h4",{id:"2\u5b69\u5b50\u8868\u793a\u6cd5"},"2\uff09\u5b69\u5b50\u8868\u793a\u6cd5"),(0,l.kt)("p",null,"\u5b69\u5b50\u8868\u793a\u6cd5\u662f",(0,l.kt)("strong",{parentName:"p"},"\u5c06\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5b69\u5b50\u7ed3\u70b9\u90fd\u7528\u5355\u94fe\u8868\u94fe\u63a5\u8d77\u6765"),"\u5f62\u6210\u4e00\u4e2a\u7ebf\u6027\u7ed3\u6784\uff0c\u6b64\u65f6n\u4e2a\u7ed3\u70b9\u5c31\u6709n\u4e2a\u5b69\u5b50\u94fe\u8868\uff08\u53f6\u5b50\u7ed3\u70b9\u7684\u5b69\u5b50\u94fe\u8868\u4e3a\u7a7a\u8868\uff09\u3002"),(0,l.kt)("p",null,"\u8fd9\u79cd\u5b58\u50a8\u65b9\u5f0f\u5bfb\u627e\u5b50\u5973\u7684\u64cd\u4f5c\u975e\u5e38\u76f4\u63a5\uff0c\u800c\u5bfb\u627e\u53cc\u4eb2\u7684\u64cd\u4f5c\u9700\u8981\u904d\u5386n\u4e2a\u7ed3\u70b9\u4e2d\u5b69\u5b50\u94fe\u8868\u6307\u9488\u57df\u6240\u6307\u5411\u7684n\u4e2a\u5b69\u5b50\u94fe\u8868\u3002"),(0,l.kt)("p",null,(0,l.kt)("img",{src:t(2906).Z,width:"632",height:"540"})),(0,l.kt)("h4",{id:"3\u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5"},"3\uff09\u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5\u53c8\u79f0\u4e8c\u53c9\u6811\u8868\u793a\u6cd5\uff0c\u5373\u4ee5\u4e8c\u53c9\u94fe\u8868\u4f5c\u4e3a\u6811\u7684\u5b58\u50a8\u7ed3\u6784"),"\u3002\u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5\u4f7f\u6bcf\u4e2a\u7ed3\u70b9\u5305\u62ec\u4e09\u90e8\u5206\u5185\u5bb9\uff1a\u7ed3\u70b9\u503c\u3001\u6307\u5411\u7ed3\u70b9\u7b2c\u4e00\u4e2a\u5b69\u5b50\u7ed3\u70b9\u7684\u6307\u9488\uff0c\u53ca\u6307\u5411\u7ed3\u70b9\u4e0b\u4e00\u4e2a\u5144\u5f1f\u7ed3\u70b9\u7684\u6307\u9488\uff08\u6cbf\u6b64\u57df\u53ef\u4ee5\u627e\u5230\u7ed3\u70b9\u7684\u6240\u6709\u5144\u5f1f\u7ed3\u70b9\uff09"),(0,l.kt)("p",null,(0,l.kt)("img",{src:t(68091).Z,width:"454",height:"546"})),(0,l.kt)("p",null,"\u8fd9\u79cd\u5b58\u50a8\u8868\u793a\u6cd5\u6bd4\u8f83\u7075\u6d3b\uff0c\u5176\u6700\u5927\u7684\u4f18\u70b9\u662f\u53ef\u4ee5\u65b9\u4fbf\u5730\u5b9e\u73b0\u6811\u8f6c\u6362\u4e3a\u4e8c\u53c9\u6811\u7684\u64cd\u4f5c\uff0c\u6613\u4e8e\u67e5\u627e\u7ed3\u70b9\u7684\u5b69\u5b50\u7b49\uff0c\u4f46\u7f3a\u70b9\u662f\u4ece\u5f53\u524d\u7ed3\u70b9\u67e5\u627e\u5176\u53cc\u4eb2\u7ed3\u70b9\u6bd4\u8f83\u9ebb\u70e6\u3002\u82e5\u4e3a\u6bcf\u4e2a\u7ed3\u70b9\u589e\u8bbe\u4e00\u4e2a parent \u57df\u6307\u5411\u5176\u7236\u7ed3\u70b9\uff0c\u5219\u67e5\u627e\u7ed3\u70b9\u7684\u7236\u7ed3\u70b9\u4e5f\u5f88\u65b9\u4fbf\u3002"),(0,l.kt)("h3",{id:"2\u6811\u68ee\u6797\u548c\u4e8c\u53c9\u6811\u7684\u8f6c\u6362"},"2\u3001\u6811\u3001\u68ee\u6797\u548c\u4e8c\u53c9\u6811\u7684\u8f6c\u6362"),(0,l.kt)("p",null,"\u6570\u636e\u7ed3\u6784-162\u9875"),(0,l.kt)("h3",{id:"3\u6811\u548c\u68ee\u6797\u7684\u904d\u5386"},"3\u3001\u6811\u548c\u68ee\u6797\u7684\u904d\u5386"),(0,l.kt)("p",null,"\u6570\u636e\u7ed3\u6784-163\u9875"))}u.isMDXComponent=!0},93891:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/5-1-568f704721ba4b42244c097064682d31.png"},45547:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/5-10-469592720903a9466f4a8808490b4985.png"},50227:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/5-11-3d07b433974b4c7b9d030e96eb3ffb17.png"},7572:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/5-12-de327ab66cef4b9151fff75464ed80ea.png"},31656:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/5-13-102cb246e26020f21f9929fc5bba07fc.png"},2906:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/5-14-3aa47ff96f40121e4ee79d597c3e8743.png"},68091:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/5-15-ff077febcf4f4daba4071b957f5d6185.png"},87047:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/5-2-7d8d373b14152c811964b141be9497b5.png"},63628:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/5-3-9db4774abb4ceb74246da58d5d721fbb.png"},16839:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/5-4-d4b99a9823bbec442da4a1ef62c1b510.png"},96616:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/5-9-d66026ac8c024149d84511ce0da7e694.png"},24440:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/tree-sol-1-ba16f10cc58c1c3182711d3b64c12de2.png"},73057:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/tree-sol-2-869bb94c1643060bba8d39a834931f0f.png"},72208:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/tree-sol-3-79b24a03cf443e890b84e0ee13221895.png"},30215:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/tree-sol-4-aefcff293731fbc2081abb092a5d9d91.png"},28660:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/\u4e8c\u53c9\u6811-028728a05c7a2e94fd2af20ee71ac230.png"}}]);