"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2783],{3905:(n,e,t)=>{t.d(e,{Zo:()=>s,kt:()=>d});var r=t(67294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},l=Object.keys(n);for(r=0;r<l.length;r++)t=l[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(r=0;r<l.length;r++)t=l[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var u=r.createContext({}),p=function(n){var e=r.useContext(u),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},s=function(n){var e=p(n.components);return r.createElement(u.Provider,{value:e},n.children)},c="mdxType",m={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,l=n.originalType,u=n.parentName,s=a(n,["components","mdxType","originalType","parentName"]),c=p(t),f=i,d=c["".concat(u,".").concat(f)]||c[f]||m[f]||l;return t?r.createElement(d,o(o({ref:e},s),{},{components:t})):r.createElement(d,o({ref:e},s))}));function d(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var l=t.length,o=new Array(l);o[0]=f;var a={};for(var u in e)hasOwnProperty.call(e,u)&&(a[u]=e[u]);a.originalType=n,a[c]="string"==typeof n?n:i,o[1]=a;for(var p=2;p<l;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},51121:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>a,toc:()=>p});var r=t(87462),i=(t(67294),t(3905));const l={},o=void 0,a={unversionedId:"Algorithm/\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u5e8f\u5217DP/<\u5b9a\u957fLIS>-\u9012\u589e\u7684\u4e09\u5143\u5b50\u5e8f\u5217",id:"Algorithm/\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u5e8f\u5217DP/<\u5b9a\u957fLIS>-\u9012\u589e\u7684\u4e09\u5143\u5b50\u5e8f\u5217",title:"<\u5b9a\u957fLIS>-\u9012\u589e\u7684\u4e09\u5143\u5b50\u5e8f\u5217",description:"\u9898\u76ee\uff1a334. \u9012\u589e\u7684\u4e09\u5143\u5b50\u5e8f\u5217",source:"@site/docs/Algorithm/3-\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u5e8f\u5217DP/334-<\u5b9a\u957fLIS>-\u9012\u589e\u7684\u4e09\u5143\u5b50\u5e8f\u5217.md",sourceDirName:"Algorithm/3-\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u5e8f\u5217DP",slug:"/Algorithm/\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u5e8f\u5217DP/<\u5b9a\u957fLIS>-\u9012\u589e\u7684\u4e09\u5143\u5b50\u5e8f\u5217",permalink:"/docs/Algorithm/\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u5e8f\u5217DP/<\u5b9a\u957fLIS>-\u9012\u589e\u7684\u4e09\u5143\u5b50\u5e8f\u5217",draft:!1,tags:[],version:"current",sidebarPosition:334,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<LIS>-\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217",permalink:"/docs/Algorithm/\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u5e8f\u5217DP/<LIS>-\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217"},next:{title:"<\u4e8c\u7ef4LIS-\u6811\u72b6\u6570\u7ec4>-\u4fc4\u7f57\u65af\u5957\u5a03\u4fe1\u5c01\u95ee\u9898",permalink:"/docs/Algorithm/\u52a8\u6001\u89c4\u5212/\u4f8b\u9898-\u5e8f\u5217DP/<\u4e8c\u7ef4LIS-\u6811\u72b6\u6570\u7ec4>-\u4fc4\u7f57\u65af\u5957\u5a03\u4fe1\u5c01\u95ee\u9898"}},u={},p=[{value:"\u65b9\u6cd5\u4e00\uff1a\u52a8\u6001\u89c4\u5212\uff08\u8d85\u65f6\uff09",id:"\u65b9\u6cd5\u4e00\u52a8\u6001\u89c4\u5212\u8d85\u65f6",level:2},{value:"\u65b9\u6cd5\u4e8c\uff1a\u4e8c\u5206+\u8d2a\u5fc3",id:"\u65b9\u6cd5\u4e8c\u4e8c\u5206\u8d2a\u5fc3",level:2},{value:"\u65b9\u6cd5\u4e09\uff1a\u5b9a\u957f\u4e0a\u5347\u5b50\u5e8f\u5217",id:"\u65b9\u6cd5\u4e09\u5b9a\u957f\u4e0a\u5347\u5b50\u5e8f\u5217",level:2}],s={toc:p};function c(n){let{components:e,...t}=n;return(0,i.kt)("wrapper",(0,r.Z)({},s,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"\u9898\u76ee\uff1a",(0,i.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/increasing-triplet-subsequence/"},"334. \u9012\u589e\u7684\u4e09\u5143\u5b50\u5e8f\u5217")),(0,i.kt)("h2",{id:"\u65b9\u6cd5\u4e00\u52a8\u6001\u89c4\u5212\u8d85\u65f6"},"\u65b9\u6cd5\u4e00\uff1a\u52a8\u6001\u89c4\u5212\uff08\u8d85\u65f6\uff09"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"75 / 76")," \u4e2a\u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b"),(0,i.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},"O(n^2)")),(0,i.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},"O(n)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    int lis(vector<int>& nums) {\n        int n = nums.size();\n        // dp[i]\uff0c\u4ee5 i \u4f4d\u7f6e\u4e3a\u7ed3\u5c3e\u7684\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u9ed8\u8ba4\u4e3a1\n        vector<int> dp(n, 1);\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (nums[i] > nums[j]) {\n                    dp[i] = max(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        return *max_element(dp.begin(), dp.end());\n    }\n\n    bool increasingTriplet(vector<int>& nums) {\n        // \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217 \u7684\u957f\u5ea6\u662f\u5426\u5927\u4e8e 3\n        int len = lis(nums);\n        return len >= 3;\n    }\n};\n")),(0,i.kt)("h2",{id:"\u65b9\u6cd5\u4e8c\u4e8c\u5206\u8d2a\u5fc3"},"\u65b9\u6cd5\u4e8c\uff1a\u4e8c\u5206+\u8d2a\u5fc3"),(0,i.kt)("p",null,"\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e00\u65e6\u8d85\u8fc7 3 \u5c31\u8fd4\u56de true \u9000\u51fa\uff0c\u4e0d\u8fc7\u4e0d\u662f\u8fd9\u9053\u9898\u7684\u91cd\u70b9"),(0,i.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},"O(nlogn)")),(0,i.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},"O(logn)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    int lis(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> tail = {nums[0]};\n        for (int i = 1; i < n; i++) {\n            int end = *tail.rbegin();\n            if (nums[i] > end) {\n                tail.push_back(nums[i]);\n            } else if (nums[i] == end) {\n                continue;\n            } else if (nums[i] < end) {\n                auto it = lower_bound(tail.begin(), tail.end(), nums[i]);\n                *it = nums[i];\n            }\n        }\n        return tail.size();\n    }\n\n    bool increasingTriplet(vector<int>& nums) {\n        // \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217 \u7684\u957f\u5ea6\u662f\u5426\u5927\u4e8e 3\n        int len = lis(nums);\n        return len >= 3;\n    }\n};\n")),(0,i.kt)("h2",{id:"\u65b9\u6cd5\u4e09\u5b9a\u957f\u4e0a\u5347\u5b50\u5e8f\u5217"},"\u65b9\u6cd5\u4e09\uff1a\u5b9a\u957f\u4e0a\u5347\u5b50\u5e8f\u5217"),(0,i.kt)("p",null,"\u5229\u7528\u672c\u9898\u53ea\u9700\u8981\u6211\u4eec\u5224\u5b9a\u662f\u5426\u5b58\u5728\u957f\u5ea6\u4e3a 3 \u7684\u4e0a\u5347\u5b50\u5e8f\u5217\uff0c\u800c\u4e0d\u9700\u8981\u56de\u7b54 LIS \u6700\u5927\u957f\u5ea6\u3002"),(0,i.kt)("p",null,"\u6211\u4eec\u53ef\u4ee5\u5bf9 f \u6570\u7ec4\u8fdb\u884c\u4f18\u5316\uff1a\u4f7f\u7528\u6709\u9650\u53d8\u91cf\u8fdb\u884c\u66ff\u6362\uff08\u5c06 f \u6570\u7ec4\u7684\u957f\u5ea6\u538b\u7f29\u4e3a 2\uff09\uff0c\u6570\u7ec4\u542b\u4e49\u4e0d\u53d8\uff0cf","[1]"," = x \u4ee3\u8868\u957f\u5ea6\u4e3a 1 \u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u6700\u5c0f\u7ed3\u5c3e\u5143\u7d20\u4e3a x\uff0cf","[2]"," = y \u4ee3\u8868\u957f\u5ea6\u4e3a 2 \u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u6700\u5c0f\u7ed3\u5c3e\u5143\u7d20\u4e3a y\u3002"),(0,i.kt)("p",null,"\u4ece\u524d\u5f80\u540e\u626b\u63cf\u6bcf\u4e2a nums","[i]","\uff0c\u6bcf\u6b21\u5c06 nums","[i]"," \u5206\u522b\u4e0e f","[1]"," \u548c f","[2]"," \u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u80fd\u591f\u6ee1\u8db3 nums","[i]"," > f","[2]","\uff0c\u4ee3\u8868 nums","[i]"," \u80fd\u591f\u63a5\u5728\u957f\u5ea6\u4e3a 2 \u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u540e\u9762\uff0c\u76f4\u63a5\u8fd4\u56de True\uff0c\u5426\u5219\u5c1d\u8bd5\u4f7f\u7528 nums","[i]"," \u6765\u66f4\u65b0 f","[1]"," \u548c f","[2]"),(0,i.kt)("p",null,"\u672c\u8d28\u4e0a\u8fd8\u662f\u65b9\u6cd5\u4e8c"),(0,i.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},"O(n)")),(0,i.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},"O(1)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    bool increasingTriplet(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> tail(3, INT_MAX);  // 0,1,2\n        for (int i = 0; i < n; i++) {\n            int tmp = nums[i];\n            if (tmp > tail[2]) {\n                return true;\n            } else if (tail[2] > tmp && tmp > tail[1]) {  // \u4e0d\u53ef\u6709\u7b49\u4e8e\n                tail[2] = tmp;\n            } else if (tmp < tail[1]) {\n                tail[1] = tmp;\n            }\n        }\n        return false;\n    }\n};\n")))}c.isMDXComponent=!0}}]);