"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[88402],{3905:(e,n,r)=>{r.d(n,{Zo:()=>s,kt:()=>m});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function d(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),p=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},s=function(e){var n=p(e.components);return t.createElement(l.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),c=p(r),f=o,m=c["".concat(l,".").concat(f)]||c[f]||u[f]||a;return r?t.createElement(m,i(i({ref:n},s),{},{components:r})):t.createElement(m,i({ref:n},s))}));function m(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var d={};for(var l in n)hasOwnProperty.call(n,l)&&(d[l]=n[l]);d.originalType=e,d[c]="string"==typeof e?e:o,i[1]=d;for(var p=2;p<a;p++)i[p]=r[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},40711:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>d,toc:()=>p});var t=r(87462),o=(r(67294),r(3905));const a={},i=void 0,d={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<\u91cd\u5efa\u6811>-\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<\u91cd\u5efa\u6811>-\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811",title:"<\u91cd\u5efa\u6811>-\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811",description:"\u9898\u76ee\uff1a449. \u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/449-<\u91cd\u5efa\u6811>-\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<\u91cd\u5efa\u6811>-\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<\u91cd\u5efa\u6811>-\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811",draft:!1,tags:[],version:"current",sidebarPosition:449,frontMatter:{},sidebar:"algorithmSidebar",previous:{title:"<\u91cd\u5efa\u6811>-\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<\u91cd\u5efa\u6811>-\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316"},next:{title:"<\u5b50\u6811>-\u53e6\u4e00\u68f5\u6811\u7684\u5b50\u6811",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u4e8c\u53c9\u6811/<\u5b50\u6811>-\u53e6\u4e00\u68f5\u6811\u7684\u5b50\u6811"}},l={},p=[],s={toc:p};function c(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u9898\u76ee\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/serialize-and-deserialize-bst/"},"449. \u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811")),(0,o.kt)("p",null,"\u5e8f\u5217\u5316\u662f\u5c06\u6570\u636e\u7ed3\u6784\u6216\u5bf9\u8c61\u8f6c\u6362\u4e3a\u4e00\u7cfb\u5217\u4f4d\u7684\u8fc7\u7a0b\uff0c\u4ee5\u4fbf\u5b83\u53ef\u4ee5\u5b58\u50a8\u5728\u6587\u4ef6\u6216\u5185\u5b58\u7f13\u51b2\u533a\u4e2d\uff0c\u6216\u901a\u8fc7\u7f51\u7edc\u8fde\u63a5\u94fe\u8def\u4f20\u8f93\uff0c\u4ee5\u4fbf\u7a0d\u540e\u5728\u540c\u4e00\u4e2a\u6216\u53e6\u4e00\u4e2a\u8ba1\u7b97\u673a\u73af\u5883\u4e2d\u91cd\u5efa\u3002"),(0,o.kt)("p",null,"\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316 \u4e8c\u53c9\u641c\u7d22\u6811 \u3002 \u5bf9\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u7684\u5de5\u4f5c\u65b9\u5f0f\u6ca1\u6709\u9650\u5236\u3002 \u60a8\u53ea\u9700\u786e\u4fdd\u4e8c\u53c9\u641c\u7d22\u6811\u53ef\u4ee5\u5e8f\u5217\u5316\u4e3a\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06\u8be5\u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a\u6700\u521d\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002"),(0,o.kt)("p",null,"\u7f16\u7801\u7684\u5b57\u7b26\u4e32\u5e94\u5c3d\u53ef\u80fd\u7d27\u51d1\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1\uff1a")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1aroot = [2,1,3]\n\u8f93\u51fa\uff1a[2,1,3]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 2\uff1a")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1aroot = []\n\u8f93\u51fa\uff1a[]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u63d0\u793a\uff1a")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u6811\u4e2d\u8282\u70b9\u6570\u8303\u56f4\u662f ",(0,o.kt)("inlineCode",{parentName:"li"},"[0, 104]")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"0 <= Node.val <= 104")),(0,o.kt)("li",{parentName:"ul"},"\u9898\u76ee\u6570\u636e ",(0,o.kt)("strong",{parentName:"li"},"\u4fdd\u8bc1")," \u8f93\u5165\u7684\u6811\u662f\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u3002")),(0,o.kt)("hr",null),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u4e3a\u9012\u589e\u7684")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u5982\u679c\u5df2\u77e5\u641c\u7d22\u6811\u7684\u5148\u5e8f\u6216\u8005\u540e\u5e8f\uff0c\u6392\u4e2a\u5e8f\uff0c\u5c31\u53ef\u5f97\u5230\u4e2d\u5e8f")),(0,o.kt)("p",null,"\u65b9\u6cd5\u4e00\uff1a\u6b64\u9898\u4e2d\u5143\u7d20\u7684\u503c\u662f\u6709\u91cd\u590d\u7684\uff0c\u4f46\u662f\u5b83\u662f\u4e2a\u641c\u7d22\u6811\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u7528 inOrderIdx \u8bb0\u5f55\u8282\u70b9\u7684index\uff08\u6b64\u60f3\u6cd5\u4e0d\u4e00\u5b9a\u5bf9\uff09"),(0,o.kt)("p",null,"\u65b9\u6cd5\u4e8c\uff1a\u6216\u8005",(0,o.kt)("strong",{parentName:"p"},"\u5728\u5e8f\u5217\u5316\u65f6\u5019\uff0c\u5c06\u6ca1\u6709\u7684\u8282\u70b9\u7528 None \u6765\u8bb0\u5f55"),"\uff0c\u5c31\u53ef\u4ee5\u7528\u540c\u6837\u7684\u6392\u5e8f\uff08\u53ea\u7528\u4e00\u4e2a\u524d\u5e8f\uff09\u6062\u590d\u4e3a\u6811\uff0c\u8fd8\u53ef\u4ee5\u6709\u6548\u907f\u514d\u5143\u7d20\u7684\u503c\u91cd\u590d\uff0c\u5f3a\u70c8\u5efa\u8bae\u7528\u65b9\u6cd5\u4e8c"),(0,o.kt)("p",null,"\u9898\u89e3\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/serialize-and-deserialize-bst/solution/xu-lie-hua-he-fan-xu-lie-hua-er-cha-sou-0fq67/"},"https://leetcode-cn.com/problems/serialize-and-deserialize-bst/solution/xu-lie-hua-he-fan-xu-lie-hua-er-cha-sou-0fq67/")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# \u65b9\u6cd5\u4e00 76 ms 19.7 MB\nclass Codec:\n\n    def serialize(self, root: TreeNode) -> str:\n        """Encodes a tree to a single string.\n        """\n        # https://oi-wiki.org/ds/bst/\n        # \u641c\u7d22\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u6392\u5217\u65f6\u4ece\u5c0f\u5230\u5927\u7684\n        # \u8fd4\u56de\u524d\u5e8f\u6392\u5217\uff0c\u89e3\u7801\u65f6\u5c06\u524d\u5e8f\u6392\u5217\u6392\u4e2a\u5e8f\uff0c\u5c31\u662f\u4e2d\u5e8f\u6392\u5217\n        def dfs(node):\n            if not node:\n                return\n            preOrder.append(node.val)\n            dfs(node.left)\n            dfs(node.right)\n\n        preOrder = []\n        dfs(root)\n        return ",".join(map(str, preOrder))\n        \n    def deserialize(self, data: str) -> TreeNode:\n        """Decodes your encoded data to tree.\n        """\n        # \u4ece\u524d\u5e8f\u6392\u5217\uff0c\u6839\u636e\u4e8c\u53c9\u641c\u7d22\u6811\u7279\u6027\u5f97\u51fa\u4e2d\u5e8f\u6392\u5217\n        if data == "":\n            return None\n        preOrder = [int(x) for x in data.split(",")]\n        inOrder = sorted(preOrder)\n        \n        # \u5982\u679c\u8282\u70b9\u7684\u6570\u503c\u6709\u91cd\u590d\u7684\uff0c\u5c31\u4e0d\u80fd\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\u8bb0\u5f55\u4f4d\u7f6e\u4e86\uff0c\u800c\u662f\u5728\u6bcf\u6b21\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u627e\n        inOrderIdx = collections.defaultdict(int)\n        for i, v in enumerate(inOrder):\n            inOrderIdx[v] = i\n\n        def dfs(preStart, preEnd, inStart, inEnd):\n            if preStart > preEnd or inStart > inEnd:\n                return None\n            \n            node_val = preOrder[preStart]\n            # node_in_idx = inStart\n            # while inOrder[node_in_idx] != node_val:\n            #     node_in_idx += 1\n            node_in_idx = inOrderIdx[node_val]\n\n            left_size = node_in_idx - inStart\n\n            node = TreeNode(node_val)\n            node.left = dfs(preStart+1, preStart+left_size, inStart, node_in_idx-1)\n            node.right = dfs(preStart+left_size+1, preEnd, node_in_idx+1, inEnd)\n            return node\n\n        return dfs(0, len(preOrder)-1, 0, len(inOrder)-1)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# \u65b9\u6cd5\u4e8c 72 ms 19.6 MB\nclass Codec:\n\n    def serialize(self, root: TreeNode) -> str:\n        """Encodes a tree to a single string.\n        """\n        def dfs(node):\n            if not node:\n                preOrder.append("None")\n                return\n            preOrder.append(str(node.val))\n            dfs(node.left)\n            dfs(node.right)\n        \n        preOrder = []\n        dfs(root)\n        return ",".join(preOrder)\n        \n\n    def deserialize(self, data: str) -> TreeNode:\n        """Decodes your encoded data to tree.\n        """\n        if data == "":\n            return None\n        # \u5f3a\u70c8\u5efa\u8bae\uff0c\u8fd9\u91cc\u4e0d\u8981\u7528 [] (580 ms 19.9 MB),\u8981\u7528 collections.deque (72 ms 19.6 MB)\n        preOrder = collections.deque([i for i in data.split(",")])\n        def dfs(preOrder):\n            node_val = preOrder.popleft()\n            if node_val == "None":\n                return None\n            node = TreeNode(int(node_val))\n            node.left = dfs(preOrder)\n            node.right = dfs(preOrder)\n            return node\n        return dfs(preOrder)\n')))}c.isMDXComponent=!0}}]);