"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7396],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>k});var r=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=r.createContext({}),u=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=u(e.components);return r.createElement(p.Provider,{value:n},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),s=u(t),c=l,k=s["".concat(p,".").concat(c)]||s[c]||m[c]||i;return t?r.createElement(k,a(a({ref:n},d),{},{components:t})):r.createElement(k,a({ref:n},d))}));function k(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,a=new Array(i);a[0]=c;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[s]="string"==typeof e?e:l,a[1]=o;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},29248:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>s,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=t(87462),l=(t(67294),t(3905));const i={},a=void 0,o={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6811\u72b6\u6570\u7ec4/<\u79bb\u6563\u5316+\u6811\u72b6\u6570\u7ec4>-\u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570",id:"Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6811\u72b6\u6570\u7ec4/<\u79bb\u6563\u5316+\u6811\u72b6\u6570\u7ec4>-\u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570",title:"<\u79bb\u6563\u5316+\u6811\u72b6\u6570\u7ec4>-\u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570",description:"315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6811\u72b6\u6570\u7ec4/315-<\u79bb\u6563\u5316+\u6811\u72b6\u6570\u7ec4>-\u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6811\u72b6\u6570\u7ec4",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6811\u72b6\u6570\u7ec4/<\u79bb\u6563\u5316+\u6811\u72b6\u6570\u7ec4>-\u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6811\u72b6\u6570\u7ec4/<\u79bb\u6563\u5316+\u6811\u72b6\u6570\u7ec4>-\u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570",draft:!1,tags:[],version:"current",sidebarPosition:315,frontMatter:{},sidebar:"docsSidebar",previous:{title:"<\u57fa\u7840\u6a21\u7248\u9898>-\u533a\u57df\u548c\u68c0\u7d22-\u6570\u7ec4\u53ef\u4fee\u6539",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6811\u72b6\u6570\u7ec4/<\u57fa\u7840\u6a21\u7248\u9898>-\u533a\u57df\u548c\u68c0\u7d22-\u6570\u7ec4\u53ef\u4fee\u6539"},next:{title:"\u7edf\u8ba1\u6570\u7ec4\u4e2d\u597d\u4e09\u5143\u7ec4\u6570\u76ee",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/\u4f8b\u9898-\u6811\u72b6\u6570\u7ec4/\u7edf\u8ba1\u6570\u7ec4\u4e2d\u597d\u4e09\u5143\u7ec4\u6570\u76ee"}},p={},u=[{value:"\u65b9\u6cd5\uff1a\u79bb\u6563\u5316+\u6811\u72b6\u6570\u7ec4",id:"\u65b9\u6cd5\u79bb\u6563\u5316\u6811\u72b6\u6570\u7ec4",level:2},{value:"1\u3001\u79bb\u6563\u5316",id:"1\u79bb\u6563\u5316",level:3},{value:"2\u3001\u57fa\u4e8e\u4e00\u4e2a\u4e8b\u5b9e",id:"2\u57fa\u4e8e\u4e00\u4e2a\u4e8b\u5b9e",level:3},{value:"3\u3001\u4ee5\u300c\u524d\u7f00\u548c\u6570\u7ec4\u300d\u64cd\u4f5c",id:"3\u4ee5\u524d\u7f00\u548c\u6570\u7ec4\u64cd\u4f5c",level:3},{value:"4\u3001\u4f18\u5316\u4e3a\u300c\u6811\u72b6\u6570\u7ec4\u300d\u64cd\u4f5c",id:"4\u4f18\u5316\u4e3a\u6811\u72b6\u6570\u7ec4\u64cd\u4f5c",level:3},{value:"\u7b54\u6848",id:"\u7b54\u6848",level:2},{value:"c++",id:"c",level:3},{value:"python",id:"python",level:3}],d={toc:u};function s(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/count-of-smaller-numbers-after-self/"},"315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570")),(0,l.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u6309\u8981\u6c42\u8fd4\u56de\u4e00\u4e2a\u65b0\u6570\u7ec4 counts \u3002\u6570\u7ec4 counts \u6709\u8be5\u6027\u8d28\uff1a counts","[i]"," \u7684\u503c\u662f  nums","[i]"," \u53f3\u4fa7\u5c0f\u4e8e nums","[i]"," \u7684\u5143\u7d20\u7684\u6570\u91cf\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\u793a\u4f8b 1\uff1a\n\n\u8f93\u5165\uff1anums = [5,2,6,1]\n\u8f93\u51fa\uff1a[2,1,1,0] \n\u89e3\u91ca\uff1a\n5 \u7684\u53f3\u4fa7\u6709 2 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (2 \u548c 1)\n2 \u7684\u53f3\u4fa7\u4ec5\u6709 1 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (1)\n6 \u7684\u53f3\u4fa7\u6709 1 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (1)\n1 \u7684\u53f3\u4fa7\u6709 0 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20\n\n\u793a\u4f8b 2\uff1a\n\n\u8f93\u5165\uff1anums = [-1]\n\u8f93\u51fa\uff1a[0]\n\n\u793a\u4f8b 3\uff1a\n\n\u8f93\u5165\uff1anums = [-1,-1]\n\u8f93\u51fa\uff1a[0,0]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u63d0\u793a\uff1a")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 105")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-104 <= nums[i] <= 104"))),(0,l.kt)("h2",{id:"\u65b9\u6cd5\u79bb\u6563\u5316\u6811\u72b6\u6570\u7ec4"},"\u65b9\u6cd5\uff1a\u79bb\u6563\u5316+\u6811\u72b6\u6570\u7ec4"),(0,l.kt)("h3",{id:"1\u79bb\u6563\u5316"},"1\u3001\u79bb\u6563\u5316"),(0,l.kt)("p",null,"\u9996\u5148\u5bf9\u6570\u7ec4\u5143\u7d20\u505a\u9884\u5904\u7406\uff0c\u8fd9\u4e00\u6b65\u53eb\u300c\u79bb\u6563\u5316\u300d\u3002"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u8003\u8651\u5230\u300c\u6811\u72b6\u6570\u7ec4\u300d\u7684\u5e95\u5c42\u662f\u6570\u7ec4\uff08\u7ebf\u6027\u7ed3\u6784\uff09\uff0c\u4e3a\u4e86\u907f\u514d\u5f00\u8f9f\u591a\u4f59\u7684\u300c\u6811\u72b6\u6570\u7ec4\u300d\u7a7a\u95f4\uff0c\u9700\u8981\u8fdb\u884c\u300c\u79bb\u6563\u5316\u300d\uff1b"),(0,l.kt)("li",{parentName:"ul"},"\u300c\u79bb\u6563\u5316\u300d\u7684\u4f5c\u7528\u662f\uff1a\u9488\u5bf9\u6570\u503c\u7684\u5927\u5c0f\u505a\u4e00\u4e2a\u6392\u540d\u7684\u300c\u6620\u5c04\u300d\uff0c\u628a\u539f\u59cb\u6570\u636e\u6620\u5c04\u5230 ","[1, len]"," \u8fd9\u4e2a\u533a\u95f4\uff0c\u8fd9\u6837\u300c\u6811\u72b6\u6570\u7ec4\u300d\u5e95\u5c42\u7684\u6570\u7ec4\u7a7a\u95f4\u4f1a\u66f4\u7d27\u51d1\uff0c\u66f4\u6613\u4e8e\u7ef4\u62a4\u3002")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u76f8\u5bf9\u4e8e\u6570\u7ec4\u4e2d\u7684\u300c\u503c\u300d\uff0c\u66f4\u6709\u7528\u7684\u662f\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u7684\u300c\u6392\u540d\u300d\u6216\u8005\u5143\u7d20\u7684\u300c\u76f8\u5bf9\u5927\u5c0f\u300d")),(0,l.kt)("p",null,"\u79bb\u6563\u5316\u524d\u9700\u8981\u300c\u53bb\u91cd\u300d\uff0c\u53bb\u91cd\u4e0d\u4f1a\u5f71\u54cd\u6700\u7ec8\u7ed3\u679c\uff0c\u300c\u79bb\u6563\u5316\u300d\u4e5f\u4e0d\u5f71\u54cd\u6700\u7ec8\u7ed3\u679c"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u6392\u540d\u9700\u8981\u300c\u7531\u5c0f\u5230\u5927\u6392\u5e8f\u300d\uff0c\u56e0\u4e3a\u300c\u524d\u7f00\u548c\u300d\u662f\u627e\u5230\u524d\u9762\u7684\uff0c\u9898\u76ee\u8981\u6c42\u7684\u662f\u300c\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u300d\uff0c\u9700\u8981\u8ba9\u66f4\u5c0f\u7684\u6392\u5230\u524d\u9762\uff0c\u67e5\u300c\u524d\u7f00\u548c\u300d\u7684\u65f6\u5019\u5305\u542b\u4f4f\u66f4\u5c0f\u7684\u6392\u540d")),(0,l.kt)("p",null,"\u8f93\u5165: ","[5, 2, 6, 1]"," \uff0c\u5b83\u7684\u6392\u540d\u662f ","[3, 2, 4, 1]"),(0,l.kt)("h3",{id:"2\u57fa\u4e8e\u4e00\u4e2a\u4e8b\u5b9e"},"2\u3001\u57fa\u4e8e\u4e00\u4e2a\u4e8b\u5b9e"),(0,l.kt)("p",null,"\u6570\u7ec4\u7684\u4e0b\u6807 idx \u4f5c\u4e3a\u6392\u540d"),(0,l.kt)("p",null,"\u539f\u59cb\u6570\u7ec4 arr \u76f8\u5e94\u4f4d\u7f6e\u4e0a\u7528 1 \u8bb0\u5f55 arr","[idx]"," \u4f4d\u7f6e\u5df2\u904d\u5386\u8fc7\u4e86"),(0,l.kt)("p",null,"\u524d\u7f00\u548c\u6570\u7ec4\u53ef\u5f97\u5230\u5728\u5df2\u904d\u5386\u7684\u6392\u540d\u4e2d\uff0c\u5c0f\u4e8e\u5f53\u524d\u6392\u540d\uff08idx\uff09\u6709 pre","[idx-1]"," \u4eba\uff08",(0,l.kt)("strong",{parentName:"p"},"\u5b9e\u9645\u4e0a\u524d\u7f00\u548c\u6570\u7ec4\u662f\u4f1a\u52a8\u6001\u53d8\u5316\u7684"),"\uff09"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"idx:     1  2  3  4\narr: [0, 1, 1, 1, 1]\npre: [0, 1, 2, 3, 4]\n")),(0,l.kt)("h3",{id:"3\u4ee5\u524d\u7f00\u548c\u6570\u7ec4\u64cd\u4f5c"},"3\u3001\u4ee5\u300c\u524d\u7f00\u548c\u6570\u7ec4\u300d\u64cd\u4f5c"),(0,l.kt)("p",null,"\u6b64\u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u6839\u636e\u4e0a\u9762\u7684\u79bb\u6563\u64cd\u4f5c\u5f97\u5230 ","[5, 2, 6, 1]"," \u7684\u6392\u540d\u662f ","[3, 2, 4, 1]"),(0,l.kt)("p",null,"\u82e5\u662f\u4ee5\u300c\u524d\u7f00\u548c\u6570\u7ec4\u300d\u64cd\u4f5c\uff0c\u56e0\u4e3a\u9898\u76ee\u8981\u6c42\u7684\u662f\u300c\u5f53\u524d\u4f4d\u7f6e\u7684\u53f3\u8fb9\u300d\uff0c\u6240\u4ee5\u5bf9\u6392\u540d\u4ece\u300c\u540e\u5f80\u524d\u904d\u5386\u300d"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"\u6392\u540d\u4e3a 1\uff0cidx = 1\uff0carr","[1]"," \u8bbe\u7f6e\u4e3a 1\uff0cpre \u8fdb\u884c\u66f4\u65b0\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff09\u3002\u901a\u8fc7\u6b64\u65f6\u7684\u524d\u7f00\u548c\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u51fa\u6392\u540d\u6570\u7ec4 1 \u7684\u53f3\u8fb9\u6709\u51e0\u4e2a\u6bd4\u5b83\u5c0f\uff08\u5df2\u904d\u5386\u5143\u7d20\uff1a1\uff09\uff0c\u4e5f\u5c31\u662f pre","[1 - 1]"," \u4e3a 0\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff09\uff0c\u6709 0 \u4e2a")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"idx:     1  2  3  4\narr: [0, 1, 0, 0, 0]\npre: [0, 1, 1, 1, 1]\n")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"\u6392\u540d\u4e3a 4\uff0cidx = 4\uff0carr","[4]"," \u8bbe\u7f6e\u4e3a 1\uff0cpre \u8fdb\u884c\u66f4\u65b0\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff09\u3002\u901a\u8fc7\u6b64\u65f6\u7684\u524d\u7f00\u548c\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u51fa\u6392\u540d\u6570\u7ec4 4 \u7684\u53f3\u8fb9\u6709\u51e0\u4e2a\u6bd4\u5b83\u5c0f\uff08\u5df2\u904d\u5386\u5143\u7d20\uff1a4 1\uff09\uff0c\u4e5f\u5c31\u662f pre","[4 - 1]"," \u4e3a 1\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff09\uff0c\u6709 1 \u4e2a")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"idx:     1  2  3  4\narr: [0, 1, 0, 0, 1]\npre: [0, 1, 1, 1, 2]\n")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"\u6392\u540d\u4e3a 2\uff0cidx = 2\uff0carr","[2]"," \u8bbe\u7f6e\u4e3a 1\uff0cpre \u8fdb\u884c\u66f4\u65b0\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff09\u3002\u901a\u8fc7\u6b64\u65f6\u7684\u524d\u7f00\u548c\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u51fa\u6392\u540d\u6570\u7ec4 2 \u7684\u53f3\u8fb9\u6709\u51e0\u4e2a\u6bd4\u5b83\u5c0f\uff08\u5df2\u904d\u5386\u5143\u7d20\uff1a2 4 1\uff09\uff0c\u4e5f\u5c31\u662f pre","[2 - 1]"," \u4e3a 1\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff09\uff0c\u6709 1 \u4e2a")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"idx:     1  2  3  4\narr: [0, 1, 1, 0, 1]\npre: [0, 1, 2, 2, 3]\n")),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},"\u6392\u540d\u4e3a 3\uff0cidx = 3\uff0carr","[3]"," \u8bbe\u7f6e\u4e3a 1\uff0cpre \u8fdb\u884c\u66f4\u65b0\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff09\u3002\u901a\u8fc7\u6b64\u65f6\u7684\u524d\u7f00\u548c\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u51fa\u6392\u540d\u6570\u7ec4 3 \u7684\u53f3\u8fb9\u6709\u51e0\u4e2a\u6bd4\u5b83\u5c0f\uff08\u5df2\u904d\u5386\u5143\u7d20\uff1a3 2 4 1\uff09\uff0c\u4e5f\u5c31\u662f pre","[3 - 1]"," \u4e3a 2\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff09\uff0c\u6709 2 \u4e2a")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"idx:     1  2  3  4\narr: [0, 1, 1, 1, 1]\npre: [0, 1, 2, 3, 4]\n")),(0,l.kt)("p",null,"\u6700\u540e\u6211\u4eec\u53d1\u73b0\u7b54\u6848\u5df2\u7ecf\u5f97\u51fa\u4e86 ","[2, 1, 1, 0]"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u540c\u65f6\u53d1\u73b0\uff0c\u300cpre\u8fdb\u884c\u66f4\u65b0\u300d\u548c\u300c\u53d6\u503cpre","[idx-1]","\u300d\u7684\u5148\u540e\u987a\u5e8f\u5e76\u4e0d\u5173\u952e\uff0c\u56e0\u4e3a pre \u66f4\u65b0\u7684\u662f pre","[idx]"," \u672c\u8eab\u548c\u4e4b\u540e\u7684\u503c\uff0c\u4e0d\u4f1a\u5f71\u54cd\u524d\u9762\u7684 pre","[idx-1]"," \u7684\u503c")),(0,l.kt)("h3",{id:"4\u4f18\u5316\u4e3a\u6811\u72b6\u6570\u7ec4\u64cd\u4f5c"},"4\u3001\u4f18\u5316\u4e3a\u300c\u6811\u72b6\u6570\u7ec4\u300d\u64cd\u4f5c"),(0,l.kt)("p",null,"\u4ee5\u300c\u524d\u7f00\u548c\u6570\u7ec4\u300d\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2)\uff0c\u56e0\u6b64\u8fdb\u884c\u4f18\u5316"),(0,l.kt)("p",null,"\u4e0a\u8ff0\u7684\u65b9\u5f0f\u4e3b\u8981\u6d89\u53ca\u4e24\u4e2a\u64cd\u4f5c\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u539f\u59cb\u6570\u7ec4 arr","[idx]"," ",(0,l.kt)("strong",{parentName:"li"},"\u5355\u70b9\u66f4\u65b0"),"\uff08\u4ece 0 \u5230 1\uff09\uff0c\u9700\u8981\u5c06\u524d\u7f00\u548c\u6570\u7ec4\u8fdb\u884c\u66f4\u65b0\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"\u4ece\u524d\u7f00\u548c\u6570\u7ec4\u4e2d\u53d6\u51fa"),"\uff0c\u5728\u5df2\u904d\u5386\u7684\u6392\u540d\u4e2d\u5c0f\u4e8e\u5f53\u524d\u6392\u540d\uff08idx\uff09\u6709 pre","[idx-1]"," \u4eba\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)")),(0,l.kt)("p",null,"\u53ef\u4ee5\u4f7f\u7528\u300c\u6811\u72b6\u6570\u7ec4\u300d\uff0c\u56e0\u4e3a\u300c\u6811\u72b6\u6570\u7ec4\u300d\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3aO(logn)"),(0,l.kt)("p",null,"\u8fd8\u662f\u4e0a\u9762\u79bb\u6563\u64cd\u4f5c\u5f97\u5230\u7684\u6392\u540d\u6570\u7ec4 ","[3, 2, 4, 1]","\uff0c\u540e\u5f80\u524d\u904d\u5386\uff0c\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u65e0\u9700\u5173\u5fc3\u6811\u72b6\u6570\u7ec4\u5185\u90e8\u7a76\u7adf\u662f\u600e\u6837\u7684\uff0c\u76f4\u63a5\u8c03\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u7684\u51fd\u6570\uff1a",(0,l.kt)("inlineCode",{parentName:"p"},"void add(int idx, int delta)")," \u548c ",(0,l.kt)("inlineCode",{parentName:"p"},"int query(int idx)")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"\u6392\u540d\u4e3a 1\uff0cidx = 1\uff0ctree","[1]"," \u589e\u91cf\u4e3a 1\uff08\u75310\u52301\uff09\uff0ctree \u8fdb\u884c\u66f4\u65b0 add(1, 1)\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logn)\uff09\u3002\u901a\u8fc7\u6b64\u65f6\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u51fa\u6392\u540d\u6570\u7ec4 1 \u7684\u53f3\u8fb9\u6709\u51e0\u4e2a\u6bd4\u5b83\u5c0f\uff08\u5df2\u904d\u5386\u5143\u7d20\uff1a1\uff09\uff0c\u4e5f\u5c31\u662f query(1 - 1) \u5f97 0\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logn)\uff09\uff0c\u6709 0 \u4e2a")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"idx:     1  2  3  4\narr: [0, 1, 0, 0, 0]\n")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"\u6392\u540d\u4e3a 4\uff0cidx = 4\uff0ctree","[4]"," \u589e\u91cf\u4e3a 1\uff08\u75310\u52301\uff09\uff0ctree \u8fdb\u884c\u66f4\u65b0 add(4, 1)\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logn)\uff09\u3002\u901a\u8fc7\u6b64\u65f6\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u51fa\u6392\u540d\u6570\u7ec4 4 \u7684\u53f3\u8fb9\u6709\u51e0\u4e2a\u6bd4\u5b83\u5c0f\uff08\u5df2\u904d\u5386\u5143\u7d20\uff1a4, 1\uff09\uff0c\u4e5f\u5c31\u662f query(4 - 1) \u5f97 1\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logn)\uff09\uff0c\u6709 1 \u4e2a")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"idx:     1  2  3  4\narr: [0, 1, 0, 0, 1]\n")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"\u6392\u540d\u4e3a 2\uff0cidx = 2\uff0ctree","[2]"," \u589e\u91cf\u4e3a 1\uff08\u75310\u52301\uff09\uff0ctree \u8fdb\u884c\u66f4\u65b0 add(2, 1)\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logn)\uff09\u3002\u901a\u8fc7\u6b64\u65f6\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u51fa\u6392\u540d\u6570\u7ec4 2 \u7684\u53f3\u8fb9\u6709\u51e0\u4e2a\u6bd4\u5b83\u5c0f\uff08\u5df2\u904d\u5386\u5143\u7d20\uff1a2, 4, 1\uff09\uff0c\u4e5f\u5c31\u662f query(2 - 1) \u5f97 1\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logn)\uff09\uff0c\u6709 1 \u4e2a")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"idx:     1  2  3  4\narr: [0, 1, 1, 0, 1]\n")),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},"\u6392\u540d\u4e3a 3\uff0cidx = 3\uff0ctree","[3]"," \u589e\u91cf\u4e3a 1\uff08\u75310\u52301\uff09\uff0ctree \u8fdb\u884c\u66f4\u65b0 add(3, 1)\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logn)\uff09\u3002\u901a\u8fc7\u6b64\u65f6\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u51fa\u6392\u540d\u6570\u7ec4 3 \u7684\u53f3\u8fb9\u6709\u51e0\u4e2a\u6bd4\u5b83\u5c0f\uff08\u5df2\u904d\u5386\u5143\u7d20\uff1a3, 2, 4, 1\uff09\uff0c\u4e5f\u5c31\u662f query(3 - 1) \u5f97 2\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logn)\uff09\uff0c\u6709 2 \u4e2a")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"idx:     1  2  3  4\narr: [0, 1, 1, 1, 1]\n")),(0,l.kt)("p",null,"\u6700\u540e\u6211\u4eec\u53d1\u73b0\u7b54\u6848\u5df2\u7ecf\u5f97\u51fa\u4e86 ","[2, 1, 1, 0]"),(0,l.kt)("h2",{id:"\u7b54\u6848"},"\u7b54\u6848"),(0,l.kt)("p",null,"\u4f7f\u7528 ",(0,l.kt)("inlineCode",{parentName:"p"},"set<int> s(nums.begin(), nums.end());")," \u8fdb\u884c\u53bb\u91cd\u548c\u6392\u5e8f"),(0,l.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a272 ms, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8652.54%\u7684\u7528\u6237"),(0,l.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a100.2 MB, \u5728\u6240\u6709 C++ \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8628.09%\u7684\u7528\u6237"),(0,l.kt)("h3",{id:"c"},"c++"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},'class FenwickTree {\npublic:\n    int size;\n    vector<int> tree;\n\n    FenwickTree(int n) {\n        size = n;\n        tree.resize(size + 1, 0);\n    }\n    int lowbit(int idx) {\n        // idx \u4e3a\u6811\u72b6\u6570\u7ec4\u4e0b\u6807\n        return idx & (-idx);\n    }\n    void add(int idx, int delta) {\n        // \u5355\u70b9\u66f4\u65b0\uff0c\u4ece\u524d\u5f80\u540e\uff0cidx \u4e3a\u6811\u72b6\u6570\u7ec4\u4e0b\u6807\n        // delta \u4e3a\u53d8\u5316\u91cf\uff0c\u5982\u679c\u5df2\u77e5\u9700\u8981\u53d8\u5316\u7684\u503cval\uff0c\u4f20\u5165 val - \u539f\u59cb\u6570\u7ec4[idx-1]\n        while (idx < size + 1) {\n            tree[idx] += delta;\n            idx += lowbit(idx);\n        }\n    }\n    int query(int idx) {\n        // \u67e5\u8be2\u524d\u7f00\u548c\uff0c\u4ece\u540e\u5f80\u524d\uff0cidx \u4e3a\u6811\u72b6\u6570\u7ec4\u4e0b\u6807\n        int sum = 0;\n        while (idx > 0) {\n            sum += tree[idx];\n            idx -= lowbit(idx);\n        }\n        return sum;\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countSmaller(vector<int>& nums) {\n        set<int> s(nums.begin(), nums.end());  // \u53bb\u91cd + \u6392\u5e8f\uff0c\u7531\u5c0f\u5230\u5927\n        unordered_map<int, int> um;\n        int rank = 1;\n        for (auto it = s.begin(); it != s.end(); it++) {\n            um[*it] = rank;\n            rank++;\n        }\n        // for (auto it = um.begin(); it != um.end(); it ++) {\n        //     cout << it->first << ":" << it->second << " ";\n        // }\n        // cout << endl;\n        FenwickTree ftree(s.size());   // \u53bb\u91cd\u540e\u7684size\n        vector<int> ans(nums.size());  // \u539f\u59cb\u6570\u7ec4\u7684size\n        // \u4ece\u540e\u5f80\u524d\u904d\u5386\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            rank = um[nums[i]];              // \u67e5\u8be2\u6392\u540d\n            ftree.add(rank, 1);              // \u5728\u6811\u72b6\u6570\u7ec4\u6392\u540d\u7684\u90a3\u4e2a\u4f4d\u7f6e + 1\n            ans[i] = ftree.query(rank - 1);  // \u67e5\u8be2\u4e00\u4e0b\u5c0f\u4e8e\u7b49\u4e8e\u201c\u5f53\u524d\u6392\u540d - 1\u201d\u7684\u5143\u7d20\u6709\u591a\u5c11\n        }\n        return ans;\n    }\n};\n\n')),(0,l.kt)("h3",{id:"python"},"python"),(0,l.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a1664 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8673.19%\u7684\u7528\u6237"),(0,l.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a32.3 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8659.08%\u7684\u7528\u6237"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def countSmaller(self, nums: List[int]) -> List[int]:\n        # \u53bb\u91cd + \u6392\u5e8f\uff0c\u7531\u5c0f\u5230\u5927\n        nums_set = set(nums)\n        unordered_map = {v: i+1 for i, v in enumerate(sorted(nums_set))}\n        # print(unordered_map)\n\n        ftree = FenwickTree(len(nums_set))\n        ans = [0 for _ in range(len(nums))]\n        for i in range(len(nums)-1, -1, -1):\n            rank = unordered_map[nums[i]]\n            ftree.add(rank, 1)\n            ans[i] = ftree.query(rank - 1)\n        return ans\n\n\nclass FenwickTree:\n    def __init__(self, n):\n        self.size = n\n        self.tree = [0 for _ in range(n + 1)]\n\n    def __lowbit(self, idx):\n        return idx & (-idx)\n\n    # \u5355\u70b9\u66f4\u65b0\uff1a\u4ece\u4e0b\u5230\u4e0a\uff0c\u6700\u591a\u5230 size\uff0c\u53ef\u4ee5\u53d6\u7b49\n    def add(self, idx, delta):\n        while idx <= self.size:\n            self.tree[idx] += delta\n            idx += self.__lowbit(idx)\n\n    # \u533a\u95f4\u67e5\u8be2\uff1a\u4ece\u4e0a\u5230\u4e0b\uff0c\u6700\u5c11\u5230 1\uff0c\u53ef\u4ee5\u53d6\u7b49\n    def query(self, idx):\n        res = 0\n        while idx > 0:\n            res += self.tree[idx]\n            idx -= self.__lowbit(idx)\n        return res\n\n")))}s.isMDXComponent=!0}}]);