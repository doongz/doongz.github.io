"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[89527],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=n.createContext({}),m=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=m(a),k=l,h=u["".concat(p,".").concat(k)]||u[k]||d[k]||r;return a?n.createElement(h,i(i({ref:t},c),{},{components:a})):n.createElement(h,i({ref:t},c))}));function h(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=k;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:l,i[1]=o;for(var m=2;m<r;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},46042:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var n=a(87462),l=(a(67294),a(3905));const r={},i="TensorCore \u5377\u79ef\u7b97\u5b50\u5b9e\u73b0\u539f\u7406",o={unversionedId:"Knowledge/AI/\u5377\u79ef\u7b97\u5b50\u5b9e\u73b0",id:"Knowledge/AI/\u5377\u79ef\u7b97\u5b50\u5b9e\u73b0",title:"TensorCore \u5377\u79ef\u7b97\u5b50\u5b9e\u73b0\u539f\u7406",description:"MegEngine TensorCore \u5377\u79ef\u7b97\u5b50\u5b9e\u73b0\u539f\u7406",source:"@site/docs/Knowledge/07-AI/02-\u5377\u79ef\u7b97\u5b50\u5b9e\u73b0.md",sourceDirName:"Knowledge/07-AI",slug:"/Knowledge/AI/\u5377\u79ef\u7b97\u5b50\u5b9e\u73b0",permalink:"/docs/Knowledge/AI/\u5377\u79ef\u7b97\u5b50\u5b9e\u73b0",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"docsSidebar",previous:{title:"\u7b97\u5b50\u5f00\u53d1",permalink:"/docs/Knowledge/AI/\u7b97\u5b50\u5f00\u53d1"},next:{title:"\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u7f16\u8bd1\u6280\u672f",permalink:"/docs/Knowledge/AI/\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u7f16\u8bd1\u6280\u672f"}},p={},m=[{value:"\u4e00\u3001\u524d\u8a00",id:"\u4e00\u524d\u8a00",level:2},{value:"\u4e8c\u3001Implicit GEMM \u7b97\u6cd5",id:"\u4e8cimplicit-gemm-\u7b97\u6cd5",level:2},{value:"1\u3001\u5377\u79ef\u6620\u5c04\u4e3a\u77e9\u9635\u4e58\u6cd5",id:"1\u5377\u79ef\u6620\u5c04\u4e3a\u77e9\u9635\u4e58\u6cd5",level:3},{value:"2\u3001Global Memory \u6570\u636e\u5e03\u5c40\uff08Layout\uff09",id:"2global-memory-\u6570\u636e\u5e03\u5c40layout",level:3},{value:"3\u3001\u9884\u5904\u7406\u8bbf\u5b58\u504f\u79fb\u91cf",id:"3\u9884\u5904\u7406\u8bbf\u5b58\u504f\u79fb\u91cf",level:3},{value:"4\u3001Warp-level Mma(Matrix-multiply-add) \u6307\u4ee4",id:"4warp-level-mmamatrix-multiply-add-\u6307\u4ee4",level:3},{value:"5\u3001Shared Memory \u7684\u6570\u636e\u5e03\u5c40",id:"5shared-memory-\u7684\u6570\u636e\u5e03\u5c40",level:3},{value:"6\u3001\u663e\u5b58 -&gt; Shared Memory \u7684\u6570\u636e\u642c\u8fd0",id:"6\u663e\u5b58---shared-memory-\u7684\u6570\u636e\u642c\u8fd0",level:3},{value:"7\u3001Shared Memory -&gt; \u5bc4\u5b58\u5668\u7684\u6570\u636e\u642c\u8fd0",id:"7shared-memory---\u5bc4\u5b58\u5668\u7684\u6570\u636e\u642c\u8fd0",level:3},{value:"8\u3001Accumulator \u5199\u56de\u5168\u5c40\u5b58\u50a8",id:"8accumulator-\u5199\u56de\u5168\u5c40\u5b58\u50a8",level:3},{value:"\u4e09\u3001\u603b\u7ed3",id:"\u4e09\u603b\u7ed3",level:2},{value:"\u53c2\u8003\u8d44\u6599",id:"\u53c2\u8003\u8d44\u6599",level:2}],c={toc:m};function u(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"tensorcore-\u5377\u79ef\u7b97\u5b50\u5b9e\u73b0\u539f\u7406"},"TensorCore \u5377\u79ef\u7b97\u5b50\u5b9e\u73b0\u539f\u7406"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://zhuanlan.zhihu.com/p/372973726"},"MegEngine TensorCore \u5377\u79ef\u7b97\u5b50\u5b9e\u73b0\u539f\u7406")),(0,l.kt)("h2",{id:"\u4e00\u524d\u8a00"},"\u4e00\u3001\u524d\u8a00"),(0,l.kt)("p",null,"2020 \u5e74 5 \u6708 Nvidia \u53d1\u5e03\u4e86\u65b0\u4e00\u4ee3\u7684 GPU \u67b6\u6784\u5b89\u57f9\uff08Ampere\uff09\u3002\u5176\u4e2d\u548c\u6df1\u5ea6\u5b66\u4e60\u5173\u7cfb\u6700\u5bc6\u5207\u7684\u83ab\u8fc7\u4e8e\u6027\u80fd\u5f3a\u52b2\u7684\u7b2c\u4e09\u4ee3\u7684 TensorCore \uff0c\u65b0\u4e00\u4ee3\u7684 TensorCore \u652f\u6301\u4e86\u66f4\u4e3a\u4e30\u5bcc\u7684 DL\uff08Deep Learning\uff09\u6570\u636e\u7c7b\u578b\uff0c\u5305\u62ec\u4e86\u65b0\u7684 TesorFloat-32\uff08TF32\uff09\uff0cBfloat16\uff08BF16\uff09\u8ba1\u7b97\u5355\u5143\u4ee5\u53ca INT8, INT4 \u548c INT1 \u7684\u8ba1\u7b97\u5355\u5143\uff0c\u8fd9\u4e9b\u8ba1\u7b97\u5355\u5143\u4e3a DL \u63a8\u7406\u63d0\u4f9b\u4e86\u5168\u9762\u7684\u652f\u6301\u3002"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u4e3a\u4e86\u53d1\u6325\u8fd9\u4e9b\u8ba1\u7b97\u5355\u5143\u7684\u80fd\u529b\uff0c\u4ee5\u5f80\u4f1a\u7531\u8d44\u6df1\u7684 HPC \u5de5\u7a0b\u5e08\u624b\u5199 GPU \u6c47\u7f16\u5b9e\u73b0\u7684\u5377\u79ef\u3001\u77e9\u9635\u4e58\u7b97\u5b50\u6765\u6316\u6398\u786c\u4ef6\u7684\u80fd\u529b\u3002\u7136\u800c\u51ed\u501f\u4eba\u529b\u624b\u5de5\u4f18\u5316\u7b97\u5b50\u7684\u65b9\u5f0f\u5df2\u7ecf\u6ca1\u6709\u529e\u6cd5\u5e94\u5bf9\u5982\u6b64\u591a\u7684\u6570\u636e\u7c7b\u578b\uff0c\u56e0\u6b64\u5bf9\u4e8e DL \u5e94\u7528\u7684\u4f18\u5316\u6e10\u6e10\u5730\u8d8a\u6765\u8d8a\u4f9d\u8d56\u4e00\u4e9b\u81ea\u52a8\u5316\u7684\u5de5\u5177\uff0c\u4f8b\u5982\u9762\u5411\u6df1\u5ea6\u5b66\u4e60\u9886\u57df\u7684\u7f16\u8bd1\u5668"),"\u3002"),(0,l.kt)("p",null,"\u5728\u8fd9\u6837\u7684\u8d8b\u52bf\u4e0b\uff0c Nvidia \u5f00\u53d1\u4e86\u7ebf\u6027\u4ee3\u6570\u6a21\u677f\u5e93 CUTLASS \uff0c\u62bd\u8c61\u4e86\u4e00\u7cfb\u5217\u9ad8\u6027\u80fd\u7684\u57fa\u672c\u7ec4\u4ef6\uff0c\u53ef\u4ee5\u7528\u4e8e\u751f\u6210\u5404\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u5404\u79cd\u8ba1\u7b97\u5355\u5143\u7684\u5377\u79ef\u3001\u77e9\u9635\u4e58\u7b97\u5b50\u3002 MegEngine \u5728 CUTLASS \u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u4e86\u4e8c\u6b21\u5f00\u53d1\uff0c\u53ef\u4ee5\u9ad8\u6548\u5730\u5f00\u53d1\u65b0\u7684\u9ad8\u6027\u80fd\u7684\u7b97\u5b50\uff0c\u5feb\u901f\u5730\u8fc1\u79fb\u5230\u65b0\u7684 GPU \u67b6\u6784\u3002\u5728\u4e0a\u4e00\u7bc7 ",(0,l.kt)("a",{parentName:"p",href:"https://zhuanlan.zhihu.com/p/258931422"},"\u6587\u7ae0")," \u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u7b80\u5355\u4ecb\u7ecd\u4e86 MegEngine \u7684\u5e95\u5c42\u5377\u79ef\u7b97\u5b50\u5b9e\u73b0\u7684\u4f7f\u7528\u65b9\u6cd5\uff0c\u800c\u672c\u6587\u5c06\u4f1a\u6df1\u5165\u4ecb\u7ecd MegEngine CUDA \u5e73\u53f0\u7684\u5e95\u5c42\u5377\u79ef\u7b97\u5b50\u7684\u5b9e\u73b0\u539f\u7406\uff0c\u5e76\u5c06\u4f1a\u5bf9 Nvidia CUTLASS \u7684 Implicit GEMM \u5377\u79ef ",(0,l.kt)("a",{parentName:"p",href:"https://link.zhihu.com/?target=https%3A//github.com/NVIDIA/cutlass/blob/master/media/docs/implicit_gemm_convolution.md"},"\u6587\u6863")," \u8fdb\u884c\u89e3\u8bfb\u548c\u8865\u5145\u3002"),(0,l.kt)("p",null,"\u56e0\u6b64\uff0c\u8bfb\u8005\u5728\u9605\u8bfb\u672c\u6587\u4e4b\u524d\u5fc5\u987b\u8981\u4e86\u89e3\u7684 CUDA \u77e5\u8bc6\u6709\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u8bbf\u95ee\u5168\u5c40\u5b58\u50a8\uff08Global Memory\uff09\u65f6\uff0c\u540c\u4e00 Warp \u4e2d\u7684\u76f8\u90bb\u7ebf\u7a0b\u8bbf\u95ee\u8fde\u7eed\u7684\u5730\u5740\uff0c\u8bbf\u5b58\u8bf7\u6c42\u4f1a\u88ab\u5408\u5e76\uff0c\u5408\u5e76\u7684\u8bbf\u5b58\u80fd\u591f\u6700\u5927\u5316 Global Memory \u7684\u541e\u5410\u3002")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u8bbf\u95ee Global Memory \u65f6\uff0c\u5c3d\u53ef\u80fd\u4f7f\u7528\u6700\u5bbd\u7684\u6570\u636e\u7c7b\u578b\uff08float4\uff09\u8fdb\u884c\u8bbf\u95ee\uff0c\u8fd9\u6837\u53ef\u4ee5\u6700\u5927\u5316\u8bbf\u5b58\u6307\u4ee4\u7684\u5229\u7528\u7387\u3002")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"CUDA \u7684\u5171\u4eab\u5b58\u50a8\uff08Shared Memory\uff09\u6309\u7167\u6bcf 4Bytes \u5212\u5206\u4e3a\u4e00\u4e2a bank\uff0c\u5171\u5206\u4e3a 32 \u4e2a bank\u3002\u5f53\u540c\u4e00 Warp \u4e2d\u7684\u7ebf\u7a0b\u8bbf\u95ee\u540c\u4e00 bank \u7684\u4e0d\u540c\u5730\u5740\u65f6\u4f1a\u53d1\u751f\u51b2\u7a81\uff08bank conflict\uff09\u3002\u65e0 bank conflict \u7684\u8bbf\u5b58\u6a21\u5f0f\u624d\u80fd\u6700\u5927\u5316 Shared Memory \u7684\u541e\u5410\u3002")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"GPU \u6709\u663e\u5b58\uff08Global Memory\uff09\u3001L2\u3001L1\uff08Shared Memory\uff09\u3001\u5bc4\u5b58\u5668 4 \u4e2a\u5c42\u6b21\u7684\u5b58\u50a8\uff0c\u76f4\u63a5\u8bbf\u95ee\u663e\u5b58\u7684\u5ef6\u8fdf\u5f88\u9ad8\uff0c\u5728\u4f18\u5316 GEMM\u3001Convolution \u8fd9\u6837\u7684\u8ba1\u7b97\u5bc6\u96c6\u578b\u7b97\u5b50\u65f6\uff0c\u9700\u8981")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u901a\u8fc7 L1 \u548c\u5bc4\u5b58\u5668\u7684\u7f13\u5b58\u6765\u51cf\u5c11 Global Memory \u7684\u8bbf\u5b58\u8bf7\u6c42\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u901a\u8fc7\u5927\u91cf\u7684\u8ba1\u7b97\u6765\u9690\u85cf\u4e0d\u53ef\u907f\u514d\u7684 Global Memory \u8bbf\u5b58\u5ef6\u8fdf\u3002")))),(0,l.kt)("p",null,"\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3 CUTLASS \u5f15\u5165\u7684\u4e00\u4e9b\u62bd\u8c61\u6982\u5ff5"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"TileIterator")," : \u7528\u4e8e\u8bbf\u95ee\u5b58\u50a8\u4e2d\u7684\u4e00\u4e2aTile\u7684\u6570\u636e\u3002",(0,l.kt)("inlineCode",{parentName:"li"},"TileIterator")," \u5b9e\u73b0\u4e86",(0,l.kt)("inlineCode",{parentName:"li"},"advance()"),"\u65b9\u6cd5\uff0c\u652f\u6301\u5728 ",(0,l.kt)("inlineCode",{parentName:"li"},"Matrix")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"Tensor")," \u7b49\u6570\u636e\u7c7b\u578b\u4e0a\u8fdb\u884c\u904d\u5386\u3002"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Fragment")," : \u6570\u7ec4\u7c7b\u578b\uff0c\u7528\u4e8e\u5b58\u653e ",(0,l.kt)("inlineCode",{parentName:"li"},"TileIterator")," \u8bfb\u53d6\u8fdb\u6765\u7684\u6570\u636e\u3002 ",(0,l.kt)("inlineCode",{parentName:"li"},"Fragment")," \u7684\u6570\u636e\u901a\u5e38\u5b58\u653e\u5728\u5bc4\u5b58\u5668\u4e2d\u3002")),(0,l.kt)("p",null,"\u7136\u540e\u6211\u4eec\u7b80\u5355\u56de\u987e\u4e00\u4e0b CUTLASS \u8bbe\u8ba1\u7684\u9ad8\u6027\u80fd\u7684 GEMM \u7b97\u5b50\u7684 Pipeline\uff0c\u6309\u7167 Pipeline \u5b9e\u73b0\u7684\u7b97\u5b50\u80fd\u591f\u5728 CUDA \u5e73\u53f0\u4e0a\u8fbe\u5230 cublas \u7684 90% \u4ee5\u4e0a\u7684\u6027\u80fd\u3002\u4e0b\u56fe\u6f14\u793a\u4e86 CUTLASS \u8bbe\u8ba1\u7684 Pipeline \u5316\u7684 GEMM \u7b97\u5b50\uff1a"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://pic2.zhimg.com/80/v2-bca194928d63c2948b78e14d9300efd1_720w.jpg",alt:"img"})),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"\u56fe\u4e2d\u7b2c\u4e00\u884c\u6f14\u793a\u4e86\u7531 ",(0,l.kt)("inlineCode",{parentName:"li"},"PredicatedTileIterator")," \u548c ",(0,l.kt)("inlineCode",{parentName:"li"},"SmemTileIterator")," \u914d\u5408\u5b8c\u6210\u4ece Global Memory \u5230 Shared Memory \u7684\u6570\u636e\u642c\u8fd0\u3002"),(0,l.kt)("li",{parentName:"ol"},"\u7b2c\u4e8c\u884c\u6f14\u793a\u4e86 ",(0,l.kt)("inlineCode",{parentName:"li"},"WarpTileIterator")," \u8d1f\u8d23\u4ece Shared Memory \u642c\u8fd0\u6570\u636e\u5230 ",(0,l.kt)("inlineCode",{parentName:"li"},"Fragment")," \u5bc4\u5b58\u5668\u4e2d\u3002"),(0,l.kt)("li",{parentName:"ol"},"\u7b2c\u4e09\u884c\u5c55\u793a\u4e86",(0,l.kt)("inlineCode",{parentName:"li"},"WarpMmaOperator")," \u7528 ",(0,l.kt)("inlineCode",{parentName:"li"},"Fragment")," \u5bc4\u5b58\u5668\u4e2d\u7684\u77e9\u9635\u6570\u636e\u6267\u884c\u77e9\u9635\u4e58\u52a0 (Matrix-Multiply-Add) \u64cd\u4f5c\u3002")),(0,l.kt)("h2",{id:"\u4e8cimplicit-gemm-\u7b97\u6cd5"},"\u4e8c\u3001Implicit GEMM \u7b97\u6cd5"),(0,l.kt)("h3",{id:"1\u5377\u79ef\u6620\u5c04\u4e3a\u77e9\u9635\u4e58\u6cd5"},"1\u3001\u5377\u79ef\u6620\u5c04\u4e3a\u77e9\u9635\u4e58\u6cd5"),(0,l.kt)("p",null,"\u6211\u4eec\u9996\u5148\u6765\u770b\u4e00\u4e0b\u524d\u5411\u5377\u79ef\u7b97\u5b50\u7684\u5b9a\u4e49\uff0c\u5047\u8bbe\u8f93\u5165\u7684 feature map \u662f x\uff0c\u5377\u79ef\u5c42\u7684 weight \u662f w\uff0c\u8f93\u51fa\u662f y\uff0c\u5176\u4e2d x,y,w \u90fd\u662f 4 \u7ef4\u7684 Tensor\uff0cx \u7684\u56db\u4e2a\u7ef4\u5ea6\u5206\u522b\u662f NxICxIHxIW\uff0cw \u7684\u56db\u4e2a\u7ef4\u5ea6\u5206\u522b\u662f OCxICxFHxFW\uff0cy \u7684\u56db\u4e2a\u7ef4\u5ea6\u5206\u522b\u662f NxOCxOHxOW\u3002\u90a3\u4e48\u8f93\u51fa y \u548c\u8f93\u5165 x, w \u7684\u6570\u5b66\u5173\u7cfb\u5f0f\u53ef\u4ee5\u5199\u6210"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://www.zhihu.com/equation?tex=%5Ctext%7By%7D%28+%5Ctext%7Bn%7D%2C+%5Ctext%7Boc%7D%2C+%5Ctext%7Boh%7D%2C+%5Ctext%7Bow%7D+%29+%3D+%5Csum_%7B%5Ctext%7Bic%7D%7D+%5Csum_%7B%5Ctext%7Bfh%7D%7D+%5Csum_%7B%5Ctext%7Bfw%7D%7D+%5Ctext%7Bx%7D+%28%5Ctext%7Bn%7D%2C+%5Ctext%7Bic%7D%2C+%5Ctext%7Bih%7D%2C+%5Ctext%7Biw%7D%29+%5Ccdot+%5Ctext%7Bw%7D+%28+%5Ctext%7Boc%7D%2C+%5Ctext%7Bic%7D%2C+%5Ctext%7Bfh%7D%2C+%5Ctext%7Bfw%7D+%29",alt:"[\u516c\u5f0f]"})),(0,l.kt)("p",null,"\u516c\u5f0f\u91cc\u7684\u5c0f\u5199\u5b57\u6bcd\u4ee3\u8868\u4e86 Tensor \u5728\u6bcf\u4e00\u7ef4\u7684\u5750\u6807\uff0c\u5176\u4e2d ih\uff0ciw \u548c oh\uff0cow\uff0cfh\uff0cfw \u7684\u5173\u7cfb\u5f0f\u53ef\u4ee5\u5199\u4e3a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"ih = oh * stride_h - pad_h + fh\niw = ow * stride_w - pad_w + fw\n")),(0,l.kt)("p",null,"\u8fd9\u91cc\u7684",(0,l.kt)("inlineCode",{parentName:"p"},"stride_h"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"stride_w"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"pad_h"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"pad_w"),"\u662f\u5377\u79ef\u5c42\u7684\u53c2\u6570\u3002\n\u6839\u636e im2col \u7b97\u6cd5\u7684\u539f\u7406\uff0c\u516c\u5f0f\u91cc\u5b9a\u4e49\u7684\u5377\u79ef\u8fd0\u7b97\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4e00\u4e2a\u77e9\u9635\u4e58\u6cd5\uff0c\u4e5f\u5373"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"C = Matmul(A, B)\n")),(0,l.kt)("p",null,"\u5176\u4e2d"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u77e9\u9635 A \u7531 weight \u8f6c\u5316\u800c\u6765\uff0c\u662f\u4e00\u4e2a ",(0,l.kt)("img",{parentName:"li",src:"https://www.zhihu.com/equation?tex=%5Ctext%7BOC%7D%5Ctimes%5Ctext%7BIC%7D%5Ccdot%5Ctext%7BFH%7D%5Ccdot%5Ctext%7BFW%7D",alt:"[\u516c\u5f0f]"})," \u7684\u77e9\u9635\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u77e9\u9635 B \u7531 feature map \u8f6c\u5316\u800c\u6765\uff0c\u662f\u4e00\u4e2a ",(0,l.kt)("img",{parentName:"li",src:"https://www.zhihu.com/equation?tex=%5Ctext%7BIC%7D%5Ccdot%5Ctext%7BFH%7D%5Ccdot%5Ctext%7BFW%7D%5Ctimes%5Ctext%7BN%7D%5Ccdot%5Ctext%7BOH%7D%5Ccdot%5Ctext%7BOW%7D",alt:"[\u516c\u5f0f]"})," \u7684\u77e9\u9635"),(0,l.kt)("li",{parentName:"ul"},"\u77e9\u9635 C \u4ee3\u8868\u4e86\u8f93\u51fa\u7684 Tensor y\uff0c\u662f\u4e00\u4e2a ",(0,l.kt)("img",{parentName:"li",src:"https://www.zhihu.com/equation?tex=%5Ctext%7BOC%7D%5Ctimes%5Ctext%7BN%7D%5Ccdot%5Ctext%7BOH%7D%5Ccdot%5Ctext%7BOW%7D",alt:"[\u516c\u5f0f]"})," \u7684\u77e9\u9635\u3002")),(0,l.kt)("p",null,"\u77e9\u9635\u548c Tensor \u5728\u5404\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u7684\u5bf9\u5e94\u5173\u7cfb\u4e3a"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://www.zhihu.com/equation?tex=%5Cbegin%7Bequation%7D++%5Cbegin%7Baligned%7D+A_%7Bik%7D+%26%3D+%5Ctext%7Bw%7D%5Cleft%28%5Ctext%7Boc%7D%2C+%5Ctext%7Bic%7D%2C+%5Ctext%7Bfh%7D%2C+%5Ctext%7Bfw%7D%5Cright%29+%5Cend%7Baligned%7D+%5Cend%7Bequation%7D++",alt:"[\u516c\u5f0f]"})),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://www.zhihu.com/equation?tex=%5Cbegin%7Bequation%7D+%5Cbegin%7Baligned%7D%5C+B_%7Bkj%7D+%26%3D+%5Ctext%7Bx%7D%5Cleft%28%5Ctext%7Bn%7D%2C+%5Ctext%7Bic%7D%2C+%5Ctext%7Bih%7D%2C+%5Ctext%7Biw%7D%5Cright%29+%5Cend%7Baligned%7D+%5Cend%7Bequation%7D+",alt:"[\u516c\u5f0f]"})),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://www.zhihu.com/equation?tex=%5Cbegin%7Bequation%7D+%5Cbegin%7Baligned%7DC_%7Bij%7D+%26%3D+%5Ctext%7By%7D%5Cleft%28%5Ctext%7Bn%7D%2C+%5Ctext%7Boc%7D%2C+%5Ctext%7Boh%7D%2C+%5Ctext%7Bow%7D%5Cright%29+%5Cend%7Baligned%7D+%5Cend%7Bequation%7D",alt:"[\u516c\u5f0f]"})),(0,l.kt)("p",null,"\u5176\u4e2d\u77e9\u9635\u7684\u4e0b\u6807 ",(0,l.kt)("img",{parentName:"p",src:"https://www.zhihu.com/equation?tex=i%2C+j%2C+k",alt:"[\u516c\u5f0f]"}),"\u548c Tensor \u7684\u5750\u6807\u4e4b\u95f4\u7684\u5173\u7cfb\u4e3a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"i = oc\nj = n * OH * OW + oh * OW + ow\nk = ic * FH * FW + fh * FW + fw\n")),(0,l.kt)("p",null,"\u5f53",(0,l.kt)("img",{parentName:"p",src:"https://www.zhihu.com/equation?tex=j",alt:"[\u516c\u5f0f]"}),"\u5df2\u77e5\u65f6\uff0c\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u5173\u7cfb\u5f0f\u63a8\u7b97\u51fa feature map \u7684\u5750\u6807"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"n = j / (OH * OW)\nj_res = j % (OH * OW)\noh = j_res / OW\now = j_res % OW\n")),(0,l.kt)("p",null,"\u5f53",(0,l.kt)("img",{parentName:"p",src:"https://www.zhihu.com/equation?tex=k",alt:"[\u516c\u5f0f]"})," \u5df2\u77e5\u65f6\uff0c\u53ef\u4ee5\u63a8\u7b97\u51fa weight \u7684\u5750\u6807"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"ic = k / (FH * FW)\nk_res = k % (FH * FW)\nfh = k_res / FW\nfw = k_res % FW\n")),(0,l.kt)("p",null,"\u540c\u65f6\u7ed3\u5408 oh, ow, fh, fw\uff0c\u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa ih \u548c iw\u3002\n\u6839\u636e\u4e0a\u9762\u7684\u8ba8\u8bba\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5377\u79ef\u7684\u8fd0\u7b97\u8fc7\u7a0b\uff0c\u5199\u6210\u4e00\u4e2a\u9690\u5f0f\u77e9\u9635\u4e58\u6cd5 (Implicit GEMM) \u7684\u5f62\u5f0f\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"GEMM_M = OC\nGEMM_N = N * OH * OW\nGEMM_K = IC * FH * FW\nfor i in range(GEMM_M):\n    oc = i\n    for j in range(GEMM_N):\n        accumulator = 0\n        n = j / (OH * OW)\n        j_res = j % (OH * OW)\n        oh = j_res / OW\n        ow = j_res % OW\n        for k in range(GEMM_K):\n            ic = k / (FH * FW)\n            k_res = k % (FH * FW)\n            fh = k_res / FW\n            fw = k_res % FW\n            ih = oh * stride_h - pad_h + fh\n            iw = ow * stride_w - pad_w + fw\n            accumulator = accumulator + x(n, ic, ih, iw) * w(oc, ic, fh, fw)\n        y(n, oc, oh, ow) = accumulator\n")),(0,l.kt)("p",null,"\u4e0a\u9762\u7684 Implicit GEMM \u7b97\u6cd5\u4ecd\u7136\u662f\u4e32\u884c\u7684\u5f62\u5f0f\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u628a\u5b83\u6539\u9020\u6210 CUDA \u4e0a\u7684\u5e76\u884c\u7b97\u6cd5\u3002\u9996\u5148\u6211\u4eec\u5bf9\u6574\u4e2a\u8ba1\u7b97\u4efb\u52a1\u8fdb\u884c\u5206\u5757\uff0c\u8ba9\u6bcf\u4e2a\u7ebf\u7a0b\u5757\u8d1f\u8d23\u8ba1\u7b97\u5e76\u8f93\u51fa\u5927\u5c0f\u4e3a",(0,l.kt)("inlineCode",{parentName:"p"},"TILE_MxTILE_N"),"\u7684\u77e9\u9635\u3002\u4e8e\u662f\u7b97\u6cd5\u53d8\u6210\u4e86\u4e0b\u9762\u7684\u5f62\u5f0f\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"for i_out in range(GEMM_M / TILE_M):\n    for j_out in range(GEMM_N / TILE_N):\n        ThreadblockConvolution(x, w, y)\n\ndef ThreadblockConvolution(x, w, y):\n    accumulate[TILE_M, TILE_N] = 0\n    for i_in in range(TILE_M):\n        oc = i_out * TILE_M + i_in\n        for j_in in range(TILE_N):\n            j = j_out * TILE_N + j_in\n            n = j / (OH * OW)\n            j_res = j % (OH * OW)\n            oh = j_res / OW\n            ow = j_res % OW\n            for k in range(GEMM_K):\n                ic = k / (FH * FW)\n                k_res = k % (FH * FW)\n                fh = k_res / FW\n                fw = k_res % FW\n                ih = oh * stride_h - pad_h + fh\n                iw = ow * stride_w - pad_w + fw\n                accumulator(i_in, j_in) = accumulator(i_in, j_in) \n                                        + x(n, ic, ih, iw) * w(oc, ic, fh, fw)\n            y(n, oc, oh, ow) = accumulator(i_in, j_in)\n")),(0,l.kt)("p",null,"\u4e3a\u4e86\u63d0\u9ad8\u8bbf\u5b58\u7684\u6548\u7387\uff0c\u6211\u4eec\u53ef\u4ee5\u5728",(0,l.kt)("inlineCode",{parentName:"p"},"GEMM_K"),"\u8fd9\u4e00\u7ef4\u4e0a\u4e5f\u8fdb\u884c\u5206\u5757\uff0c\u6bcf\u6b21\u5c06",(0,l.kt)("inlineCode",{parentName:"p"},"TILE_MxTILE_K"),"\u7684\u77e9\u9635 A \u548c",(0,l.kt)("inlineCode",{parentName:"p"},"TILE_KxTILE_N"),"\u7684\u77e9\u9635 B \u7f13\u5b58\u5230 Shared Memory \u91cc\uff0c\u907f\u514d\u91cd\u590d\u7684 Global Memory \u8bbf\u5b58\u3002\u4e8e\u662f\uff0c\u7b97\u6cd5\u5c31\u53d8\u6210\u4e86\u5982\u4e0b\u5f62\u5f0f\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"for i_out in range(GEMM_M / TILE_M):\n    for j_out in range(GEMM_N / TILE_N):\n        ThreadblockConvolution(x, w, y)\n\ndef ThreadblockConvolution(x, w, y):\n    accumulator[TILE_M, TILE_N] = 0\n    smem_A[TILE_M, TILE_K] = 0\n    smem_B[TILE_K, TILE_N] = 0\n    for i_in in range(TILE_M):\n        oc = i_out * TILE_M + i_in\n        for j_in in range(TILE_N):\n            j = j_out * TILE_N + j_in\n            n = j / (OH * OW)\n            j_res = j % (OH * OW)\n            oh = j_res / OW\n            ow = j_res % OW\n            for k_out in range(GEMM_K / TILE_K):\n                load_tile_to_smem(x, A_smem)\n                load_tile_to_smem(w, B_smem)\n                WarpGemm(A_smem, B_smem, accumulator)\n            y(n, oc, oh, ow) = accumulator(i_in, j_in)\n\ndef WarpGemm(A_smem, B_smem, accumulator):\n    for k_in in range(TILE_K):\n        accumulator(i_in, j_in) = accumulator(i_in, j_in) \n                                + A_smem(i_in, k_in) * B_smem(k_in, j_in)\n")),(0,l.kt)("p",null,"\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u590d\u7528 CUTLASS \u91cc\u5df2\u7ecf\u5b9e\u73b0\u597d\u4e86\u9ad8\u6027\u80fd\u7684",(0,l.kt)("inlineCode",{parentName:"p"},"WarpMmaOperator"),"\uff0c\u6240\u4ee5\u5b9e\u73b0\u57fa\u4e8e Implicit GEMM \u7684\u5377\u79ef\u7b97\u5b50\u53ea\u9700\u8981"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u9002\u914d",(0,l.kt)("inlineCode",{parentName:"li"},"DeviceConvolution"),"\u3001",(0,l.kt)("inlineCode",{parentName:"li"},"KernelConvolution"),"\u548c",(0,l.kt)("inlineCode",{parentName:"li"},"ThreadblockConvolution"),"\uff0c\u652f\u6301\u4f20\u5165 Tensor \u7c7b\u578b\u548c Convolution Layer \u7684\u53c2\u6570\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u6dfb\u52a0",(0,l.kt)("inlineCode",{parentName:"li"},"PredicateTileIterator"),"\u652f\u6301\u8bfb\u53d6 Tensor \u7684\u4e00\u4e2a Tile \u7684\u6570\u636e\u5230 Shared Memory \u4e2d\uff0c\u5e76\u9690\u5f0f\u5730\u5c06\u8bfb\u5165\u7684\u6570\u636e\u7ec4\u7ec7\u6210\u77e9\u9635\u7684\u5f62\u5f0f\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u7b97\u6cd5\u7684 main loop \u4e2d\u76f4\u63a5\u8c03\u7528",(0,l.kt)("inlineCode",{parentName:"li"},"WarpTileIterator"),"\u4ece Shared Memory \u8bfb\u53d6\u6570\u636e\uff0c\u7136\u540e\u7531",(0,l.kt)("inlineCode",{parentName:"li"},"WarpGemmOperator"),"\u5b8c\u6210 Warp-level \u7684 GEMM \u8fd0\u7b97\u3002"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"EpilogueOperator"),"\u9002\u914d\u5377\u79ef\u7b97\u5b50\uff0c\u5c06 Accumulator \u7684\u6570\u636e\u5199\u56de Global Memory \u7684 Tensor \u4e2d\u3002")),(0,l.kt)("p",null,"\u63a5\u4e0b\u6765\u6211\u4eec\u4f1a\u4ee5 INT8 \u6570\u636e\u7c7b\u578b\u7684 TensorCore \u5377\u79ef\u7b97\u5b50\u6765\u4ecb\u7ecd MegEngine \u5e95\u5c42\u7684\u5377\u79ef\u5b9e\u73b0\uff0c\u672c\u6587\u4f1a\u91cd\u70b9\u4ecb\u7ecd 2\u30013\u30014 \u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff0c\u5173\u4e8e\u5982\u4f55\u4f7f\u7528\u5df2\u7ecf\u5199\u597d\u7684\u5377\u79ef\u7b97\u5b50\uff0c\u53ef\u4ee5\u53c2\u8003\u4e4b\u524d\u7684 ",(0,l.kt)("a",{parentName:"p",href:"https://zhuanlan.zhihu.com/p/258931422"},"\u6587\u7ae0"),"\u3002"),(0,l.kt)("h3",{id:"2global-memory-\u6570\u636e\u5e03\u5c40layout"},"2\u3001Global Memory \u6570\u636e\u5e03\u5c40\uff08Layout\uff09"),(0,l.kt)("p",null,"\u4e3a\u4e86\u6700\u5927\u5316 TensorCore \u7c7b\u578b\u7684\u5377\u79ef\u7b97\u5b50\u7684\u541e\u5410\uff0cMegEngine \u4f7f\u7528\u4e86 128 \u4f4d\u7684 Global Memory \u8bbf\u5b58\u6307\u4ee4\uff0c\u56e0\u6b64\u5728\u8bbf\u95ee Tensor \u7684\u6570\u636e\u7684\u65f6\u5019\u8981\u6c42\u5730\u5740\u6ee1\u8db3 128 \u4f4d\u5bf9\u9f50\u3002MegEngine \u4f7f\u7528\u4e86 NCHW32 \u7684\u683c\u5f0f\u6765\u5b58\u50a8 Tensor\uff0cNCHW32 \u683c\u5f0f\u7684\u7279\u70b9\u4e3a\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tensor \u7684\u901a\u9053\u7ef4\u5ea6\u6309\u7167 32 \u4e2a channel \u8fdb\u884c\u5206\u7ec4\uff0c\u6bcf 32 \u4e2a channel \u8fde\u7eed\u7684\u5b58\u653e\u5728\u5b58\u50a8\u4e2d\u3002"),(0,l.kt)("li",{parentName:"ul"},"Tensor \u7684\u5176\u4f59\u7ef4\u5ea6\u6309\u7167 W\u3001H\u3001C\u3001N \u7684\u987a\u5e8f\u5730\u5740\u53d8\u5316\u7531\u5feb\u5230\u6162\u7684\u5b58\u653e\u5728\u5b58\u50a8\u4e2d\u3002")),(0,l.kt)("p",null,"\u7531\u4e8e\u91c7\u7528\u4e86 32 \u4e2a\u901a\u9053\u5bf9\u9f50\u7684\u5b58\u50a8\u683c\u5f0f\uff0c\u56e0\u6b64\u5377\u79ef layer \u8981\u6c42\u8f93\u5165\u548c\u8f93\u51fa feature map \u7684\u901a\u9053\u6570\u90fd\u662f 32 \u7684\u500d\u6570\u3002"),(0,l.kt)("h3",{id:"3\u9884\u5904\u7406\u8bbf\u5b58\u504f\u79fb\u91cf"},"3\u3001\u9884\u5904\u7406\u8bbf\u5b58\u504f\u79fb\u91cf"),(0,l.kt)("p",null,"MegEngine \u7684\u5377\u79ef\u5b9e\u73b0\u5728",(0,l.kt)("inlineCode",{parentName:"p"},"GEMM_K"),"\u7684\u7ef4\u5ea6\u4e0a\u662f\u6309\u7167 ",(0,l.kt)("img",{parentName:"p",src:"https://www.zhihu.com/equation?tex=%28%5Ctext%7BIC%7D%2F32%29%5Ccdot+%5Ctext%7BFH%7D%5Ccdot+%5Ctext%7BFW%7D%5Ccdot32",alt:"[\u516c\u5f0f]"})," \u7684\u987a\u5e8f\u7d2f\u52a0\uff0c\u5199\u6210\u4f2a\u4ee3\u7801\u7684\u5f62\u5f0f\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"kInterleaved = 32\nfor ic_out in range(IC//kInterleaved):\n    for fh in range(FH):\n        for fw in range(FW):\n            for ic_in in range(kInterleaved):\n                # do mma\n                ......\n")),(0,l.kt)("p",null,"\u5982\u679c\u5199\u6210\u4e00\u5c42\u5faa\u73af\uff0c\u90a3\u4e48\u5e94\u8be5\u5199\u6210\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"kInterleaved = 32\nfor k in range(GEMM_K):\n    chw = k // kInterleaved\n    ic_in = k % kInterleaved\n    ic_out = chw // (FH * FW)\n    chw_res = chw % (FH * FW)\n    fh = chw_res // FW\n    fw = chw_res % FW\n    pointer += ic_out * C_STRIDE + fh * H_STRIDE + fw * W_STRIDE\n    # do mma\n    ......\n")),(0,l.kt)("p",null,"\u53ef\u4ee5\u770b\u5230\u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u76f4\u63a5\u8ba1\u7b97\u6307\u9488\u7684\u504f\u79fb\u91cf\u7684\u8bdd\uff0c\u4f1a\u5f15\u5165\u5f88\u591a\u9664\u6cd5\u548c\u6c42\u4f59\u8fd0\u7b97\u3002\u800c\u5728 CUDA \u5e73\u53f0\u4e0a\uff0c\u6574\u6570\u7684\u9664\u6cd5\u548c\u6c42\u4f59\u7684\u5f00\u9500\u662f\u975e\u5e38\u5927\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u4e00\u4e9b\u5730\u5740\u7684\u504f\u79fb\u91cf\u5728 host \u7aef\u9884\u5148\u8ba1\u7b97\u597d\uff0c\u5b58\u5230 kernel param \u7684 buffer \u4e2d\uff0c\u9700\u8981\u65f6\u4ece constant memory \u4e2d\u76f4\u63a5\u8bfb\u53d6\u5730\u5740\uff0c\u907f\u514d\u9664\u6cd5\u548c\u6c42\u4f59\u8fd0\u7b97\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u7ebf\u7a0b\u6765\u8bf4\uff0c\u5728\u4e3b\u5faa\u73af\u4e2d\u6307\u9488\u79fb\u52a8\u7684 offset \u5982\u4e0b\u56fe\u6240\u793a\uff1a"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://pic4.zhimg.com/80/v2-ebe752b39a8e61aac53a6904ac463deb_720w.jpg",alt:"img"})),(0,l.kt)("p",null,"\u5982\u679c\u5730\u5740\u7684\u589e\u91cf\u53ef\u4ee5\u7528",(0,l.kt)("inlineCode",{parentName:"p"},"delta"),"\u6765\u8868\u793a\u7684\u8bdd\uff0c\u90a3\u4e48",(0,l.kt)("inlineCode",{parentName:"p"},"delta"),"\u662f\u4ee5",(0,l.kt)("inlineCode",{parentName:"p"},"FH*FW"),"\u4e3a\u5468\u671f\u7684\uff0c\u5373\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"delta(step, TILE_K) = delta(step + (FH * FW), TILE_K)\n")),(0,l.kt)("p",null,"\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5927\u7ea6 ",(0,l.kt)("img",{parentName:"p",src:"https://www.zhihu.com/equation?tex=%5Ctext%7BO%7D%5Cleft%28%5Ctext%7BFH%7D%5Ccdot%5Ctext%7BFW%7D%5Cright%29",alt:"[\u516c\u5f0f]"})," \u7684\u5b58\u50a8\u7a7a\u95f4\u3002\u5176\u4e2d\u5730\u5740\u504f\u79fb\u91cf\u7684\u8ba1\u7b97\u903b\u8f91\u53ef\u4ee5\u53c2\u8003\u4ee3\u7801 ",(0,l.kt)("a",{parentName:"p",href:"https://link.zhihu.com/?target=https%3A//github.com/MegEngine/cutlass/blob/61ff64e3ab6ad05b5ce2f205216901e8d030013d/include/cutlass/convolution/threadblock/conv2d_tile_iterator_nt_src_fprop_precomp.h%23L76"},"conv2d_tile_iterator_nt_src_fprop_precomp.h"),"\u3002\u7531\u4e8e kernel param buffer \u7684\u5927\u5c0f\u4e3a 4KB\uff0c\u6211\u4eec\u7528\u4e86\u5927\u7ea6 3KB \u6765\u5b58\u50a8\u5730\u5740\u7684\u589e\u91cf\uff0c\u6240\u4ee5 MegEngine \u7684\u5377\u79ef\u5b9e\u73b0\u8981\u6c42 Convolution Layer \u7684",(0,l.kt)("inlineCode",{parentName:"p"},"FH*FW"),"\u7684\u5927\u5c0f\u4e0d\u80fd\u592a\u5927\uff0c\u4f46\u662f\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c3x3, 5x5, 7x7 \u7684\u5377\u79ef\u90fd\u53ef\u4ee5\u5904\u7406\u3002Nvidia \u5b98\u65b9\u5b9e\u73b0\u7684\u8fed\u4ee3\u987a\u5e8f\u4e0e\u672c\u6587\u4ecb\u7ecd\u7684\u7565\u6709\u4e0d\u540c\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u5b98\u65b9\u5b9e\u73b0\u9700\u8981\u5c06",(0,l.kt)("inlineCode",{parentName:"li"},"IC"),"\u8865\u9f50\u4e3a",(0,l.kt)("inlineCode",{parentName:"li"},"TILE_K"),"\u7684\u500d\u6570\uff0c\u8fd9\u6837\u5728\u901a\u9053\u6570\u8f83\u5c0f\u65f6\u4f1a\u6d6a\u8d39\u4e00\u4e9b\u8ba1\u7b97\u91cf\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u5b98\u65b9\u5b9e\u73b0\u7684\u7ebf\u7a0b\u5757\u5728\u8bbf\u95ee\u8f93\u5165 feature map \u7684\u65f6\u5019\u5730\u5740\u7684\u8de8\u5ea6\u6bd4\u8f83\u5927\uff0c\u964d\u4f4e\u4e86\u8bbf\u5b58\u7684\u5c40\u90e8\u6027\uff0c\u5bf9 cache \u4e0d\u591f\u53cb\u597d\u3002")),(0,l.kt)("p",null,"\u56e0\u6b64\u5728\u6027\u80fd\u65b9\u9762\uff0cMegEngine \u7684\u5b9e\u73b0\u4f1a\u66f4\u6709\u4f18\u52bf\uff0c\u800c\u5b98\u65b9\u5b9e\u73b0\u7684\u4f18\u70b9\u662f\u5bf9 Convolution Layer \u7684\u53c2\u6570\u6ca1\u6709\u592a\u591a\u9650\u5236\uff0c\u901a\u7528\u6027\u66f4\u597d\u3002"),(0,l.kt)("h3",{id:"4warp-level-mmamatrix-multiply-add-\u6307\u4ee4"},"4\u3001Warp-level Mma(Matrix-multiply-add) \u6307\u4ee4"),(0,l.kt)("p",null,"cuda10.2 \u5f15\u5165\u4e86\u65b0\u7684 Warp-level \u7684",(0,l.kt)("inlineCode",{parentName:"p"},"mma"),"\u548c",(0,l.kt)("inlineCode",{parentName:"p"},"ldmatrix"),"\u6307\u4ee4\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7",(0,l.kt)("inlineCode",{parentName:"p"},"mma"),"\u6307\u4ee4\u4f7f\u7528 TensorCore \u6765\u8fdb\u884c\u9ad8\u901f\u7684\u77e9\u9635\u4e58\u52a0\u8fd0\u7b97\uff0c\u901a\u8fc7",(0,l.kt)("inlineCode",{parentName:"p"},"ldmatrix"),"\u7cbe\u7ec6\u5730\u63a7\u5236 Warp \u7ed9 TensorCore \u5582\u6570\u636e\u3002\u5176\u4e2d",(0,l.kt)("inlineCode",{parentName:"p"},"mma"),"\u6307\u4ee4\u7684\u7528\u6cd5\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'unsigned A, B;  // input matrix fragment data\nint C[2], D[2]; // accumulators\nasm volatile(\n    "mma.sync.aligned.m8n8k16.rol.col.satfinite.s32.s8.s8.s32 {%0,$1}, {%2}, {%3}, {%4,%5};\\n"\n    : "=r"(D[0]), "=r"(D[1])\n    : "r"(A), "r"(B), "r"(C[0]), "r"(C[1]));\n')),(0,l.kt)("p",null,"\u8fd9\u6761\u6307\u4ee4\u7684\u8bed\u4e49\u662f\u7531\u4e00\u4e2a Warp \u7684 32 \u4e2a\u7ebf\u7a0b\u540c\u6b65\u5730\u5b8c\u6210 8x8x16 \u7684\u77e9\u9635\u4e58\u52a0\u8fd0\u7b97\uff0c\u5b83\u6709\u4e09\u4e2a\u8f93\u5165\u64cd\u4f5c\u6570\uff0c\u5176\u4e2d\u53c2\u4e0e\u77e9\u9635\u4e58\u6cd5\u8fd0\u7b97\u7684\u5206\u522b\u662f\u4e00\u4e2a 8x16 \u7684\u77e9\u9635 A \u548c\u4e00\u4e2a 16x8 \u7684\u77e9\u9635 B\uff0c\u8fd9\u4e24\u4e2a\u8f93\u5165\u77e9\u9635\u7684\u6570\u636e\u5206\u5e03\u5728\u540c\u4e00 Warp \u7684 32 \u4e2a\u7ebf\u7a0b\u4e2d\u3002 \u77e9\u9635 A \u7684\u5e03\u5c40\u5982\u4e0b\u56fe\u6240\u793a\uff1a"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://pic1.zhimg.com/80/v2-9b682575fc2d03896316cfb7c3e5ed30_720w.jpg",alt:"img"})),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u540c\u4e00 Warp \u4e2d\u7684 32 \u4e2a\u7ebf\u7a0b\u5206\u4e3a 8 \u7ec4\uff0c\u6bcf\u7ec4\u56db\u4e2a\u7ebf\u7a0b\uff0c\u8d1f\u8d23\u8bfb\u53d6 8x16 \u7684\u77e9\u9635\u4e2d\u7684\u4e00\u884c\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u6bcf\u4e00\u7ec4\u4e2d\u7684\u4e00\u4e2a\u7ebf\u7a0b\u8bfb\u53d6\u6bcf\u4e00\u884c\u4e2d\u76f8\u90bb\u7684 4 \u4e2a int8 \u7684\u6570\u636e\uff0c\u6070\u597d\u586b\u6ee1\u4e00\u4e2a 32 \u4f4d\u7684\u5bc4\u5b58\u5668\u3002")),(0,l.kt)("p",null,"\u7c7b\u4f3c\u7684\u77e9\u9635 B \u7684\u5e03\u5c40\u5982\u4e0b\u56fe\u6240\u793a\uff1a"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://pic2.zhimg.com/80/v2-b5e223bb250730b14763cfc78a66833d_720w.jpg",alt:"img"})),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u6bcf 4 \u4e2a\u7ebf\u7a0b\u4e00\u7ec4\uff0c\u5171\u5206\u4e3a 8 \u7ec4\uff0c\u6bcf\u7ec4\u8d1f\u8d23\u8bfb\u53d6 16x8 \u7684\u77e9\u9635\u4e2d\u7684\u4e00\u5217\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u6bcf\u4e00\u7ec4\u4e2d\u7684\u4e00\u4e2a\u7ebf\u7a0b\u8d1f\u8d23\u8bfb\u53d6\u4e00\u5217\u4e2d\u76f8\u90bb\u7684 4 \u4e2a\u6570\u636e\u3002")),(0,l.kt)("p",null,"\u53c2\u4e0e\u7d2f\u52a0\u8fd0\u7b97\u7684\u77e9\u9635 C \u548c\u8f93\u51fa\u77e9\u9635 D \u7684\u6570\u636e\u4e5f\u540c\u6837\u5206\u5e03\u5728 32 \u4e2a\u7ebf\u7a0b\u4e2d\uff0c\u5b83\u4eec\u7684\u5e03\u5c40\u5982\u4e0b\u56fe\u6240\u793a\uff1a"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://pic1.zhimg.com/80/v2-6c36ecfb5066dcc205bbcb92a9a56578_720w.jpg",alt:"img"})),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u540c\u6837\u6bcf 4 \u4e2a\u7ebf\u7a0b\u4e00\u7ec4\uff0c\u6bcf\u7ec4\u8d1f\u8d23\u8bfb\u5165/\u8f93\u51fa\u4e00\u884c\u7684\u6570\u636e\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u6bcf\u4e2a\u7ebf\u7a0b\u8d1f\u8d23\u8f93\u51fa\u4e00\u884c\u4e2d\u7684\u76f8\u90bb\u4e24\u4e2a int32 \u7c7b\u578b\u7684\u6570\u636e\uff0c\u6070\u597d\u6784\u6210\u4e00\u4e2a 64 \u4f4d\u7684\u5bc4\u5b58\u5668\u3002")),(0,l.kt)("p",null,"\u901a\u8fc7\u5bf9",(0,l.kt)("inlineCode",{parentName:"p"},"mma"),"\u6307\u4ee4\u7684\u5206\u6790\uff0c\u5982\u679c Global Memory/Shared Memory \u4e2d\u7684\u6570\u636e\u662f\u4ee5\u884c\u4f18\u5148 (RowMajor) \u6216\u8005\u5217\u4f18\u5148 (ColumnMajor) \u7684\u683c\u5f0f\u5b58\u50a8\u7684\uff0c\u90a3\u4e48\u5f53\u540c\u4e00 Warp \u6267\u884c\u7a7a\u95f4\u4e0a\u8fde\u7eed\u7684\u4e24\u4e2a 8x8x16 \u7684\u77e9\u9635\u4e58\u52a0\u8fd0\u7b97\u65f6\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u8bfb\u53d6\u7684\u6570\u636e\u5c06\u4f1a\u662f\u8df3\u8dc3\u7684\uff0c\u6267\u884c\u6bcf\u6b21\u4e58\u6cd5\u90fd\u53ea\u80fd\u8bfb\u53d6 32 \u4f4d\u5bbd\u7684\u6570\u636e\u5230\u5bc4\u5b58\u5668\u4e2d\uff0c\u800c\u4f4e\u4f4d\u5bbd\u7684 Load \u6307\u4ee4\u901a\u5e38\u6ca1\u6709\u529e\u6cd5\u6700\u5927\u5316\u5229\u7528\u5b58\u50a8\u7684\u5e26\u5bbd\u3002\u56e0\u6b64 Nvidia \u63d0\u4f9b\u4e86",(0,l.kt)("inlineCode",{parentName:"p"},"ldmatrix"),"\u7684\u6307\u4ee4\uff0c\u53ef\u4ee5\u8ba9\u540c\u4e00 Warp \u4e00\u6b21\u6027\u8bfb\u53d6 4 \u4e2a 8x16 \u7684\u77e9\u9635\u5230\u5bc4\u5b58\u5668\u4e2d\uff0c\u8fd9\u6837\u6070\u597d\u53ef\u4ee5\u8ba9 Warp \u4e2d\u7684\u6bcf\u4e2a\u7ebf\u7a0b\u4e00\u6b21\u8bfb\u53d6 128 \u4f4d\u7684\u6570\u636e\uff0c\u6700\u5927\u5316\u5e26\u5bbd\u7684\u5229\u7528\u7387\u3002 ",(0,l.kt)("inlineCode",{parentName:"p"},"ldmarix"),"\u7684\u7528\u6cd5\u5982\u4e0b\u6240\u793a\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'unsigned addr;  // shared memory pointer\nint x, y, z, w; // loaded data\nint4 data;      // loaded fragment\nasm volatile("ldmatrix.sync.aligned.x4.m8n8.shared.b16 {%0, %1, %2, %3}, [%4];"\n    : "=r"(x), "=r"(y), "=r"(z), "=r"(w)\n    : "r"(addr));\ndata = make_int4(x, y, z, w);\n')),(0,l.kt)("p",null,"\u4e0a\u8ff0\u8fd9\u6761\u6307\u4ee4\u6070\u597d\u8bfb\u53d6\u4e86 4 \u4e2a 8x16 \u7684\u77e9\u9635\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u6070\u597d\u8d1f\u8d23\u8bfb\u53d6\u77e9\u9635\u7684\u4e00\u884c\u6570\u636e\uff0c\u8bfb\u53d6\u5b8c\u6210\u540e\uff0c\u7ebf\u7a0b\u4e4b\u95f4\u4f1a\u8fdb\u884c\u6570\u636e\u4ea4\u6362\uff0c\u5c06\u77e9\u9635\u7684\u6570\u636e\u91cd\u65b0\u5206\u5e03\u5230\u5404\u4e2a\u7ebf\u7a0b\uff0c\u8bfb\u53d6\u7684\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://pic1.zhimg.com/80/v2-145e6d0b04b0fa86f4ba2036b4d42350_720w.jpg",alt:"img"})),(0,l.kt)("p",null,"\u8fd9\u4e00\u8282\u4ecb\u7ecd\u4e86 TensorCore \u76f8\u5173\u7684",(0,l.kt)("inlineCode",{parentName:"p"},"mma"),"\u548c",(0,l.kt)("inlineCode",{parentName:"p"},"ldmatrix"),"\u6307\u4ee4\uff0c\u6709\u4e86\u8fd9\u4e24\u6761\u9ad8\u6027\u80fd\u7684\u6307\u4ee4\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4e3a\u6570\u636e\u8bbe\u8ba1\u5de7\u5999\u7684 Shared Memory \u5b58\u50a8\u683c\u5f0f\uff0c\u6d88\u9664\u4ece Shared Memory \u8bfb\u53d6\u6570\u636e\u7684 bank conflict\uff0c\u4ece\u800c\u63d0\u5347 Shared Memory \u7684\u8bfb\u53d6\u6548\u7387\u3002"),(0,l.kt)("h3",{id:"5shared-memory-\u7684\u6570\u636e\u5e03\u5c40"},"5\u3001Shared Memory \u7684\u6570\u636e\u5e03\u5c40"),(0,l.kt)("p",null,"\u5728\u4ecb\u7ecd Shared Memory \u4e2d\u7684\u6570\u636e\u5e03\u5c40\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3 Shared Memory \u7684\u8bbf\u5b58\u7279\u70b9\u3002Shared Memory \u6309\u7167\u6bcf 4 \u4e2a\u5b57\u8282\u7ec4\u6210\u4e00\u4e2a bank\uff0c\u5171\u5212\u5206\u6210\u4e86 32 \u4e2a bank\uff0c\u540c\u4e00 Warp \u7684\u7ebf\u7a0b\u8bbf\u95ee\u4e86\u76f8\u540c bank \u7684\u4e0d\u540c\u5730\u5740\u65f6\u4f1a\u53d1\u751f conflict\uff0c\u5bfc\u81f4\u8bbf\u5b58\u7684\u6548\u7387\u53d8\u6162\u3002\u5728\u540c\u4e00 Warp \u7684\u7ebf\u7a0b\u8bbf\u95ee\u4e0d\u540c\u4f4d\u5bbd\u7684\u6570\u636e\u65f6\uff0c\u4f1a\u6709\u4e0d\u540c\u7684\u884c\u4e3a\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u6bcf\u4e2a\u7ebf\u7a0b\u8bbf\u95ee Shared Memory \u4e2d 32 \u4f4d\u7684\u6570\u636e\uff0c\u8bbf\u5b58\u5c06\u5728\u4e00\u4e2a\u9636\u6bb5\u5185\u5b8c\u6210\u3002")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u6bcf\u4e2a\u7ebf\u7a0b\u8bbf\u95ee Shared Memory \u4e2d 64 \u4f4d\u7684\u6570\u636e\uff0c\u8bbf\u5b58\u4f1a\u5728\u4e24\u4e2a\u9636\u6bb5\u5185\u5b8c\u6210\uff1a")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u7b2c\u4e00\u4e2a\u9636\u6bb5\uff1a\u524d 16 \u4e2a\u7ebf\u7a0b\u8bbf\u5b58 128 \u5b57\u8282\u7684\u6570\u636e\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u7b2c\u4e8c\u4e2a\u9636\u6bb5\uff1a\u540e 16 \u4e2a\u7ebf\u7a0b\u8bbf\u5b58 128 \u5b57\u8282\u7684\u6570\u636e\u3002"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u6bcf\u4e2a\u7ebf\u7a0b\u8bbf\u95ee Shared Memory \u4e2d\u7684 128 \u4f4d\u7684\u6570\u636e\uff0c\u8bbf\u5b58\u4f1a\u5728\u56db\u4e2a\u9636\u6bb5\u5185\u5b8c\u6210\uff1a")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u6bcf\u4e2a\u9636\u6bb5\u7531 8 \u4e2a\u7ebf\u7a0b\u5b8c\u6210 128 \u5b57\u8282\u7684\u6570\u636e\u7684\u8bbf\u5b58\u3002")))),(0,l.kt)("p",null,"\u5982\u679c\u4e0a\u8ff0\u8fc7\u7a0b\u4e2d\u6bcf\u4e2a\u9636\u6bb5\u90fd\u6ca1\u6709 bank conflict\uff0c\u5219\u80fd\u591f\u8fbe\u5230\u6700\u5927\u7684 Shared Memory \u8bbf\u5b58\u6548\u7387\u3002 \u901a\u5e38\u4e3a\u4e86\u907f\u514d Shared Memory \u7684 bank conflict\uff0c\u6211\u4eec\u4f1a\u5bf9 Shared Memory \u7684\u6570\u636e\u8fdb\u884c padding\uff0c\u8ba9\u7ebf\u7a0b\u8bbf\u95ee\u7684\u6570\u636e\u9519\u5f00\uff0c\u907f\u514d\u843d\u5728\u540c\u4e00 bank \u4e2d\u3002\u4f46\u662f\u8fd9\u6837\u505a\u7684\u95ee\u9898\u662f\u4f1a\u4f7f\u5f97 kernel \u9700\u8981 Shared Memory \u7684 Size \u53d8\u5927\uff0c\u4f46\u662f SM \u4e0a\u7684 L1 cache(Shared Memory) \u53c8\u662f\u6709\u9650\u7684\uff0c\u6240\u4ee5 padding \u4f1a\u964d\u4f4e kernel \u7684 occupancy\uff0c\u8fdb\u800c\u5c31\u4f1a\u964d\u4f4e kernel \u7684\u6027\u80fd\u3002 \u56e0\u6b64 CUTLASS \u8bbe\u8ba1\u4e86\u4e00\u79cd Shared Memory \u7684\u4ea4\u9519\u5e03\u5c40\u65b9\u5f0f\uff0c\u5b83\u80fd\u591f\u5728\u4e0d\u8fdb\u884c padding \u7684\u524d\u63d0\u4e0b\uff0c\u4f7f\u5f97\u7ebf\u7a0b\u8bbf\u5b58\u7684\u5730\u5740\u6ca1\u6709 bank conflict\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4ee5 64x64 \u7684\u77e9\u9635\u4e3a\u4f8b\u6765\u8be6\u7ec6\u4ecb\u7ecd\u6570\u636e\u5728 Shared Memory \u4e2d\u7684\u5e03\u5c40\u3002\u9996\u5148\uff0c\u7ebf\u7a0b\u8bfb\u53d6\u6570\u636e\u7684\u7c92\u5ea6\u90fd\u662f 128 \u4f4d\uff0c\u4e5f\u5373 16 \u4e2a INT8 \u7c7b\u578b\u7684\u6570\u636e\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u6f14\u793a\u6570\u636e\u7684\u5e03\u5c40\u65f6\u603b\u662f\u4ee5 16 \u4e2a\u6570\u636e\u4e3a\u4e00\u7ec4\u3002\u5982\u679c\u77e9\u9635\u662f\u4ee5\u884c\u4f18\u5148 (RowMajor) \u7684\u683c\u5f0f\u6765\u7ec4\u7ec7\u7684\uff0c\u90a3\u4e48\u5728\u903b\u8f91\u4e0a\u7684\u5e03\u5c40\u5982\u4e0b\u56fe\u6240\u793a\uff1a"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://pic3.zhimg.com/80/v2-55e42c7cc835e35cd6df4dd2abe794fa_720w.jpg",alt:"img"})),(0,l.kt)("p",null,"\u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u5230"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u6bcf 16 \u4e2a\u5143\u7d20\u5206\u4e3a\u4e00\u7ec4\uff0c\u88ab\u79f0\u4e3a\u4e00\u4e2a Vector\uff0c\u88ab\u67d3\u4e0a\u4e86\u4e0d\u540c\u7684\u989c\u8272\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u6bcf\u884c\u76f8\u90bb\u7684 32 \u4e2a\u5143\u7d20\u88ab\u79f0\u4e3a\u4e00\u4e2a Crosswise\uff0c\u6070\u597d\u662f NCHW32 \u683c\u5f0f\u4e2d\u7684\u4e00\u7ec4 channel \u7684\u6570\u636e\u3002")),(0,l.kt)("p",null,"\u5728 Shared Memory \u7684\u7269\u7406\u5b58\u50a8\u4e2d\uff0c\u77e9\u9635\u7684\u6570\u636e\u8fdb\u884c\u4e86\u91cd\u65b0\u6392\u5217\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://pic1.zhimg.com/80/v2-e5068ce83da288a16d2519c2fc85280c_720w.jpg",alt:"img"})),(0,l.kt)("p",null,"\u6211\u4eec\u53ef\u4ee5\u770b\u5230 Shared Memory \u7684\u7269\u7406\u5e03\u5c40\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u6bcf 4 \u884c\u7684\u4e00\u4e2a Crosswise \u7684\u6570\u636e\u4f5c\u4e3a\u4e00\u7ec4\uff0c\u8fde\u7eed\u5b58\u653e\u5728 Shared Memory \u4e2d\uff0c\u7d27\u63a5\u7740\u4f1a\u5b58\u653e\u8fd9 4 \u884c\u7684\u4e0b\u4e00\u4e2a Crosswise \u7684\u6570\u636e\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u6bcf\u7ec4\u6570\u636e\u5305\u542b\u4e86 8 \u4e2a Vector\uff0c\u5360\u636e\u4e86 128 \u4e2a\u5b57\u8282\uff0c\u6070\u597d\u662f Shared Memory \u4e2d\u7684 32 \u4e2a\u4e0d\u540c\u7684 bank\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u6bcf\u7ec4\u6570\u636e\u5728\u6392\u5217\u662f\u8fdb\u884c\u4e86\u4ea4\u9519\uff0c\u4fdd\u8bc1\u4e86",(0,l.kt)("inlineCode",{parentName:"li"},"ldmatrix"),"\u65f6\u4e0d\u4f1a\u53d1\u751f bank conflict\u3002")),(0,l.kt)("h3",{id:"6\u663e\u5b58---shared-memory-\u7684\u6570\u636e\u642c\u8fd0"},"6\u3001\u663e\u5b58 -> Shared Memory \u7684\u6570\u636e\u642c\u8fd0"),(0,l.kt)("p",null,"\u8fd9\u4e00\u8282\u6211\u4eec\u4f1a\u4ecb\u7ecd\u4ece\u663e\u5b58 (Global Memory) \u5230 Shared Memory \u7684\u6570\u636e\u642c\u8fd0\u3002\u663e\u5b58\u5230 Shared Memory \u7684\u6570\u636e\u642c\u8fd0\u662f\u7531 ",(0,l.kt)("a",{parentName:"p",href:"https://link.zhihu.com/?target=https%3A//github.com/MegEngine/cutlass/blob/61ff64e3ab6ad05b5ce2f205216901e8d030013d/include/cutlass/convolution/threadblock/conv2d_tile_iterator_nt_src_fprop_precomp.h%23L346"},"Conv2dTileSrcIteratorFpropPrecomp")," \u6765\u5b8c\u6210\u7684\uff0c\u672c\u6587\u5e76\u4e0d\u4f1a\u8be6\u7ec6\u5730\u89e3\u8bfb\u4ee3\u7801\u7684\u5b9e\u73b0\uff0c\u800c\u662f\u63cf\u8ff0\u7ebf\u7a0b\u642c\u8fd0\u6570\u636e\u7684\u8fc7\u7a0b\uff0c\u5e2e\u52a9\u5927\u5bb6\u5efa\u7acb\u76f4\u89c2\u7684\u5370\u8c61\uff0c\u66f4\u597d\u5730\u7406\u89e3\u4ee3\u7801\u3002 \u5982\u679c\u4ee5\u4e0a\u4e00\u8282\u4e2d Shared Memory \u7684\u903b\u8f91\u5e03\u5c40\u4e3a\u4f8b\uff0c\u540c\u4e00 Warp \u4e2d\u6bcf\u4e2a\u7ebf\u7a0b\u8bfb\u53d6\u7684\u6570\u636e\u7684\u903b\u8f91\u5e03\u5c40\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u8bfb\u53d6 16 \u4e2a INT8 \u7c7b\u578b\u7684\u6570\u636e\uff0c\u6070\u597d\u6784\u6210\u4e00\u4e2a Vector\u3002"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://pic3.zhimg.com/80/v2-c550fcbebc078dadc60b82d91f6155c2_720w.jpg",alt:"img"})),(0,l.kt)("p",null,"\u800c\u5728\u5b9e\u9645\u7684\u7269\u7406\u663e\u5b58\u4e2d\uff0c\u7ebf\u7a0b\u8bbf\u95ee\u7684\u6570\u636e\u5206\u5e03\u5982\u4e0b\u56fe\u6240\u793a\uff1a"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://pic4.zhimg.com/80/v2-3be99f8b44555cb49c60b2980a4b674b_720w.jpg",alt:"img"})),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6bcf\u4e2a\u7ebf\u7a0b\u8bfb\u53d6\u4e86 128 \u4f4d\u7684\u6570\u636e\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u76f8\u90bb\u7684\u7ebf\u7a0b\u8bfb\u53d6\u7684\u6570\u636e\u5728\u7269\u7406\u4e0a\u662f\u8fde\u7eed\u7684\u3002")),(0,l.kt)("p",null,"\u56e0\u6b64\u7ebf\u7a0b\u4ece Global Memory \u8bfb\u53d6\u6570\u636e\u7684 pattern \u53ef\u4ee5\u6ee1\u8db3\u5408\u5e76\u8bbf\u5b58\u7684\u8981\u6c42\uff0c\u540c\u65f6\u4ee5\u6700\u5927\u7684\u6570\u636e\u4f4d\u5bbd\u8fdb\u884c\u8bbf\u5b58\uff0c\u6700\u5927\u5316\u4e86\u663e\u5b58\u5e26\u5bbd\u7684\u5229\u7528\u7387\u3002 \u7136\u540e\u5982\u679c\u5c06\u7ebf\u7a0b\u8bfb\u53d6\u7684\u6570\u636e\u6620\u5c04\u5230 Shared Memory \u7684\u7269\u7406\u5730\u5740\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u6bcf 8 \u4e2a\u7ebf\u7a0b\u5411 Shared Memory \u5199\u5165 128 \u5b57\u8282\u7684\u6570\u636e\uff0c\u6070\u597d\u843d\u5728 Shared Memory \u7684 32 \u4e2a\u4e0d\u540c\u7684 bank \u4e2d\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u540c\u4e00 Warp \u7684\u8bbf\u5b58\u5206\u4e3a\u56db\u4e2a\u9636\u6bb5\u5b8c\u6210\uff0c\u6bcf\u4e2a\u9636\u6bb5\u90fd\u6ca1\u6709 bank conflict\u3002")),(0,l.kt)("p",null,"\u4e0b\u56fe\u6f14\u793a\u4e86\u4e00\u4e2a Warp \u5199\u5165 Shared Memory \u7684\u8fc7\u7a0b\uff1a"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://pic4.zhimg.com/80/v2-dcfa6ce2c070997f285520a3ce08c627_720w.jpg",alt:"img"})),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://pic3.zhimg.com/80/v2-fc060f229b089461e22f991bc15817fa_720w.jpg",alt:"img"})),(0,l.kt)("h3",{id:"7shared-memory---\u5bc4\u5b58\u5668\u7684\u6570\u636e\u642c\u8fd0"},"7\u3001Shared Memory -> \u5bc4\u5b58\u5668\u7684\u6570\u636e\u642c\u8fd0"),(0,l.kt)("p",null,"Shared Memory \u5230\u5bc4\u5b58\u5668\u7684\u6570\u636e\u642c\u8fd0\u662f\u7531 ",(0,l.kt)("a",{parentName:"p",href:"https://link.zhihu.com/?target=https%3A//github.com/MegEngine/cutlass/blob/61ff64e3ab6ad05b5ce2f205216901e8d030013d/include/cutlass/gemm/warp/mma_tensor_op_tile_iterator.h%23L1342"},"MmaTensorOpMultiplicandTileIterator")," \u5b8c\u6210\u7684\u3002\u540c\u4e00 Warp \u5728\u6bcf\u4e00\u8f6e\u8fed\u4ee3\u8fc7\u7a0b\u4f1a\u8bfb\u53d6 4 \u4e2a 8x16 \u7684\u77e9\u9635\u5230\u5bc4\u5b58\u5668\u4e2d\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u4f1a\u8bfb\u53d6\u4e00\u884c\u7684\u6570\u636e\u3002\u4f8b\u5982\u7b2c\u4e00\u8f6e\u8fed\u4ee3\u65f6\uff0c\u7ebf\u7a0b\u8bfb\u53d6\u7684\u6570\u636e\u5728\u903b\u8f91\u4e0a\u7684\u5e03\u5c40\u5982\u4e0b\u56fe\u6240\u793a\uff1a"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://pic3.zhimg.com/80/v2-fbde94d54faede0c63b6b9703038bae6_720w.jpg",alt:"img"})),(0,l.kt)("p",null,"\u800c\u5b9e\u9645\u4e0a\u6570\u636e\u5728 Shared Memory \u91cc\u7684\u7269\u7406\u5e03\u5c40\u5982\u4e0b\u56fe\uff1a"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://pic1.zhimg.com/80/v2-9b48dd9d905108af474ec0b06d01f7a0_720w.jpg",alt:"img"})),(0,l.kt)("p",null,"\u53ef\u4ee5\u770b\u5230\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u6bcf\u4e2a\u7ebf\u7a0b\u8bfb\u53d6\u4e86 128 \u4f4d\u7684\u6570\u636e\uff0c\u56e0\u6b64\u8bbf\u5b58\u5206\u4e3a\u56db\u4e2a\u9636\u6bb5\u6765\u8fdb\u884c\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u6bcf\u4e00\u9636\u6bb5\u7684 8 \u4e2a\u7ebf\u7a0b\u8bfb\u53d6\u7684\u6570\u636e\u6070\u597d\u843d\u5728\u4e86 Shared Memory \u7684 32 \u4e2a bank \u4e2d\uff0c\u5e76\u4e14\u7ebf\u7a0b\u8bbf\u5b58\u7684\u6570\u636e\u4e4b\u95f4\u4e0d\u5b58\u5728\u51b2\u7a81\u3002")),(0,l.kt)("p",null,"\u5f53\u8fdb\u884c\u5230\u7b2c\u4e8c\u8f6e\u8fed\u4ee3\u65f6\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u8bbf\u95ee\u7684\u6570\u636e\u7684\u7269\u7406\u5e03\u5c40\u5982\u4e0b\u56fe\uff1a"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://pic4.zhimg.com/80/v2-6e0d89631210400c41227a909bc29f3b_720w.jpg",alt:"img"})),(0,l.kt)("p",null,"\u540c\u6837\u7684\u8bbf\u5b58\u7684\u6bcf\u4e00\u4e2a\u9636\u6bb5\u90fd\u4e0d\u5b58\u5728 bank conflict\u3002"),(0,l.kt)("h3",{id:"8accumulator-\u5199\u56de\u5168\u5c40\u5b58\u50a8"},"8\u3001Accumulator \u5199\u56de\u5168\u5c40\u5b58\u50a8"),(0,l.kt)("p",null,"\u5728 int8 \u7684\u60c5\u51b5\u4e0b\uff0c\u540c\u4e00 Warp \u8d1f\u8d23\u8f93\u51fa 64x64 \u7684\u7ed3\u679c\uff0ckernel \u4f1a\u5206\u6210 8 \u6b21\u5199\u56de Global Memory\uff0c\u6bcf\u6b21\u5199\u56de 32x8 \u7684\u77e9\u9635\u3002\u8fd9\u6837\u4fdd\u8bc1\u4e86\u6bcf\u6b21\u5c06 Tensor \u6309\u7167 NCHW32 \u683c\u5f0f\u5199\u56de\u663e\u5b58\u65f6\uff0c\u540c\u4e00 Warp \u7684 32 \u4e2a\u7ebf\u7a0b\u6070\u597d\u5199\u4e86\u7269\u7406\u4e0a\u8fde\u7eed\u7684 256 \u5b57\u8282\u7684\u6570\u636e\uff0c\u800c\u6bcf\u4e2a\u7ebf\u7a0b\u5199\u56de 8 \u4e2a\u5b57\u8282\uff0c\u4fdd\u8bc1\u4e86\u53ef\u4ee5\u4f7f\u752864\u4f4d\u5bbd\u7684\u6570\u636e\u7c7b\u578b\u8fdb\u884c\u663e\u5b58\u7684\u5199\u64cd\u4f5c\uff0c\u5c3d\u53ef\u80fd\u63d0\u9ad8\u5e26\u5bbd\u7684\u5229\u7528\u7387\u3002 \u7531\u4e8e",(0,l.kt)("inlineCode",{parentName:"p"},"mma"),"\u6307\u4ee4\u7684\u7279\u70b9\uff0c\u8f93\u51fa\u77e9\u9635\u7684\u6570\u636e\u5206\u5e03\u5728\u5404\u4e2a\u7ebf\u7a0b\u4e0a\uff0c\u800c\u4e3a\u4e86\u80fd\u591f\u5408\u5e76\u8bbf\u5b58\uff0c\u5373\uff1a\u8ba9\u76f8\u90bb\u7ebf\u7a0b\u5199\u56de\u7684\u5730\u5740\u662f\u8fde\u7eed\u7684\uff0c\u6211\u4eec\u5229\u7528 Shared Memory \u5bf9\u540c\u4e00 Warp \u4e2d 32 \u4e2a\u7ebf\u7a0b\u7684\u6570\u636e\u8fdb\u884c\u4e86\u4ea4\u6362\u3002\u6570\u636e\u4ea4\u6362\u540e\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u62e5\u6709\u8fde\u7eed\u7684 8 \u4e2a\u901a\u9053\u7684\u6570\u636e\uff0c\u4e14\u7ebf\u7a0b\u5199\u7684\u5730\u5740\u662f\u8fde\u7eed\u7684\uff0c\u4fdd\u8bc1\u4e86\u5199\u56de Global Memory \u6ee1\u8db3\u5408\u5e76\u8bbf\u5b58\u7684\u8981\u6c42\u3002 \u7ebf\u7a0b\u4ea4\u6362\u6570\u636e\u7684\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://pic1.zhimg.com/80/v2-ded6dacd217ab74f358c04de3a49ea10_720w.jpg",alt:"img"})),(0,l.kt)("p",null,"\u6bcf\u4e00\u8f6e\u8fed\u4ee3\uff0cWarp \u4e2d\u7684 32 \u4e2a\u7ebf\u7a0b\u5c06 32x16 \u7684\u77e9\u9635\u6570\u636e\u5199\u5165\u5230 Shared Memory \u4e2d\u3002\u63a5\u7740\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u4f1a\u628a\u8fde\u7eed\u7684 8 \u4e2a channel \u7684\u6570\u636e\u8bfb\u5230\u5bc4\u5b58\u5668\u4e2d\u3002"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://pic1.zhimg.com/80/v2-16b278f2cf43ba871eec02f1d440596c_720w.jpg",alt:"img"})),(0,l.kt)("p",null,"Shared Memory \u7684\u6570\u636e\u4ea4\u6362\u662f\u7531\u4ee5\u4e0b\u4e24\u4e2a",(0,l.kt)("inlineCode",{parentName:"p"},"Iterator"),"\u5b8c\u6210\u7684"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://link.zhihu.com/?target=https%3A//github.com/MegEngine/cutlass/blob/61ff64e3ab6ad05b5ce2f205216901e8d030013d/include/cutlass/epilogue/warp/interleaved_tile_iterator_tensor_op.h%23L76"},"InterleavedTileIteratorTensorOp")," \u5b8c\u6210\u4e86\u6bcf\u4e00\u8f6e\u8fed\u4ee3\u5c06 32x8 \u7684\u6570\u636e\u5199\u5165\u5230 Shared Memory \u4e2d\u3002"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://link.zhihu.com/?target=https%3A//github.com/MegEngine/cutlass/blob/61ff64e3ab6ad05b5ce2f205216901e8d030013d/include/cutlass/epilogue/threadblock/interleaved_shared_load_iterator_tensor_op.h%23L73"},"InterleavedSharedLoadIteratorTensorOp")," \u8d1f\u8d23\u5c06\u8fde\u7eed\u7684 8 \u4e2a channel \u7684\u6570\u636e\u8bfb\u5230",(0,l.kt)("inlineCode",{parentName:"li"},"Fragment"),"\u5bc4\u5b58\u5668\u4e2d\u3002")),(0,l.kt)("p",null,"\u5f53\u7ebf\u7a0b\u5c06\u4ea4\u6362\u540e\u7684\u6570\u636e\u8bfb\u5230",(0,l.kt)("inlineCode",{parentName:"p"},"Fragment"),"\u5bc4\u5b58\u5668\u4e4b\u540e\uff0c\u4f1a\u7531",(0,l.kt)("inlineCode",{parentName:"p"},"EpilogueOp"),"\uff0c\u5728\u5377\u79ef\u7684\u57fa\u7840\u4e0a\u5b8c\u6210",(0,l.kt)("inlineCode",{parentName:"p"},"BiasAdd"),"\u7684\u8fd0\u7b97\u3002\u4ee5 ",(0,l.kt)("a",{parentName:"p",href:"https://link.zhihu.com/?target=https%3A//github.com/MegEngine/cutlass/blob/61ff64e3ab6ad05b5ce2f205216901e8d030013d/include/cutlass/epilogue/thread/bias_add_linear_combination_relu.h%23L80"},"BiasAddLinearCombinationRelu")," \u4e3a\u4f8b\uff0c\u5b83\u5b9e\u9645\u4e0a\u5b8c\u6210\u4e86\u4e0b\u9762\u7684\u8fd0\u7b97\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"accumulator = conv(x, w)\ny = alpha * accumulator + beta * bias + gamma * z\n")),(0,l.kt)("p",null,"\u5176\u4e2d bias \u662f\u4e00\u4e2a",(0,l.kt)("inlineCode",{parentName:"p"},"PerChannel"),"\u7684 Tensor\uff0c\u4ee3\u8868\u4e86\u6bcf\u4e2a\u8f93\u51fa\u901a\u9053\u7684\u504f\u7f6e\uff0cz \u662f\u4e00\u4e2a\u548c\u5377\u79ef\u8f93\u51fa\u5927\u5c0f\u4e00\u81f4\u7684 Tensor\uff0c\u7528\u4e8e",(0,l.kt)("inlineCode",{parentName:"p"},"Convolution"),"\u548c",(0,l.kt)("inlineCode",{parentName:"p"},"ElemwiseAdd"),"\u7684\u878d\u5408\u3002 \u6700\u540e",(0,l.kt)("inlineCode",{parentName:"p"},"EpilogueOp"),"\u7684\u8f93\u51fa\u4f1a\u7531 ",(0,l.kt)("a",{parentName:"p",href:"https://link.zhihu.com/?target=https%3A//github.com/MegEngine/cutlass/blob/61ff64e3ab6ad05b5ce2f205216901e8d030013d/include/cutlass/epilogue/threadblock/tensor_predicated_tile_iterator_tensor_op.h%23L83"},"TensorPredicatedTileIteratorTensorOp")," \u771f\u6b63\u5730\u5199\u56de\u5230 Global Memory \u4e2d\u3002\u6bcf\u4e2a\u7ebf\u7a0b\u5199\u56de\u7684\u6570\u636e\u5982\u4e0b\u56fe\u6240\u793a\uff1a"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://pic3.zhimg.com/80/v2-de08cd301f34d8084a5b60742e611c8e_720w.jpg",alt:"img"})),(0,l.kt)("p",null,"\u53ef\u4ee5\u770b\u5230\u7ebf\u7a0b\u5199\u56de\u7684 pattern \u6ee1\u8db3\u5408\u5e76\u8bbf\u5b58\u7684\u8981\u6c42\uff0c\u56e0\u6b64\u80fd\u6700\u5927\u5316 Global Memory \u5199\u7684\u6548\u7387\u3002"),(0,l.kt)("h2",{id:"\u4e09\u603b\u7ed3"},"\u4e09\u3001\u603b\u7ed3"),(0,l.kt)("p",null,"\u672c\u6587\u4ecb\u7ecd\u4e86 MegEngine \u5e95\u5c42\u7684\u5377\u79ef\u7b97\u5b50\u5b9e\u73b0\u539f\u7406\uff0c\u7b97\u5b50\u6027\u80fd\u53ef\u4ee5\u8fbe\u5230 cudnn \u7684 80% \u4ee5\u4e0a\uff0c\u6d4b\u901f\u7ed3\u679c\u53ef\u4ee5\u53c2\u89c1 ",(0,l.kt)("a",{parentName:"p",href:"https://zhuanlan.zhihu.com/p/258931422"},"\u6587\u7ae0"),"\u3002"),(0,l.kt)("p",null,"MegEngine \u4f1a\u5bf9\u5377\u79ef\u5b9e\u73b0\u8fdb\u884c\u6301\u7eed\u4f18\u5316\uff0c\u8fdb\u4e00\u6b65\u63d0\u5347\u7b97\u5b50\u7684\u6027\u80fd\uff0c\u76ee\u524d\u6765\u770b\u6709\u4ee5\u4e0b\u4e24\u70b9\u53ef\u505a\u7684\u4f18\u5316\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u501f\u9274 Nvidia \u5b98\u65b9 CUTLASS ImplicitGEMM Convolution \u5b9e\u73b0\u5bf9 mask \u7684\u5904\u7406\uff0c\u63d0\u9ad8",(0,l.kt)("inlineCode",{parentName:"p"},"TileIterator"),"\u5bf9\u4e8e mask \u5224\u65ad\u7684\u6548\u7387\u3002")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u73b0\u5728\u7684\u5377\u79ef\u5b9e\u73b0\u5728\u5199\u56de\u663e\u5b58\u65f6\u5229\u7528 Shared Memory \u8fdb\u884c\u6570\u636e\u4ea4\u6362\u662f\u5b58\u5728 bank conflict \u7684\u3002\u540e\u7eed\u4f1a\u8003\u8651\u4e24\u70b9\u4f18\u5316")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u5bf9 Shared Memory \u7684\u6570\u636e\u5e03\u5c40\u8fdb\u884c\u63a2\u7d22\uff0c\u6d88\u9664 bank conflict\uff0c\u4f18\u5316 Shared Memory \u6570\u636e\u4ea4\u6362\u7684\u6548\u7387\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u5bf9 Global Memory \u4e2d\u7684 Weight Tensor \u7684\u5e03\u5c40\u8fdb\u884c\u63a2\u7d22\uff0c\u63d0\u9ad8\u6bcf\u4e2a Thread \u4e0a accumulator \u7684\u5c40\u90e8\u6027\uff0c\u907f\u514d\u5728 Shared Memory \u4e2d\u8fdb\u884c\u6570\u636e\u4ea4\u6362\u3002")))),(0,l.kt)("h2",{id:"\u53c2\u8003\u8d44\u6599"},"\u53c2\u8003\u8d44\u6599"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://link.zhihu.com/?target=https%3A//docs.nvidia.com/cuda/parallel-thread-execution/index.html%23warp-level-matrix-fragment-mma-8816"},"Warp-level Matrix Fragment Mma PTX \u6587\u6863")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://link.zhihu.com/?target=https%3A//github.com/MegEngine/cutlass/blob/61ff64e3ab6ad05b5ce2f205216901e8d030013d/media/docs/implicit_gemm_convolution.md"},"CUTLASS Implicit GEMM Convolution \u5b98\u65b9\u6587\u6863")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://link.zhihu.com/?target=https%3A//on-demand.gputechconf.com/gtc/2018/presentation/s81006-volta-architecture-and-performance-optimization.pdf"},"Volta architecture and performance optimization")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://link.zhihu.com/?target=https%3A//developer.download.nvidia.cn/video/gputechconf/gtc/2020/presentations/s21745-developing-cuda-kernels-to-push-tensor-cores-to-the-absolute-limit-on-nvidia-a100.pdf"},"Developing CUDA kernels to push Tensor Cores to the absolute limit on Nvidia A100"))))}u.isMDXComponent=!0}}]);