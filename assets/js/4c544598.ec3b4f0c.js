"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[32043],{3905:(n,e,r)=>{r.d(e,{Zo:()=>d,kt:()=>k});var t=r(67294);function i(n,e,r){return e in n?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n}function o(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,t)}return r}function l(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){i(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function a(n,e){if(null==n)return{};var r,t,i=function(n,e){if(null==n)return{};var r,t,i={},o=Object.keys(n);for(t=0;t<o.length;t++)r=o[t],e.indexOf(r)>=0||(i[r]=n[r]);return i}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(t=0;t<o.length;t++)r=o[t],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(i[r]=n[r])}return i}var s=t.createContext({}),p=function(n){var e=t.useContext(s),r=e;return n&&(r="function"==typeof n?n(e):l(l({},e),n)),r},d=function(n){var e=p(n.components);return t.createElement(s.Provider,{value:e},n.children)},u="mdxType",c={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},f=t.forwardRef((function(n,e){var r=n.components,i=n.mdxType,o=n.originalType,s=n.parentName,d=a(n,["components","mdxType","originalType","parentName"]),u=p(r),f=i,k=u["".concat(s,".").concat(f)]||u[f]||c[f]||o;return r?t.createElement(k,l(l({ref:e},d),{},{components:r})):t.createElement(k,l({ref:e},d))}));function k(n,e){var r=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var o=r.length,l=new Array(o);l[0]=f;var a={};for(var s in e)hasOwnProperty.call(e,s)&&(a[s]=e[s]);a.originalType=n,a[u]="string"==typeof n?n:i,l[1]=a;for(var p=2;p<o;p++)l[p]=r[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},40781:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var t=r(87462),i=(r(67294),r(3905));const o={},l="\u5b57\u5178\u6811",a={unversionedId:"Algorithm/\u6570\u636e\u7ed3\u6784/5-6-\u5b57\u5178\u6811",id:"Algorithm/\u6570\u636e\u7ed3\u6784/5-6-\u5b57\u5178\u6811",title:"\u5b57\u5178\u6811",description:"\u53c2\u8003 1\uff1a\u8be6\u89e3\u524d\u7f00\u6811\u300cTrieTree \u6c47\u603b\u7ea7\u522b\u6574\u7406 \ud83d\udd25\ud83d\udd25\ud83d\udd25\u300d - \u5b57\u7b26\u4e32\u7684\u524d\u7f00\u5206\u6570\u548c - \u529b\u6263\uff08LeetCode\uff09",source:"@site/docs/Algorithm/1-\u6570\u636e\u7ed3\u6784/5-6-\u5b57\u5178\u6811.md",sourceDirName:"Algorithm/1-\u6570\u636e\u7ed3\u6784",slug:"/Algorithm/\u6570\u636e\u7ed3\u6784/5-6-\u5b57\u5178\u6811",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/5-6-\u5b57\u5178\u6811",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"\u7ebf\u6bb5\u6570\u6a21\u7248",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/5-5-\u7ebf\u6bb5\u6570"},next:{title:"5-7-\u54c8\u592b\u66fc\u6811",permalink:"/docs/Algorithm/\u6570\u636e\u7ed3\u6784/5-7-\u54c8\u592b\u66fc\u6811"}},s={},p=[{value:"\u4e00\u3001\u57fa\u7840",id:"\u4e00\u57fa\u7840",level:2},{value:"1\u3001\u5206\u6790",id:"1\u5206\u6790",level:3},{value:"2\u3001\u6570\u636e\u7ed3\u6784",id:"2\u6570\u636e\u7ed3\u6784",level:3},{value:"3\u3001\u5e38\u7528\u64cd\u4f5c",id:"3\u5e38\u7528\u64cd\u4f5c",level:3},{value:"4\u3001\u6784\u5efa\u524d\u7f00\u6811",id:"4\u6784\u5efa\u524d\u7f00\u6811",level:3},{value:"5\u3001\u5bfb\u627e\u76ee\u6807\u5b57\u7b26\u4e32",id:"5\u5bfb\u627e\u76ee\u6807\u5b57\u7b26\u4e32",level:3},{value:"6\u3001\u5bfb\u627e\u6700\u77ed\u524d\u7f00",id:"6\u5bfb\u627e\u6700\u77ed\u524d\u7f00",level:3},{value:"7\u3001\u542b\u6709\u901a\u914d\u7b26\u7684\u5bfb\u627e",id:"7\u542b\u6709\u901a\u914d\u7b26\u7684\u5bfb\u627e",level:3},{value:"8\u3001Trie \u4f18\u5316 DFS \u641c\u7d22",id:"8trie-\u4f18\u5316-dfs-\u641c\u7d22",level:3},{value:"\u4e8c\u3001\u6a21\u677f",id:"\u4e8c\u6a21\u677f",level:2},{value:"1\u3001TrieNode \u5b9e\u73b0",id:"1trienode-\u5b9e\u73b0",level:3},{value:"C++\u6a21\u7248",id:"c\u6a21\u7248",level:4},{value:"python\u6a21\u7248",id:"python\u6a21\u7248",level:4},{value:"2\u3001\u4e8c\u7ef4\u6570\u7ec4\u5b9e\u73b0",id:"2\u4e8c\u7ef4\u6570\u7ec4\u5b9e\u73b0",level:3}],d={toc:p};function u(n){let{components:e,...r}=n;return(0,i.kt)("wrapper",(0,t.Z)({},d,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u5b57\u5178\u6811"},"\u5b57\u5178\u6811"),(0,i.kt)("p",null,"\u53c2\u8003 1\uff1a",(0,i.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/sum-of-prefix-scores-of-strings/solution/by-lfool-w82u/"},"\u8be6\u89e3\u524d\u7f00\u6811\u300cTrieTree \u6c47\u603b\u7ea7\u522b\u6574\u7406 \ud83d\udd25\ud83d\udd25\ud83d\udd25\u300d - \u5b57\u7b26\u4e32\u7684\u524d\u7f00\u5206\u6570\u548c - \u529b\u6263\uff08LeetCode\uff09")),(0,i.kt)("p",null,"\u53c2\u8003 2\uff1a",(0,i.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/implement-trie-prefix-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-er-we-esm9/"},"https://leetcode-cn.com/problems/implement-trie-prefix-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-er-we-esm9/")),(0,i.kt)("p",null,"\u76ee\u6807\uff1a\u50cf\u4f7f\u7528 stl \u4e00\u6837\u719f\u6089"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u8003\u70b9"),"\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u5982\u4f55\u904d\u5386\u5b57\u5178\u6811\uff0c\u53ef\u4ee5\u7528\u5faa\u73af\uff0c\u4e5f\u53ef\u4ee5\u7528 dfs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u5b57\u5178\u6811\u7684\u8282\u70b9\u5e94\u8be5\u5b58\u4ec0\u4e48\u503c"))),(0,i.kt)("h2",{id:"\u4e00\u57fa\u7840"},"\u4e00\u3001\u57fa\u7840"),(0,i.kt)("p",null,"Trie \u6811\uff08\u53c8\u53eb\u524d\u7f00\u6811\u6216\u5b57\u5178\u6811\uff09\u662f\u4e00\u79cd\u7528\u4e8e",(0,i.kt)("strong",{parentName:"p"},"\u5feb\u901f\u67e5\u8be2\u300c\u67d0\u4e2a\u5b57\u7b26\u4e32/\u5b57\u7b26\u524d\u7f00\u300d\u662f\u5426\u5b58\u5728"),"\u7684\u6570\u636e\u7ed3\u6784\u3002"),(0,i.kt)("p",null,"\u5176\u6838\u5fc3\u662f\u4f7f\u7528\u300c\u8fb9\u300d\u6765\u4ee3\u8868\u6709\u65e0\u5b57\u7b26\uff0c\u4f7f\u7528\u300c\u70b9\u300d\u6765\u8bb0\u5f55\u662f\u5426\u4e3a\u300c\u5355\u8bcd\u7ed3\u5c3e\u300d\u4ee5\u53ca\u300c\u5176\u540e\u7eed\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u6709\u54ea\u4e9b\u300d\u3002"),(0,i.kt)("p",null,"\u9996\u5148\uff0c\u5728\u7eaf\u7b97\u6cd5\u9886\u57df\uff0c\u524d\u7f00\u6811\u7b97\u662f\u4e00\u79cd\u8f83\u4e3a\u5e38\u7528\u7684\u6570\u636e\u7ed3\u6784\u3002"),(0,i.kt)("p",null,"\u4e0d\u8fc7\u5982\u679c\u5728\u5de5\u7a0b\u4e2d\uff0c",(0,i.kt)("strong",{parentName:"p"},"\u4e0d\u8003\u8651\u524d\u7f00\u5339\u914d\u7684\u8bdd\uff0c\u57fa\u672c\u4e0a\u4f7f\u7528 hash \u5c31\u80fd\u6ee1\u8db3")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u5982\u679c\u8003\u8651\u524d\u7f00\u5339\u914d\u7684\u8bdd\uff0c\u5de5\u7a0b\u4e5f\u4e0d\u4f1a\u4f7f\u7528 Trie ")),(0,i.kt)("p",null,"\u4e00\u65b9\u9762\u662f\u5b57\u7b26\u96c6\u5927\u5c0f\u4e0d\u597d\u786e\u5b9a\uff08\u9898\u76ee\u53ea\u8003\u8651 26 \u4e2a\u5b57\u6bcd\uff0c\u5b57\u7b26\u96c6\u5927\u5c0f\u9650\u5236\u5728\u8f83\u5c0f\u7684 26 \u5185\uff09\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528 Trie\uff0c\u4f46\u662f\u5de5\u7a0b\u4e00\u822c\u517c\u5bb9\u5404\u79cd\u5b57\u7b26\u96c6\uff0c",(0,i.kt)("strong",{parentName:"p"},"\u4e00\u65e6\u5b57\u7b26\u96c6\u5927\u5c0f\u5f88\u5927\u7684\u8bdd\uff0cTrie \u5c06\u4f1a\u5e26\u6765\u5f88\u5927\u7684\u7a7a\u95f4\u6d6a\u8d39")),(0,i.kt)("p",null,"\u53e6\u5916\uff0c",(0,i.kt)("strong",{parentName:"p"},"\u5bf9\u4e8e\u4e2a\u522b\u7684\u8d85\u957f\u5b57\u7b26 Trie \u4f1a\u8fdb\u4e00\u6b65\u53d8\u6df1"),"\u3002"),(0,i.kt)("p",null,"\u8fd9\u65f6\u5019\u5982\u679c Trie \u662f\u5b58\u50a8\u5728\u786c\u76d8\u4e2d\uff0cTrie \u7ed3\u6784\u8fc7\u6df1\u5e26\u6765\u7684\u5f71\u54cd\u662f\u591a\u6b21\u968f\u673a IO\uff0c\u968f\u673a IO \u662f\u6210\u672c\u5f88\u9ad8\u7684\u64cd\u4f5c\u3002"),(0,i.kt)("p",null,"\u540c\u65f6 Trie \u7684\u7279\u6b8a\u7ed3\u6784\uff0c\u4e5f\u4f1a\u4e3a\u5206\u5e03\u5f0f\u5b58\u50a8\u5c06\u4f1a\u5e26\u6765\u56f0\u96be\u3002"),(0,i.kt)("p",null,"\u56e0\u6b64\u5728\u5de5\u7a0b\u9886\u57df\u4e2d Trie \u7684\u5e94\u7528\u9762\u4e0d\u5e7f\u3002\u81f3\u4e8e\u4e00\u4e9b\u8bf8\u5982\u300c\u8054\u60f3\u8f93\u5165\u300d\u3001\u300c\u6a21\u7cca\u5339\u914d\u300d\u3001\u300c\u5168\u6587\u68c0\u7d22\u300d\u7684\u5178\u578b\u573a\u666f\u5728\u5de5\u7a0b\u4e3b\u8981\u662f\u901a\u8fc7 ES (ElasticSearch) \u89e3\u51b3\u7684\u3002\u800c ES \u7684\u5b9e\u73b0\u5219\u4e3b\u8981\u662f\u4f9d\u9760\u300c\u5012\u6392\u7d22\u5f15\u300d\u3002"),(0,i.kt)("h3",{id:"1\u5206\u6790"},"1\u3001\u5206\u6790"),(0,i.kt)("p",null,"\u4e00\u822c\u800c\u8a00\uff0c\u5b57\u7b26\u4e32\u7684\u96c6\u5408\u90fd\u662f\u4ec5\u7531\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\uff0c\u6240\u4ee5\u672c\u6587\u7ae0\u90fd\u662f\u57fa\u4e8e\u8be5\u60c5\u51b5\u5c55\u5f00\u5206\u6790\uff01"),(0,i.kt)("p",null,"\u5b57\u7b26\u4e32\u96c6\u5408\uff1a","[them, zip, team, the, app, that]","\u3002\u8fd9\u4e2a\u6837\u4f8b\u7684\u524d\u7f00\u6811\u957f\u4ec0\u4e48\u6837\u5462\uff1f"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://pic.leetcode-cn.com/1657540498-HHnzlV-1.svg",alt:"1.svg"})),(0,i.kt)("p",null,"\u7531\u4e8e\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u5747\u6709 26 \u4e2a\u5b69\u5b50\u8282\u70b9\uff0c\u4e0a\u56fe\u4e2d\u6ca1\u6709\u753b\u51fa\u6765\uff0c\u7701\u7565\u4e86\u800c\u5df2...\uff0c\u4f46\u662f\u8981\u8bb0\u4f4f\uff1a",(0,i.kt)("strong",{parentName:"p"},"\u6bcf\u4e2a\u8282\u70b9\u5747\u6709 26 \u4e2a\u5b69\u5b50\u8282\u70b9")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u8fd8\u6709\u4e00\u4e2a\u70b9\u8981\u660e\u786e\uff1a\u8282\u70b9\u4ec5\u4ec5\u8868\u793a\u4ece\u6839\u8282\u70b9\u5230\u672c\u8282\u70b9\u7684\u8def\u5f84\u6784\u6210\u7684\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u800c\u5df2")),(0,i.kt)("p",null,"\u5bf9\u4e8e\u4e0a\u56fe\u4e2d\u6a59\u8272\u7684\u8282\u70b9\uff0c\u5747\u4e3a\u6709\u6548\u8282\u70b9\uff0c\u5373\uff1a\u4ece\u6839\u8282\u70b9\u5230\u6a59\u8272\u8282\u70b9\u7684\u8def\u5f84\u6784\u6210\u7684\u5b57\u7b26\u4e32\u5747\u5728\u96c6\u5408\u4e2d"),(0,i.kt)("p",null,"\u5982\u679c\u73b0\u5728\u8981\u627e\u524d\u7f00 ",(0,i.kt)("inlineCode",{parentName:"p"},"te")," \u662f\u5426\u5b58\u5728\uff0c\u5206\u4e24\u6b65\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u9996\u5148\u770b\u770b\u8868\u793a ",(0,i.kt)("inlineCode",{parentName:"li"},"te")," \u5b57\u7b26\u4e32\u7684\u8def\u5f84\u662f\u5426\u5b58\u5728\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u662f\u5b58\u5728\u7684"),(0,i.kt)("li",{parentName:"ul"},"\u5176\u6b21\u770b\u770b\u8be5\u8def\u5f84\u7684\u7ec8\u70b9\u5904\u7684\u8282\u70b9\u662f\u5426\u6709\u6548\uff0c\u5f88\u9057\u61be\uff0c\u6b64\u5904\u4e3a\u767d\u8272\uff0c\u65e0\u6548"),(0,i.kt)("li",{parentName:"ul"},"\u6240\u4ee5\u524d\u7f00 ",(0,i.kt)("inlineCode",{parentName:"li"},"te")," \u4e0d\u5b58\u5728\uff01\uff01")),(0,i.kt)("h3",{id:"2\u6570\u636e\u7ed3\u6784"},"2\u3001\u6570\u636e\u7ed3\u6784"),(0,i.kt)("p",null,"\u73b0\u5728\u770b\u770b\u5982\u4f55\u8868\u793a\u8fd9\u68f5\u300c\u524d\u7f00\u6811\u300d\uff0c\u5373\u6570\u636e\u7ed3\u6784\u8be5\u5982\u4f55\u5b9a\u4e49\u3002\u5176\u5b9e\u5c31\u662f\u4e00\u68f5\u591a\u53c9\u6811\uff0c\u6709 26 \u4e2a\u5b69\u5b50\u8282\u70b9\u7684\u591a\u53c9\u6811\u800c\u5df2\uff01\uff01"),(0,i.kt)("p",null,"\u73b0\u5728\u6765\u601d\u8003\u8282\u70b9\u7684\u503c\u53c8\u8be5\u5982\u4f55\u8868\u793a\u5462\uff1f"),(0,i.kt)("p",null,"\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u8282\u70b9\u4ec5\u4ec5\u8868\u793a\u8def\u5f84\u6784\u6210\u7684\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u800c\u5df2\uff0c\u6240\u4ee5\u8282\u70b9\u53ef\u4ee5\u7528 ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean")," \u7c7b\u578b\u6765\u8868\u793a"),(0,i.kt)("p",null,"\u8fd8\u6709\u4e00\u7c7b\u60c5\u51b5\u5c31\u662f\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u6709\u4e00\u4e2a\u6743\u503c\uff0c\u6240\u4ee5\u8282\u70b9\u7684\u503c\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u503c\u6765\u8868\u793a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'class Trie {\npublic:\n    Trie* son[26];  // \u5b58\u653e\u5f53\u524d\u5b57\u7b26\u4e4b\u540e\u7684\u5b57\u7b26\uff0c\u4e0b\u6807 idx \u4ee3\u8868\u8fb9\uff0c\u4e5f\u5c31\u662f\u5b57\u7b26\n    bool isWord;    // \u8be5\u8282\u70b9\u6807\u8bb0\u8def\u5f84\u6784\u6210\u7684\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\n    string str;     // \u5982\u679c\u6709\u6548\u8bb0\u5f55\u8be5\u5355\u8bcd\n  \n    Trie() {\n        for (int i = 0; i < 26; i++) son[i] = nullptr;\n        isWord = false;\n        str = "";\n    }\n    ~Trie() {\n        for (int i = 0; i < 26; i++) {\n            if (son[i] != nullptr) delete son[i];\n        }\n    }\n}\n// \u524d\u7f00\u6811\u7684\u6839\u8282\u70b9\nTrieNode* root = new Trie();\n')),(0,i.kt)("h3",{id:"3\u5e38\u7528\u64cd\u4f5c"},"3\u3001\u5e38\u7528\u64cd\u4f5c"),(0,i.kt)("p",null,"\u6839\u636e\u4e0a\u9762\u7684\u5206\u6790\uff0c\u5176\u5b9e\u300c\u524d\u7f00\u6811\u300d\u5e38\u7528\u64cd\u4f5c\u5c31\u4e09\u79cd"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u6839\u636e\u6240\u7ed9\u5b57\u7b26\u4e32\u96c6\u5408\u6784\u5efa\u524d\u7f00\u6811"),(0,i.kt)("li",{parentName:"ul"},"\u5224\u65ad\u524d\u7f00\u6811\u4e2d\u662f\u5426\u5b58\u5728\u76ee\u6807\u5b57\u7b26\u4e32"),(0,i.kt)("li",{parentName:"ul"},"\u5728\u524d\u7f00\u6811\u4e2d\u627e\u51fa\u76ee\u6807\u5b57\u7b26\u4e32\u7684\u6700\u77ed\u524d\u7f00")),(0,i.kt)("p",null,"\u968f\u7740\u6570\u636e\u7684\u4e0d\u65ad\u63d2\u5165\uff0c\u6839\u636e\u9700\u8981\u4e0d\u65ad\u521b\u5efa TrieNode \u8282\u70b9\u3002"),(0,i.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aTrie \u6811\u7684\u6bcf\u6b21\u8c03\u7528\u65f6\u95f4\u590d\u6742\u5ea6\u53d6\u51b3\u4e8e\u5165\u53c2\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002\u590d\u6742\u5ea6\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"O(len(word))"),"\u3002"),(0,i.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u7ed3\u70b9\u6570\u91cf\u4e3a n\uff0c\u5b57\u7b26\u96c6\u5927\u5c0f\u4e3a k\u3002\u590d\u6742\u5ea6\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"O(nk)"),"\u3002"),(0,i.kt)("h3",{id:"4\u6784\u5efa\u524d\u7f00\u6811"},"4\u3001\u6784\u5efa\u524d\u7f00\u6811"),(0,i.kt)("p",null,"\u6700\u521d\uff0c\u6211\u4eec\u53ea\u6709\u4e00\u4e2a\u6839\u8282\u70b9 ",(0,i.kt)("inlineCode",{parentName:"p"},"root"),"\uff0c\u5b69\u5b50\u8282\u70b9\u4e5f\u90fd\u8fd8\u6ca1\u521d\u59cb\u5316\uff01"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"    void insert(string &word) {\n        Trie* root = this;     // \u4ece\u5934\u8282\u70b9\u5f00\u59cb\u67e5\n        for (char c : word) {  // \u7c7b\u4f3c\u94fe\u8868\u7684\u904d\u5386\n            int cur = c - 'a';\n            if (root->son[cur] == nullptr) root->son[cur] = new Trie();\n            root = root->son[cur];\n        }\n        root->isWord = true;  // \u5728\u5355\u8bcd\u7684\u7ed3\u5c3e\u8282\u70b9\u6807\u8bb0\u4e00\u4e0b \u662f\u5355\u8bcd\n        root->str = word;     // \u7ed3\u5c3e\u76f4\u63a5\u8bb0\u5f55\u5355\u8bcd\n    }\n")),(0,i.kt)("p",null,"\u4e3a\u4e86\u6269\u5c55\u601d\u7ef4\uff0c\u8fd9\u91cc\u518d\u7ed9\u51fa\u9012\u5f52\u7684\u5b9e\u73b0\u65b9\u6cd5\uff1a(\u548c\u6811\u7684\u904d\u5386\u5f88\u50cf)\uff0c\u6548\u7387\u76f8\u8f83\u4e0a\u9762\u6162"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"    void insert(string &word) {\n        Trie* root = this;     // \u4ece\u5934\u8282\u70b9\u5f00\u59cb\u67e5\n        root = dfs(root, word, 0);\n    }\n    \n    Trie* dfs(Trie* node, string &word, int index) {\n        // \u521d\u59cb\u5316\n        if (node == nullptr) node = new Trie();\n        // \u5230\u4e86\u7ec8\u70b9\n        if (index == word.size()) {\n            node->isWord = true;\n            node->str = word;\n            return node;\n        }\n        int i = word[index] - 'a';\n        node->son[i] = dfs(node->son[i], word, index + 1);\n        return node;\n    }\n")),(0,i.kt)("h3",{id:"5\u5bfb\u627e\u76ee\u6807\u5b57\u7b26\u4e32"},"5\u3001\u5bfb\u627e\u76ee\u6807\u5b57\u7b26\u4e32"),(0,i.kt)("p",null,"\u5f53\u300c\u524d\u7f00\u6811\u300d\u6784\u5efa\u597d\u4e86\u540e\uff0c\u5bfb\u627e\u76ee\u6807\u5b57\u7b26\u4e32\u4e5f\u5c31\u5927\u540c\u5c0f\u5f02\u4e86"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u9996\u5148\u770b\u770b\u8868\u793a\u5b57\u7b26\u4e32\u7684\u8def\u5f84\u662f\u5426\u5b58\u5728"),(0,i.kt)("li",{parentName:"ul"},"\u5176\u6b21\u770b\u770b\u8be5\u8def\u5f84\u7684\u7ec8\u70b9\u5904\u7684\u8282\u70b9\u662f\u5426\u6709\u6548")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"    bool search(string &word) {\n        Trie* root = this;  // \u4ece\u5934\u8282\u70b9\u5f00\u59cb\u67e5\n        for (char c : word) {\n            int cur = c - 'a';\n            if (root->son[cur] == nullptr) return false;  // word\u8fd8\u6ca1\u904d\u5386\u5b8c\uff0c\u5c31\u627e\u4e0d\u5230\u4e86\n            root = root->son[cur];\n        }\n        return root->isWord;  // \u904d\u5386\u5230word\u7ed3\u5c3e\u7684\u8282\u70b9\uff0c\u662f\u5426\u662f\u4e4b\u524d\u5b58\u5728\u7684\u5355\u8bcd\n    }\n")),(0,i.kt)("p",null,"\u540c\u6837\u7684\uff0c\u4e3a\u4e86\u6269\u5c55\u601d\u7ef4\uff0c\u8fd9\u91cc\u518d\u7ed9\u51fa\u9012\u5f52\u7684\u5b9e\u73b0\u65b9\u6cd5\uff1a(\u548c\u6811\u7684\u904d\u5386\u5f88\u50cf)"),(0,i.kt)("p",null,"\u672c\u8d28\u4e0a\u662f\uff0c\u6cbf\u7740 word \u7684\u8def\u5f84\uff0c\u5f80\u4e0b\u641c"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"    bool search(string &word) {\n        Trie* root = this;  // \u4ece\u5934\u8282\u70b9\u5f00\u59cb\u67e5\n        return dfs(root, word, 0);\n    }\n\n    bool dfs(Trie* node, string &word, int index) {\n        // \u8def\u5f84\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\n        if (node == nullptr) return false;\n        // \u8def\u5f84\u5b58\u5728\uff0c\u76f4\u63a5\u8fd4\u56de\u8be5\u8def\u5f84\u7684\u7ec8\u70b9\u5904\u7684\u8282\u70b9\u7684\u6709\u6548\u6027\n        if (index == word.size()) return node->isWord;\n        // \u672c\u8d28\u4e0a\u662f\uff0c\u6cbf\u7740 word \u7684\u8def\u5f84\uff0c\u5f80\u4e0b\u641c\n        int i = word[index] - 'a';\n        return dfs(node->son[i], word, index + 1);\n    }\n")),(0,i.kt)("h3",{id:"6\u5bfb\u627e\u6700\u77ed\u524d\u7f00"},"6\u3001\u5bfb\u627e\u6700\u77ed\u524d\u7f00"),(0,i.kt)("p",null,"\u548c\u300c\u5bfb\u627e\u76ee\u6807\u5b57\u7b26\u4e32\u300d\u5dee\u4e0d\u591a\uff0c\u4f46\u53c8\u6709\u4e9b\u8bb8\u4e0d\u540c"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u300c\u5bfb\u627e\u76ee\u6807\u5b57\u7b26\u4e32\u300d\u5fc5\u987b\u904d\u5386\u5230\u76ee\u6807\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\uff0c\u7136\u540e\u518d\u5224\u65ad\u8def\u5f84\u662f\u5426\u6709\u6548"),(0,i.kt)("li",{parentName:"ul"},"\u300c\u5bfb\u627e\u6700\u77ed\u524d\u7f00\u300d\u53ea\u8981\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u6709\u4e2d\uff0c\u9996\u6b21\u51fa\u73b0\u4e86\u6709\u6548\u8def\u5f84\uff0c\u5373\u4e3a\u627e\u5230\uff01\uff01")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'    string query(string& word) {\n        Trie* root = this;     // \u4ece\u5934\u8282\u70b9\u5f00\u59cb\u67e5\n        for (char c : word) {  // \u7c7b\u4f3c\u94fe\u8868\u7684\u904d\u5386\n            int cur = c - \'a\';\n            if (root->son[cur] == nullptr) return "";  // \u6ca1\u627e\u5230\n            if (root->son[cur]->isWord == true) {\n                return root->son[cur]->str;\n            }\n            root = root->son[cur];\n        }\n        return "";  // \u6ca1\u627e\u5230\n    }\n')),(0,i.kt)("h3",{id:"7\u542b\u6709\u901a\u914d\u7b26\u7684\u5bfb\u627e"},"7\u3001\u542b\u6709\u901a\u914d\u7b26\u7684\u5bfb\u627e"),(0,i.kt)("p",null,"\u987e\u540d\u601d\u4e49\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"."),"\u53ef\u4ee5\u8868\u793a\u4efb\u4f55\u5b57\u7b26\u3002\u6bd4\u5982\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},"a.c")," \u662f\u53ef\u4ee5\u548c ",(0,i.kt)("inlineCode",{parentName:"p"},"[abc, aec]")," \u5339\u914d\u7684"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"    bool search(string &word) {\n        return dfs(this, 0, word);\n    }\n\n    bool dfs(WordDictionary *node, int depth, string &word) {\n        if (depth == word.length()) {\n            return node->isWord;\n        }\n        char c = word[depth];\n        if (c != '.') {\n            int cur = c - 'a';\n            if (node->son[cur] == nullptr) return false;\n            return dfs(node->son[cur], depth + 1, word);\n        } else {\n            for (auto ptr : node->son) {\n                if (ptr != nullptr && dfs(ptr, depth + 1, word)) {\n                    return true;  // \u53ea\u8981\u627e\u5230\u4e00\u4e2a\u5c31\u76f4\u63a5\u8fd4\u56detrue\n                }\n            }\n        }\n        return false;  // \u53ef\u80fd\u7684son\u90fd\u6ca1\u8fd4\u56detrue\uff0c\u8fd9\u91cc\u8fd4\u56defalse\n    }\n")),(0,i.kt)("h3",{id:"8trie-\u4f18\u5316-dfs-\u641c\u7d22"},"8\u3001Trie \u4f18\u5316 DFS \u641c\u7d22"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"if (node->son[nidx] != nullptr)")," \u53ef\u505a\u5230\u63d0\u524d\u526a\u679d\uff0c\u5927\u5e45\u5ea6\u4f18\u5316"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"void dfs(int row, int col, Trie* node) {\n    if (node->str != \"\") {\n        ans_set.insert(node->str);\n    }\n    for (pair<int, int> dir : direction) {\n        int nr = row + dir.first;\n        int nc = col + dir.second;\n        if (0 <= nr && nr < rows && 0 <= nc && nc < cols) {\n            if (!visited[nr][nc]) {\n                int nidx = board[nr][nc] - 'a';\n                if (node->son[nidx] != nullptr) {\n                    visited[nr][nc] = true;\n                    dfs(nr, nc, node->son[nidx]);\n                    visited[nr][nc] = false;\n                }\n            }\n        }\n    }\n}\n")),(0,i.kt)("h2",{id:"\u4e8c\u6a21\u677f"},"\u4e8c\u3001\u6a21\u677f"),(0,i.kt)("h3",{id:"1trienode-\u5b9e\u73b0"},"1\u3001TrieNode \u5b9e\u73b0"),(0,i.kt)("h4",{id:"c\u6a21\u7248"},"C++\u6a21\u7248"),(0,i.kt)("p",null,"insert \u662f\u5fc5\u987b\u7684\uff0c\u5176\u4ed6\u51fd\u6570\u9700\u8981\u54ea\u4e2a\u590d\u5236\u54ea\u4e2a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"class Trie {\npublic:\n    Trie* son[26];  // \u5b58\u653e\u5f53\u524d\u5b57\u7b26\u4e4b\u540e\u7684\u5b57\u7b26\n    bool isWord;\n    string str;\n  \n    Trie() {\n        for (int i = 0; i < 26; i++) son[i] = nullptr;\n        isWord = false;\n        str = \"\";\n    }\n    ~Trie() {\n        for (int i = 0; i < 26; i++) {\n            if (son[i] != nullptr) delete son[i];\n        }\n    }\n\n    void insert(string &word) {\n        Trie* root = this;     // \u4ece\u5934\u8282\u70b9\u5f00\u59cb\u67e5\n        for (char c : word) {  // \u7c7b\u4f3c\u94fe\u8868\u7684\u904d\u5386\n            int cur = c - 'a';\n            if (root->son[cur] == nullptr) root->son[cur] = new Trie();\n            root = root->son[cur];\n        }\n        root->isWord = true;  // \u5728\u5355\u8bcd\u7684\u7ed3\u5c3e\u8282\u70b9\u6807\u8bb0\u4e00\u4e0b \u662f\u5355\u8bcd\n        root->str = word;     // \u7ed3\u5c3e\u76f4\u63a5\u8bb0\u5f55\u5355\u8bcd\n    }\n\n    bool search(string &word) {\n        Trie* root = this;  // \u4ece\u5934\u8282\u70b9\u5f00\u59cb\u67e5\n        for (char c : word) {\n            int cur = c - 'a';\n            if (root->son[cur] == nullptr) return false;  // word\u8fd8\u6ca1\u904d\u5386\u5b8c\uff0c\u5c31\u627e\u4e0d\u5230\u4e86\n            root = root->son[cur];\n        }\n        return root->isWord;  // \u904d\u5386\u5230word\u7ed3\u5c3e\u7684\u8282\u70b9\uff0c\u662f\u5426\u662f\u4e4b\u524d\u5b58\u5728\u7684\u5355\u8bcd\n    }\n\n    bool startsWith(string &prefix) {\n        Trie* root = this;\n        for (char c : prefix) {\n            int cur = c - 'a';\n            if (root->son[cur] == nullptr) return false;  // prefix\u8fd8\u6ca1\u904d\u5386\u5b8c\uff0c\u5c31\u627e\u4e0d\u5230\u4e86\n            root = root->son[cur];\n        }\n        return true;  // prefix\u6b63\u5e38\u904d\u5386\u5b8c\uff0c\u5c31\u8fd4\u56detrue\n    }\n};\n")),(0,i.kt)("h4",{id:"python\u6a21\u7248"},"python\u6a21\u7248"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class TrieNode(object):\n    def __init__(self):\n        self.children = {}\n        self.is_word = False\n \nclass Trie(object):\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word):\n        """\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: None\n        """\n        node = self.root    # \u4ece\u5934\u8282\u70b9\u5f00\u59cb\u67e5\n        for c in word:\n            if c not in node.children:\n                node.children[c] = TrieNode()\n            node = node.children[c]\n        node.is_word = True # \u5728\u5355\u8bcd\u7684\u7ed3\u5c3e\u8282\u70b9\u6807\u8bb0\u4e00\u4e0b\n\n    def search_prefix(self, word):\n        node = self.root    # \u4ece\u5934\u8282\u70b9\u5f00\u59cb\u67e5\n        for c in word:\n            if c not in node.children:\n                return None # word\u4e2d\u7684\u5b57\u7b26\u6ca1\u627e\u5b8c\u5c31\u65ad\u4e86\n            node = node.children[c]\n        # \u8fd4\u56deword\u7ed3\u5c3e\u7684\u8282\u70b9\uff0c\n        # \u53ef\u80fd\u662f\u4e4b\u524d\u63d2\u5165\u5355\u8bcd\u7684\u7ed3\u5c3e\u8282\u70b9\uff0cnode.is_word \u4e3a True\n        # \u4e0d\u662f\u4e4b\u524d\u63d2\u5165\u5355\u8bcd\u7684\u7ed3\u5c3e\u8282\u70b9\uff0cnode.is_word \u4e3a False\n        return node         \n\n    def search(self, word):\n        """\n        Returns if the word is in the trie.\n        :type word: str\n        :rtype: bool\n        """\n        node = self.search_prefix(word)\n        return node != None and node.is_word\n\n    def startsWith(self, prefix):\n        """\n        Returns if there is any word in the trie that starts with the given prefix.\n        :type prefix: str\n        :rtype: bool\n        """\n        return self.search_prefix(prefix) != None\n\n')),(0,i.kt)("h3",{id:"2\u4e8c\u7ef4\u6570\u7ec4\u5b9e\u73b0"},(0,i.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/implement-trie-prefix-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-er-we-esm9/"},"2\u3001\u4e8c\u7ef4\u6570\u7ec4\u5b9e\u73b0")),(0,i.kt)("p",null,"\u4e00\u4e2a\u6734\u7d20\u7684\u60f3\u6cd5\u662f\u76f4\u63a5\u4f7f\u7528\u300c\u4e8c\u7ef4\u6570\u7ec4\u300d\u6765\u5b9e\u73b0 Trie \u6811\u3002"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u4f7f\u7528\u4e8c\u7ef4\u6570\u7ec4 trie[] \u6765\u5b58\u50a8\u6211\u4eec\u6240\u6709\u7684\u5355\u8bcd\u5b57\u7b26\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u4f7f\u7528 index \u6765\u81ea\u589e\u8bb0\u5f55\u6211\u4eec\u5230\u5e95\u7528\u4e86\u591a\u5c11\u4e2a\u683c\u5b50\uff08\u76f8\u5f53\u4e8e\u7ed9\u88ab\u7528\u5230\u683c\u5b50\u8fdb\u884c\u7f16\u53f7\uff09\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u4f7f\u7528 count[] \u6570\u7ec4\u8bb0\u5f55\u67d0\u4e2a\u683c\u5b50\u88ab\u300c\u88ab\u6807\u8bb0\u4e3a\u7ed3\u5c3e\u7684\u6b21\u6570\u300d\uff08\u5f53 idx \u7f16\u53f7\u7684\u683c\u5b50\u88ab\u6807\u8bb0\u4e86 n \u6b21\uff0c\u5219\u6709 cnt","[idx]","=n\uff09\u3002")),(0,i.kt)("p",null,"\u4f7f\u7528\u300c\u4e8c\u7ef4\u6570\u7ec4\u300d\u7684\u597d\u5904\u662f\u5199\u8d77\u6765\u98de\u5feb\uff0c\u540c\u65f6\u6ca1\u6709\u9891\u7e41 new \u5bf9\u8c61\u7684\u5f00\u9500\u3002\u4f46\u662f\u9700\u8981\u6839\u636e\u6570\u636e\u7ed3\u6784\u8303\u56f4\u4f30\u7b97\u6211\u4eec\u7684\u300c\u4e8c\u7ef4\u6570\u7ec4\u300d\u5e94\u8be5\u5f00\u591a\u5c11\u884c\u3002"),(0,i.kt)("p",null,"\u574f\u5904\u662f\u4f7f\u7528\u7684\u7a7a\u95f4\u901a\u5e38\u662f\u300cTrieNode\u300d\u65b9\u5f0f\u7684\u6570\u500d\uff0c\u800c\u4e14\u7531\u4e8e\u901a\u5e38\u5bf9\u884c\u7684\u4f30\u7b97\u4f1a\u5f88\u5927\uff0c\u5bfc\u81f4\u4f7f\u7528\u7684\u4e8c\u7ef4\u6570\u7ec4\u5f00\u5f97\u5f88\u5927\uff0c\u5982\u679c\u8fd9\u65f6\u5019\u6bcf\u6b21\u521b\u5efa Trie \u5bf9\u8c61\u65f6\u90fd\u53bb\u521b\u5efa\u6570\u7ec4\u7684\u8bdd\uff0c\u4f1a\u6bd4\u8f83\u6162\uff0c\u800c\u4e14\u5f53\u6837\u4f8b\u591a\u7684\u65f6\u5019\u751a\u81f3\u4f1a\u89e6\u53d1 GC\uff08\u56e0\u4e3a OJ \u6bcf\u6d4b\u8bd5\u4e00\u4e2a\u6837\u4f8b\u4f1a\u521b\u5efa\u4e00\u4e2a Trie \u5bf9\u8c61\uff09\u3002"),(0,i.kt)("p",null,"\u56e0\u6b64\u8fd8\u6709\u4e00\u4e2a\u5c0f\u6280\u5de7\u662f\u5c06\u4f7f\u7528\u5230\u7684\u6570\u7ec4\u8f6c\u4e3a\u9759\u6001\uff0c\u7136\u540e\u5229\u7528 index \u81ea\u589e\u7684\u7279\u6027\u5728\u521d\u59cb\u5316 Trie \u65f6\u6267\u884c\u6e05\u7406\u5de5\u4f5c & \u91cd\u7f6e\u903b\u8f91\u3002"),(0,i.kt)("p",null,"\u8fd9\u6837\u7684\u505a\u6cd5\u80fd\u591f\u4f7f\u8bc4\u6d4b\u65f6\u95f4\u964d\u4f4e\u4e00\u534a\uff0c\u8fd0\u6c14\u597d\u7684\u8bdd\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u4e0e\u300cTrieNode\u300d\u65b9\u5f0f\u5dee\u4e0d\u591a\u7684\u65f6\u95f4\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Trie {\n    // \u4ee5\u4e0b static \u6210\u5458\u72ec\u4e00\u4efd\uff0c\u88ab\u521b\u5efa\u7684\u591a\u4e2a Trie \u5171\u7528\n    static int N = 100009; // \u76f4\u63a5\u8bbe\u7f6e\u4e3a\u5341\u4e07\u7ea7\n    static int[][] trie = new int[N][26];\n    static int[] count = new int[N];\n    static int index = 0;\n\n    // \u5728\u6784\u9020\u65b9\u6cd5\u4e2d\u5b8c\u6210\u91cd\u7f6e static \u6210\u5458\u6570\u7ec4\u7684\u64cd\u4f5c\n    // \u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u4e3a\u51cf\u5c11 new \u64cd\u4f5c\uff08\u65e0\u8bba\u6709\u591a\u5c11\u6d4b\u8bd5\u6570\u636e\uff0c\u4e0a\u8ff0 static \u6210\u5458\u53ea\u4f1a\u88ab new \u4e00\u6b21\uff09\n    public Trie() {\n        for (int row = index; row >= 0; row--) {\n            Arrays.fill(trie[row], 0);\n        }\n        Arrays.fill(count, 0);\n        index = 0;\n    }\n    \n    public void insert(String s) {\n        int p = 0;\n        for (int i = 0; i < s.length(); i++) {\n            int u = s.charAt(i) - 'a';\n            if (trie[p][u] == 0) trie[p][u] = ++index;\n            p = trie[p][u];\n        }\n        count[p]++;\n    }\n    \n    public boolean search(String s) {\n        int p = 0;\n        for (int i = 0; i < s.length(); i++) {\n            int u = s.charAt(i) - 'a';\n            if (trie[p][u] == 0) return false;\n            p = trie[p][u];\n        }\n        return count[p] != 0;\n    }\n    \n    public boolean startsWith(String s) {\n        int p = 0;\n        for (int i = 0; i < s.length(); i++) {\n            int u = s.charAt(i) - 'a';\n            if (trie[p][u] == 0) return false;\n            p = trie[p][u];\n        }\n        return true;\n    }\n}\n")))}u.isMDXComponent=!0}}]);