"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[39096],{3905:(e,n,t)=>{t.d(n,{Zo:()=>a,kt:()=>f});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):d(d({},n),e)),t},a=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,a=l(e,["components","mdxType","originalType","parentName"]),p=s(t),c=i,f=p["".concat(u,".").concat(c)]||p[c]||g[c]||o;return t?r.createElement(f,d(d({ref:n},a),{},{components:t})):r.createElement(f,d({ref:n},a))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,d=new Array(o);d[0]=c;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[p]="string"==typeof e?e:i,d[1]=l;for(var s=2;s<o;s++)d[s]=t[s];return r.createElement.apply(null,d)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},55775:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=t(87462),i=(t(67294),t(3905));const o={},d=void 0,l={unversionedId:"Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u53cc\u5411bfs>-\u5355\u8bcd\u63a5\u9f99",id:"Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u53cc\u5411bfs>-\u5355\u8bcd\u63a5\u9f99",title:"<\u53cc\u5411bfs>-\u5355\u8bcd\u63a5\u9f99",description:"\u9898\u76ee\uff1a127. \u5355\u8bcd\u63a5\u9f99",source:"@site/docs/Algorithm/4-\u56fe\u8bba/\u4f8b\u9898-BFS/127-<\u53cc\u5411bfs>-\u5355\u8bcd\u63a5\u9f99.md",sourceDirName:"Algorithm/4-\u56fe\u8bba/\u4f8b\u9898-BFS",slug:"/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u53cc\u5411bfs>-\u5355\u8bcd\u63a5\u9f99",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<\u53cc\u5411bfs>-\u5355\u8bcd\u63a5\u9f99",draft:!1,tags:[],version:"current",sidebarPosition:127,frontMatter:{},sidebar:"docsSidebar",previous:{title:"\u5185\u5411\u57fa\u73af\u6811",permalink:"/docs/Algorithm/\u56fe\u8bba/\u5185\u5411\u57fa\u73af\u6811"},next:{title:"<bfs\u505a\u51b3\u7b56>-\u6c34\u58f6\u95ee\u9898",permalink:"/docs/Algorithm/\u56fe\u8bba/\u4f8b\u9898-BFS/<bfs\u505a\u51b3\u7b56>-\u6c34\u58f6\u95ee\u9898"}},u={},s=[{value:"\u65b9\u6cd5\u4e00\uff1a\u5355\u5411bfs",id:"\u65b9\u6cd5\u4e00\u5355\u5411bfs",level:2},{value:"\u65b9\u6cd5\u4e8c\uff1a\u53cc\u5411BFS",id:"\u65b9\u6cd5\u4e8c\u53cc\u5411bfs",level:2}],a={toc:s};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},a,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"\u9898\u76ee\uff1a",(0,i.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/word-ladder/"},"127. \u5355\u8bcd\u63a5\u9f99")),(0,i.kt)("p",null,"\u5b57\u5178 ",(0,i.kt)("inlineCode",{parentName:"p"},"wordList")," \u4e2d\u4ece\u5355\u8bcd ",(0,i.kt)("inlineCode",{parentName:"p"},"beginWord")," \u548c ",(0,i.kt)("inlineCode",{parentName:"p"},"endWord")," \u7684 ",(0,i.kt)("strong",{parentName:"p"},"\u8f6c\u6362\u5e8f\u5217")," \u662f\u4e00\u4e2a\u6309\u4e0b\u8ff0\u89c4\u683c\u5f62\u6210\u7684\u5e8f\u5217",(0,i.kt)("inlineCode",{parentName:"p"},"beginWord -> s1 -> s2 -> ... -> sk"),"\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u6bcf\u4e00\u5bf9\u76f8\u90bb\u7684\u5355\u8bcd\u53ea\u5dee\u4e00\u4e2a\u5b57\u6bcd\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u5bf9\u4e8e ",(0,i.kt)("inlineCode",{parentName:"li"},"1 <= i <= k")," \u65f6\uff0c\u6bcf\u4e2a ",(0,i.kt)("inlineCode",{parentName:"li"},"si")," \u90fd\u5728 ",(0,i.kt)("inlineCode",{parentName:"li"},"wordList")," \u4e2d\u3002\u6ce8\u610f\uff0c ",(0,i.kt)("inlineCode",{parentName:"li"},"beginWord")," \u4e0d\u9700\u8981\u5728 ",(0,i.kt)("inlineCode",{parentName:"li"},"wordList")," \u4e2d\u3002"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sk == endWord"))),(0,i.kt)("p",null,"\u7ed9\u4f60\u4e24\u4e2a\u5355\u8bcd ",(0,i.kt)("inlineCode",{parentName:"p"},"beginWord")," \u548c ",(0,i.kt)("inlineCode",{parentName:"p"},"endWord")," \u548c\u4e00\u4e2a\u5b57\u5178 ",(0,i.kt)("inlineCode",{parentName:"p"},"wordList")," \uff0c\u8fd4\u56de *\u4ece ",(0,i.kt)("inlineCode",{parentName:"p"},"beginWord")," \u5230 ",(0,i.kt)("inlineCode",{parentName:"p"},"endWord"),"\u7684 ",(0,i.kt)("strong",{parentName:"p"},"\u6700\u77ed\u8f6c\u6362\u5e8f\u5217")," \u4e2d\u7684 ",(0,i.kt)("strong",{parentName:"p"},"\u5355\u8bcd\u6570\u76ee*")," \u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8f6c\u6362\u5e8f\u5217\uff0c\u8fd4\u56de ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," \u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'\u793a\u4f8b 1\uff1a\n\n\u8f93\u5165\uff1abeginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]\n\u8f93\u51fa\uff1a5\n\u89e3\u91ca\uff1a\u4e00\u4e2a\u6700\u77ed\u8f6c\u6362\u5e8f\u5217\u662f "hit" -> "hot" -> "dot" -> "dog" -> "cog", \u8fd4\u56de\u5b83\u7684\u957f\u5ea6 5\u3002\n\n\u793a\u4f8b 2\uff1a\n\n\u8f93\u5165\uff1abeginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]\n\u8f93\u51fa\uff1a0\n\u89e3\u91ca\uff1aendWord "cog" \u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u6240\u4ee5\u65e0\u6cd5\u8fdb\u884c\u8f6c\u6362\u3002\n')),(0,i.kt)("p",null,"\u63d0\u793a\uff1a"),(0,i.kt)("p",null,"1 <= beginWord.length <= 10\nendWord.length == beginWord.length\n1 <= wordList.length <= 5000\nwordList","[i]",".length == beginWord.length\nbeginWord\u3001endWord \u548c wordList","[i]"," \u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\nbeginWord != endWord\nwordList \u4e2d\u7684\u6240\u6709\u5b57\u7b26\u4e32 \u4e92\u4e0d\u76f8\u540c"),(0,i.kt)("h2",{id:"\u65b9\u6cd5\u4e00\u5355\u5411bfs"},"\u65b9\u6cd5\u4e00\uff1a\u5355\u5411bfs"),(0,i.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a420 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8641.59%\u7684\u7528\u6237"),(0,i.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a15.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8680.31%\u7684\u7528\u6237"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n\n        wordSet = set(wordList)\n        node_sz = len(beginWord)\n        if endWord not in wordSet: return 0\n\n        queue = [(beginWord, 1)]\n        visited = set()\n        visited.add(beginWord)\n        while queue:\n            cur, depth = queue.pop(0)\n            if cur == endWord: \n                return depth\n\n            for i in range(node_sz):\n                for n in range(97, 123):\n                    word = cur[:i] + chr(n) + cur[i+1:]\n                    if word in wordSet and word not in visited:\n                        queue.append((word, depth+1))\n                        visited.add(word)\n        return 0\n")),(0,i.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a164 ms, \u5728\u6240\u6709 Go \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8631.73%\u7684\u7528\u6237"),(0,i.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a7.3 MB, \u5728\u6240\u6709 Go \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8642.49%\u7684\u7528\u6237"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-golang"},"func ladderLength(beginWord string, endWord string, wordList []string) int {\n    wordSet := map[string]int{}\n    for _, v := range wordList {\n        wordSet[v] = 0\n    }\n    if _, ok := wordSet[endWord]; !ok {\n        return 0\n    }\n\n    queue := []string{beginWord}\n    visited := map[string]int{beginWord: 0}\n    depth := 1\n    for len(queue) > 0 {\n        q_sz := len(queue)\n        for i := 0; i < q_sz; i++ {\n            cur := queue[0]\n            queue = queue[1:] // \u7c7b\u4f3cpython\u4e2d\u7684list.pop(0)\n            if cur == endWord {\n                return depth\n            }\n            for c := 0; c < len(beginWord); c++ {\n                for j := 'a'; j <= 'z'; j++ {\n                    newWord := cur[:c] + string(j) + cur[c+1:]\n                    if _, ok := wordSet[newWord]; ok {\n                        if _, ok := visited[newWord]; !ok {\n                            queue = append(queue, newWord)\n                            visited[newWord] = 0\n                        }\n                    }\n                }\n            }\n        }\n        depth++\n    }\n    return 0\n}\n")),(0,i.kt)("h2",{id:"\u65b9\u6cd5\u4e8c\u53cc\u5411bfs"},"\u65b9\u6cd5\u4e8c\uff1a\u53cc\u5411BFS"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u8d77\u70b9\u548c\u7ec8\u70b9\u90fd\u660e\u786e\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7528\u53cc\u5411 bfs")),(0,i.kt)("p",null,"1\u3001\u53c2\u6570\u5b9a\u4e49"),(0,i.kt)("p",null,"st\uff1awordList\u5bf9\u5e94\u7684set\u96c6\u5408\uff0c\u65b9\u4fbfO(1)\u65f6\u95f4\u590d\u6742\u5ea6\u67e5\u627e"),(0,i.kt)("p",null,"m\uff1a\u6bcf\u4e2a\u5355\u8bcd\u957f\u5ea6"),(0,i.kt)("p",null,"step\uff1a\u63a5\u9f99\u5355\u8bcd\u4e2a\u6570"),(0,i.kt)("p",null,"lqueue,rqueue\uff1a\u5de6\u53f3\u961f\u5217"),(0,i.kt)("p",null,"lvisited,rvisited\uff1a\u5de6\u53f3\u96c6\u5408\uff0c\u8bb0\u5f55\u8bbf\u95ee\u8fc7\u7684\u70b9"),(0,i.kt)("p",null,"2\u3001\u601d\u8def"),(0,i.kt)("p",null,"\u548c\u5355\u5411BFS\u4e0d\u540c\u7684\u662f\uff0c\u5206\u522b\u4ecebeginWord\u548cendWord\u5f00\u59cb\u505aBFS\uff0c\u5e76\u5206\u522b\u5c06\u6ee1\u8db3\u6761\u4ef6\u7684\u5355\u8bcd\u52a0\u5165\u5230lqueue\u3001lvisited\u548crqueue\u3001rvisited\u3002"),(0,i.kt)("p",null,"\u4ee5\u5c42\u4e3a\u5355\u4f4d\u9012\u589estep"),(0,i.kt)("p",null,"\u6bcf\u6b21\u5bf9\u5143\u7d20\u5c11\u7684\u961f\u5217\u8fdb\u884cBFS\uff0c\u5982\u679c\u8bbf\u95ee\u5230\u7684\u5355\u8bcd\u5728\u53e6\u5916\u4e00\u8fb9\u5df2\u88ab\u8bbf\u95ee\u8fc7\uff0c\u8bf4\u660e\u63a5\u9f99\u6210\u529f\uff0c\u8fd4\u56destep"),(0,i.kt)("p",null,"3\u3001\u590d\u6742\u5ea6\u5206\u6790"),(0,i.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},"O(MN)"),"\uff0cM\u4e3a\u5355\u8bcd\u957f\u5ea6\uff0cN\u4e3awordList\u7684\u957f\u5ea6"),(0,i.kt)("p",null,"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},"O(N)")),(0,i.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a92 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8688.57%\u7684\u7528\u6237"),(0,i.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a15.7 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8668.51%\u7684\u7528\u6237"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        wordSet = set(wordList)\n        if endWord not in wordSet:\n            return 0\n\n        l_queue = [beginWord]\n        r_queue = [endWord]\n        l_visited = set([beginWord])  # \u4e0d\u8981 set(beginWord)\n        r_visited = set([endWord])\n        depth = 1\n\n        while l_queue and r_queue:\n\n            if len(l_queue) > len(r_queue):\n                # \u6bcf\u6b21\u90fd\u8d70\u77ed\u7684\u4e00\u4fa7\uff0c\u80fd\u8d70\u6700\u5c0f\u7684\u9762\u79ef\n                l_queue, r_queue = r_queue, l_queue\n                l_visited, r_visited = r_visited, l_visited\n\n            # \u5982\u679c\u5199\u5728range(len(l_queue))\u4e5f\u884c\uff0c\u56e0\u4e3a\u53ea\u4f1a\u8ba1\u7b97\u7b2c\u4e00\u6b21\u7684\u957f\u5ea6\uff0c\u4ee5\u540e\u66f4\u65b0l_queue\uff0crange\u91cc\u9762\u7684\u503c\u4e0d\u4f1a\u91cd\u65b0\u8ba1\u7b97\uff0c\u4f46\u4e3a\u4e86\u548c\u5176\u4ed6\u8bed\u8a00\u517c\u5bb9\uff0c\u8fd9\u91cc\u5199\u5728\u5916\u9762\u6bd4\u8f83\u597d\n            queue_sz = len(l_queue)\n            for _ in range(queue_sz):  # \u6bcf\u5c42\u5f00\u59cb\u904d\u5386\n                cur = l_queue.pop(0)\n                if cur in r_visited:  # \u5982\u679c\u5f53\u524d\u8282\u70b9\u5728\u53e6\u4e00\u4fa7\u8d70\u8fc7\uff0c\u8bf4\u660e\u5728\u8fd9\u4e00\u5c42\u51fa\u73b0\u7126\u70b9\u4e86\n                    return depth\n                for i in range(len(beginWord)):\n                    for j in range(97, 123):\n                        n_node = cur[:i] + chr(j) + cur[i+1:]\n                        if n_node in wordSet and n_node not in l_visited:\n                            l_queue.append(n_node)\n                            l_visited.add(n_node)\n            depth += 1\n\n        return 0\n")),(0,i.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a28 ms, \u5728\u6240\u6709 Go \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8689.80%\u7684\u7528\u6237"),(0,i.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a6.4 MB, \u5728\u6240\u6709 Go \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8670.82%\u7684\u7528\u6237"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"func ladderLength(beginWord string, endWord string, wordList []string) int {\n    wordSet := map[string]int{}\n    for _, v := range wordList {\n        wordSet[v] = 0\n    }\n    if _, ok := wordSet[endWord]; !ok {\n        return 0\n    }\n\n    leftQueue := []string{beginWord}\n    rightQueue := []string{endWord}\n    leftVisited := map[string]int{beginWord: 0}\n    rightVisited := map[string]int{endWord: 0}\n    depth := 1\n    for len(leftQueue) > 0 && len(rightQueue) > 0 {\n        if len(leftQueue) > len(rightQueue) {\n            // \u6bcf\u6b21\u90fd\u8d70\u77ed\u7684\u4e00\u4fa7\uff0c\u80fd\u8d70\u6700\u5c0f\u7684\u9762\u79ef\n            leftQueue, rightQueue = rightQueue, leftQueue\n            leftVisited, rightVisited = rightVisited, leftVisited\n        }\n        queue_sz := len(leftQueue)\n        for i := 0; i < queue_sz; i++ {\n            // for i := 0; i < len(leftQueue); i++ \u8fd9\u6837\u5199\u662f\u4e0d\u53ef\u4ee5\u7684\uff0cgo\u4e2d\u6bcf\u6b21\u5faa\u73af\u5b8c\u90fd\u4f1a\u8ba1\u7b97\u4e00\u4e0b\u6700\u65b0\u7684len(leftQueue)\uff0cpython\u7528range\u53ea\u4f1a\u7b2c\u4e00\u6b21\u8ba1\u7b97\uff0c\u4e4b\u540e\u4e0d\u4f1a\u518d\u66f4\u65b0\n            cur := leftQueue[0]\n            leftQueue = leftQueue[1:] // \u7c7b\u4f3cpython\u4e2d\u7684list.pop(0)\n            if _, ok := rightVisited[cur]; ok {\n                // \u5728\u53e6\u4e00\u8fb9\u51fa\u73b0\u8fc7\n                return depth\n            }\n            for c := 0; c < len(beginWord); c++ {\n                for j := 'a'; j <= 'z'; j++ {\n                    newWord := cur[:c] + string(j) + cur[c+1:]\n                    if _, ok := wordSet[newWord]; ok {\n                        if _, ok := leftVisited[newWord]; !ok {\n                            leftQueue = append(leftQueue, newWord)\n                            leftVisited[newWord] = 0\n                        }\n                    }\n                }\n            }\n        }\n        depth++\n    }\n    return 0\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\n        int n = beginWord.size();\n        unordered_set<string> wordset(wordList.begin(), wordList.end());\n        if (!wordset.count(endWord)) return 0;\n\n        deque<string> que_l = {beginWord};\n        deque<string> que_r = {endWord};\n        unordered_set<string> vis_l = {beginWord};\n        unordered_set<string> vis_r = {endWord};\n\n        int step = 1;\n        while (!que_l.empty() && !que_r.empty()) {\n            if (que_l.size() > que_r.size()) {\n                swap(que_l, que_r);\n                swap(vis_l, vis_r);\n            }\n            int sz = que_l.size();\n            for (int i = 0; i < sz; i++) {\n                string cur = que_l.front();\n                que_l.pop_front();\n                if (vis_r.count(cur)) return step;\n\n                for (int j = 0; j < n; j++) {\n                    for (int k = 97; k <= 122; k++) {\n                        string next = cur;\n                        next[j] = k;\n                        if (!wordset.count(next)) continue;  // \u4e0d\u5c5e\u4e8e\u5907\u9009\n                        if (vis_l.count(next)) continue;     // \u91cd\u590d\u51fa\u73b0\n                        que_l.push_back(next);\n                        vis_l.insert(next);\n                    }\n                }\n            }\n            step++;\n        }\n        return 0;\n    }\n};\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6bcf\u6b21\u5404\u6362\u4e00\u8fb9\u8d70\uff0c\u4f18\u5316\u4e0d\u5982\u6bcf\u6b21\u90fd\u8d70\u77ed\u7684\u4e00\u8fb9")),(0,i.kt)("p",null,"\u6267\u884c\u7528\u65f6\uff1a248 ms, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8659.74%\u7684\u7528\u6237"),(0,i.kt)("p",null,"\u5185\u5b58\u6d88\u8017\uff1a15.6 MB, \u5728\u6240\u6709 Python3 \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8673.90%\u7684\u7528\u6237"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        wordSet = set(wordList)\n        if endWord not in wordSet: return 0\n\n        l_queue = [beginWord]\n        r_queue = [endWord]\n        l_visited = set([beginWord]) # \u4e0d\u8981 set(beginWord)\n        r_visited = set([endWord])\n        depth = 1\n\n        while l_queue and r_queue:\n\n            # if len(l_queue) > len(r_queue):\n            #     # \u6bcf\u6b21\u90fd\u8d70\u77ed\u7684\u4e00\u4fa7\uff0c\u80fd\u8d70\u6700\u5c0f\u7684\u9762\u79ef\n            #     l_queue, r_queue = r_queue, l_queue\n            #     l_visited, r_visited = r_visited, l_visited\n\n            for _ in range(len(l_queue)): # \u6bcf\u5c42\u5f00\u59cb\u904d\u5386\n                cur = l_queue.pop(0)\n                if cur in r_visited: # \u5982\u679c\u5f53\u524d\u8282\u70b9\u5728\u53e6\u4e00\u4fa7\u8d70\u8fc7\uff0c\u8bf4\u660e\u5728\u8fd9\u4e00\u5c42\u51fa\u73b0\u7126\u70b9\u4e86\n                    return depth\n                for i in range(len(beginWord)):\n                    for j in range(97, 123):\n                        n_node = cur[:i] + chr(j) + cur[i+1:]\n                        if n_node in wordSet and n_node not in l_visited:\n                            l_queue.append(n_node)\n                            l_visited.add(n_node)\n            depth += 1\n            l_queue, r_queue = r_queue, l_queue\n            l_visited, r_visited = r_visited, l_visited\n\n        return 0\n")))}p.isMDXComponent=!0}}]);