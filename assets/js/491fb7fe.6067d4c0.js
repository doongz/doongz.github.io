"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[74243],{3905:(n,t,e)=>{e.d(t,{Zo:()=>l,kt:()=>b});var r=e(67294);function i(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function a(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function s(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?a(Object(e),!0).forEach((function(t){i(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):a(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function o(n,t){if(null==n)return{};var e,r,i=function(n,t){if(null==n)return{};var e,r,i={},a=Object.keys(n);for(r=0;r<a.length;r++)e=a[r],t.indexOf(e)>=0||(i[e]=n[e]);return i}(n,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)e=a[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(i[e]=n[e])}return i}var c=r.createContext({}),p=function(n){var t=r.useContext(c),e=t;return n&&(e="function"==typeof n?n(t):s(s({},t),n)),e},l=function(n){var t=p(n.components);return r.createElement(c.Provider,{value:t},n.children)},u="mdxType",m={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(n,t){var e=n.components,i=n.mdxType,a=n.originalType,c=n.parentName,l=o(n,["components","mdxType","originalType","parentName"]),u=p(e),d=i,b=u["".concat(c,".").concat(d)]||u[d]||m[d]||a;return e?r.createElement(b,s(s({ref:t},l),{},{components:e})):r.createElement(b,s({ref:t},l))}));function b(n,t){var e=arguments,i=t&&t.mdxType;if("string"==typeof n||i){var a=e.length,s=new Array(a);s[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=n,o[u]="string"==typeof n?n:i,s[1]=o;for(var p=2;p<a;p++)s[p]=e[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,e)}d.displayName="MDXCreateElement"},10895:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var r=e(87462),i=(e(67294),e(3905));const a={},s="\u81ea\u5b9a\u4e49\u6392\u5e8f\u5408\u96c6",o={unversionedId:"Algorithm/\u524d\u8ff0/\u81ea\u5b9a\u4e49\u6392\u5e8f\u5408\u96c6",id:"Algorithm/\u524d\u8ff0/\u81ea\u5b9a\u4e49\u6392\u5e8f\u5408\u96c6",title:"\u81ea\u5b9a\u4e49\u6392\u5e8f\u5408\u96c6",description:"\u4e00\u3001sort()",source:"@site/docs/Algorithm/0-\u524d\u8ff0/4-\u81ea\u5b9a\u4e49\u6392\u5e8f\u5408\u96c6.md",sourceDirName:"Algorithm/0-\u524d\u8ff0",slug:"/Algorithm/\u524d\u8ff0/\u81ea\u5b9a\u4e49\u6392\u5e8f\u5408\u96c6",permalink:"/docs/Algorithm/\u524d\u8ff0/\u81ea\u5b9a\u4e49\u6392\u5e8f\u5408\u96c6",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"docsSidebar",previous:{title:"\u5e38\u89c1\u62a5\u9519",permalink:"/docs/Algorithm/\u524d\u8ff0/\u5e38\u89c1\u62a5\u9519"},next:{title:"\u5237\u9898\u7ecf\u9a8c",permalink:"/docs/Algorithm/\u524d\u8ff0/\u5237\u9898\u7ecf\u9a8c"}},c={},p=[{value:"\u4e00\u3001sort()",id:"\u4e00sort",level:2},{value:"\u4e8c\u3001priority_queue",id:"\u4e8cpriority_queue",level:2},{value:"\u4e09\u3001set\u3001multiset",id:"\u4e09setmultiset",level:2},{value:"\u56db\u3001map\u3001multimap",id:"\u56dbmapmultimap",level:2}],l={toc:p};function u(n){let{components:t,...e}=n;return(0,i.kt)("wrapper",(0,r.Z)({},l,e,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u81ea\u5b9a\u4e49\u6392\u5e8f\u5408\u96c6"},"\u81ea\u5b9a\u4e49\u6392\u5e8f\u5408\u96c6"),(0,i.kt)("h2",{id:"\u4e00sort"},"\u4e00\u3001sort()"),(0,i.kt)("p",null,"sort: \u9ed8\u8ba4\u7531\u5c0f\u5230\u5927\uff0clambda\u5927\u5c0f\u4e00\u81f4"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},'#include <algorithm>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nvoid print(vector<int> &arr) {\n    for (int i = 0; i < arr.size(); i++) {\n        cout << arr[i] << " ";\n    }\n    cout << endl;\n}\n\nstruct cmpO {\n    bool operator()(const int a, const int b) const {\n        return a < b;\n    }\n};\n\nint main() {\n    vector<int> arr{5, 2, 3, 4, 1};\n\n    // 1\u3001\u81ea\u5b9a\u4e49\u6392\u5e8f\n    auto cmp = [&](const auto &a, const auto &b) {\n        return a > b;\n    };\n    sort(arr.begin(), arr.end(), cmp);\n    print(arr);  // 5 4 3 2 1\n\n    // 2\u3001less<int>\n    sort(arr.begin(), arr.end(), less<int>());\n    print(arr);  // 1 2 3 4 5\n\n    sort(arr.begin(), arr.end(), greater<int>());\n    print(arr);  // 5 4 3 2 1\n\n    // 3\u3001struct\n    sort(arr.begin(), arr.end(), cmpO());\n    print(arr);  // 1 2 3 4 5\n}\n')),(0,i.kt)("h2",{id:"\u4e8cpriority_queue"},"\u4e8c\u3001priority_queue"),(0,i.kt)("p",null,"\u6570\u636e\u7c7b\u578b\uff0c\u5e95\u5c42\u5bb9\u5668\uff0c\u6392\u5e8f\u89c4\u5219\u5fc5\u987b\u540c\u65f6\u6307\u5b9a"),(0,i.kt)("p",null,"\u9ed8\u8ba4\u7531\u5927\u5230\u5c0f\uff0clambda\u5927\u5c0f\u76f8\u53cd"),(0,i.kt)("p",null,"\u9ed8\u8ba4\u662f ",(0,i.kt)("inlineCode",{parentName:"p"},"less<int>")," \u4f5c\u4e3a\u6392\u5e8f\u89c4\u5219\uff0c\u5b9e\u73b0\u5927\u6839\u5806\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"greater<int>")," \u4f5c\u4e3a\u6392\u5e8f\u89c4\u5219\uff0c\u5b9e\u73b0\u5c0f\u6839\u5806"),(0,i.kt)("p",null,"\u5e95\u5c42\u5bb9\u5668\u4e3a vector \u8981\u6bd4 deque \u5feb\u5f88\u591a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"#include <algorithm>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\nstruct cmpO {\n    bool operator()(const int &a, const int &b) const {\n        return a < b;\n    }\n};\n\nint main() {\n    vector<int> arr{5, 2, 3, 4, 1};\n\n    // 1\u3001\u81ea\u5b9a\u4e49\u6392\u5e8f\n    auto cmp = [&](const auto &a, const auto &b) {\n        return a > b;\n    };\n    priority_queue<int, vector<int>, decltype(cmp)> que1(cmp);\n    for (int i = 0; i < arr.size(); i++) {\n        que1.push(arr[i]);\n    }  // 1 2 3 4 5\n\n    // 2\u3001greater<int>\n    priority_queue<int, vector<int>, greater<int>> que2;\n    for (int i = 0; i < arr.size(); i++) {\n        que2.push(arr[i]);\n    }  // 1 2 3 4 5\n\n    // 3\u3001struct\n    priority_queue<int, vector<int>, cmpO> que3;\n    for (int i = 0; i < arr.size(); i++) {\n        que3.push(arr[i]);\n    }  // 5 4 3 2 1\n}\n")),(0,i.kt)("p",null,"\u5806\u4e2d\u7684\u5143\u7d20\u662f\u5bf9\u8c61\uff0c\u591a\u7ea7\u6bd4\u8f83"),(0,i.kt)("p",null,"\u91cd\u8f7d\u300c\u5c0f\u6839\u5806\u300d\u7684\u56de\u8c03\u51fd\u6570\uff0c\u9700\u8981\u7528\u5927\u4e8e\u53f7\u300c>\u300d"),(0,i.kt)("p",null,"\u91cd\u8f7d\u300c\u5927\u6839\u5806\u300d\u7684\u56de\u8c03\u51fd\u6570\uff0c\u9700\u8981\u7528\u5c0f\u4e8e\u53f7\u300c<\u300d"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},'#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n\nclass Person {\npublic:\n    string name;\n    int age;\n};\n\n// \u91cd\u8f7d\u5c0f\u6839\u5806\u7684\u56de\u8c03\u51fd\u6570\uff0c\u4f18\u5148\u6bd4\u8f83name\nstruct cmpSmall {\n    bool operator()(const Person &p1, const Person &p2) const { // \u683c\u5f0f\u53ef\u4ee5\u4e3a\u5f15\u7528\n        if (p1.name != p2.name) {\n            return p1.name > p2.name;\n        } else {\n            return p1.age > p2.age;\n        }\n    }\n};\n\n// \u91cd\u8f7d\u5927\u6839\u5806\u7684\u56de\u8c03\u51fd\u6570\uff0c\u4f18\u5148\u6bd4\u8f83age\nstruct cmpBig {\n    bool operator()(const Person &p1, const Person &p2) const {\n        if (p1.age != p2.age) {\n            return p1.age < p2.age;\n        } else {\n            return p1.name < p2.name;\n        }\n    }\n};\n\nint main() {\n    vector<Person> vec = {\n        {"aaa", 10},\n        {"bbb", 10},\n        {"bbb", 20},\n    };\n\n    // \u5c0f\u6839\u5806\uff0c\u5148\u6bd4\u8f83name\n    priority_queue<Person, deque<Person>, cmpSmall> smallQ(vec.begin(), vec.end());\n    while (!smallQ.empty()) {\n        cout << smallQ.top().name << ", " << smallQ.top().age << endl;\n        smallQ.pop();\n    }\n    // aaa, 10\n    // bbb, 10\n    // bbb, 20\n\n    // \u5927\u6839\u5806\uff0c\u5148\u6bd4\u8f83age\n    priority_queue<Person, deque<Person>, cmpBig> bigQ(vec.begin(), vec.end());\n    while (!bigQ.empty()) {\n        cout << bigQ.top().age << ", " << bigQ.top().name << endl;\n        bigQ.pop();\n    }\n    // 20, bbb\n    // 10, bbb\n    // 10, aaa\n}\n')),(0,i.kt)("h2",{id:"\u4e09setmultiset"},"\u4e09\u3001set\u3001multiset"),(0,i.kt)("p",null,"set \u548c multiset: \u9ed8\u8ba4\u7531\u5c0f\u5230\u5927\uff0clambda\u5927\u5c0f\u4e00\u81f4\uff0c\u591a\u7ea7\u6392\u5e8f"),(0,i.kt)("p",null,"struct cmp \u4e2d\uff0c\u4e09\u4e2a const \u90fd\u5fc5\u987b\u8981"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"#include <algorithm>\n#include <iostream>\n#include <set>\n#include <vector>\nusing namespace std;\n\nstruct cmpO {\n    bool operator()(const int &a, const int &b) const {\n        return a > b;\n    }\n};\n\nint main() {\n    // 1\u3001\u81ea\u5b9a\u4e49\u6392\u5e8f\n    auto cmp = [&](const auto &a, const auto &b) {\n        if (a.first != b.first) {\n            return a.first > b.first;\n        }\n        if (a.second.first != b.second.first) {\n            return a.second.first < b.second.first;\n        }\n        return a.second.second > b.second.second;\n    };\n    multiset<pair<char, pair<int, int>>, decltype(cmp)> mset(cmp);\n    mset.insert({'a', {1, 1}});\n    mset.insert({'a', {3, 5}});\n    mset.insert({'a', {3, 9}});\n    mset.insert({'b', {3, 4}});\n    mset.insert({'b', {5, 4}});\n    mset.insert({'e', {3, 4}});\n\n    for (auto it = mset.begin(); it != mset.end(); it++) {\n        cout << it->first << \", \" << (it->second).first << \", \" << (it->second).second << endl;\n    }\n    // e, 3, 4\n    // b, 3, 4\n    // b, 5, 4\n    // a, 1, 1\n    // a, 3, 9\n    // a, 3, 5\n\n    // 2\u3001greater<int>\n    set<int, greater<int>> s1;\n    s1.insert(2);\n    s1.insert(1);\n    s1.insert(3);\n    s1.insert(5);\n    s1.insert(4);\n    // 5 4 3 2 1\n\n    // 3\u3001struct\n    set<int, cmpO> s2;\n    s2.insert(2);\n    s2.insert(1);\n    s2.insert(3);\n    s2.insert(5);\n    s2.insert(4);\n    // 5 4 3 2 1\n    for (auto it = s2.begin(); it != s2.end(); it++) {\n        cout << *it << \" \";\n    }\n    cout << endl;\n}\n")),(0,i.kt)("p",null,"\u6280\u5de7\uff1a\u52a0\u4e2a\u8d1f\u53f7\u53d8\u6210\u7531\u5927\u5230\u5c0f"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},'#include <algorithm>\n#include <iostream>\n#include <set>\n#include <utility>  // std::pair, std::make_pair\n#include <vector>\nusing namespace std;\n\nstruct cmp {\n    bool operator()(const pair<int, string>& a, const pair<int, string>& b) const {\n        if (a.first == b.first) {\n            return a.second < b.second;\n        }\n        return a.first > b.first;\n    }\n};\n\nint main() {\n    vector<string> foods = {"c", "a", "d", "b", "e", "z"};\n    vector<int> ratings = {5, 3, 4, 1, 2, 3};\n\n    set<pair<int, string>> sp;  // \u8bc4\u5206\u7531\u5927\u5230\u5c0f\uff0cfood \u5b57\u5178\u5e8f\u7531\u5c0f\u5230\u5927\n    for (int i = 0; i < foods.size(); i++) {\n        sp.insert({-ratings[i], foods[i]});  // \u6280\u5de7\uff1a\u52a0\u4e2a\u8d1f\u53f7\u53d8\u6210\u7531\u5927\u5230\u5c0f\n    }\n\n    for (auto it = sp.begin(); it != sp.end(); it++) {\n        cout << -1 * it->first << " " << it->second << endl;  // \u6ce8\u610f\u53d6\u51fa\u7684\u65f6\u5019\u8981\u4e58 -1\n    }\n    // 5 c\n    // 4 d\n    // 3 a\n    // 3 z\n    // 2 e\n    // 1 b\n\n    // struct\n    set<pair<int, string>, cmp> sp2;  // \u8bc4\u5206\u7531\u5927\u5230\u5c0f\uff0cfood \u5b57\u5178\u5e8f\u7531\u5c0f\u5230\u5927\n    for (int i = 0; i < foods.size(); i++) {\n        sp2.insert({ratings[i], foods[i]});\n    }\n\n    for (auto it = sp2.begin(); it != sp2.end(); it++) {\n        cout << it->first << " " << it->second << endl;\n    }\n    // 5 c\n    // 4 d\n    // 3 a\n    // 3 z\n    // 2 e\n    // 1 b\n}\n')),(0,i.kt)("h2",{id:"\u56dbmapmultimap"},"\u56db\u3001map\u3001multimap"),(0,i.kt)("p",null,"map \u548c multimap: \u9ed8\u8ba4\u7531\u5c0f\u5230\u5927\uff0clambda\u5927\u5c0f\u4e00\u81f4\uff0c\u53ea\u80fd\u5bf9key\u6392\u5e8f"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c++"},"#include <algorithm>\n#include <iostream>\n#include <map>\n#include <vector>\nusing namespace std;\n\nstruct cmpO {\n    bool operator()(const char &a, const char &b) const {\n        return a > b;\n    }\n};\n\nint main() {\n    // 1\u3001\u81ea\u5b9a\u4e49\u6392\u5e8f\n    auto cmp = [&](const auto &a, const auto &b) {\n        return a > b;\n    };\n    multimap<char, int, decltype(cmp)> mmap1(cmp);\n    mmap1.insert({'a', 1});  // multimap \u6ca1\u6709 [] \u7528\u6cd5\n    mmap1.insert({'a', 2});\n    mmap1.insert({'b', 2});\n    mmap1.insert({'b', 3});\n    mmap1.insert({'c', 1});\n    // c : 1\n    // b : 2\n    // b : 3\n    // a : 1\n    // a : 2\n\n    // 2\u3001less<>\n    multimap<char, int, less<char>> mmap2;\n    mmap2.insert({'a', 1});\n    mmap2.insert({'a', 2});\n    mmap2.insert({'b', 2});\n    mmap2.insert({'b', 3});\n    mmap2.insert({'c', 1});\n    // a : 1\n    // a : 2\n    // b : 2\n    // b : 3\n    // c : 1\n\n    // 3\u3001struct\n    multimap<char, int, cmpO> mmap3;\n    mmap3.insert({'a', 1});\n    mmap3.insert({'a', 2});\n    mmap3.insert({'b', 2});\n    mmap3.insert({'b', 3});\n    mmap3.insert({'c', 1});\n    for (auto it = mmap3.begin(); it != mmap3.end(); it++) {\n        cout << it->first << \" : \" << it->second << endl;\n    }\n    // c : 1\n    // b : 2\n    // b : 3\n    // a : 1\n    // a : 2\n}\n")))}u.isMDXComponent=!0}}]);